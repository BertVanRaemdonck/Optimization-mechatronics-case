/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#include <cmath>
#ifdef _XOPEN_SOURCE
#undef _XOPEN_SOURCE
#endif
#ifdef _POSIX_C_SOURCE
#undef _POSIX_C_SOURCE
#endif


#define UINT64_T unsigned long long int


#define SWIGMATLAB
#define SWIG_name_d      "splines"
#define SWIG_name        splines

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "splines"
#define SwigVar_mxArray mxArray*
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Workaround, Octave's mex.h lacks uint64_t */
#include <stdint.h>
/* MATLAB's C-API */
#include <mex.h>
/* MISC C libraries */
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <limits.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[1024];
SWIGRUNTIME void SWIG_Error(int code, const char *format, ...) {
  SWIG_lasterror_code = code;
  va_list arg;
  va_start(arg, format);
  vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
  va_end(arg);
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME int SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs) {
    SWIG_Error(SWIG_RuntimeError, "function %s takes at most %i arguments", func_name, max_args);
  } else if (num_args < min_args) {
    SWIG_Error(SWIG_RuntimeError, "function %s requires at least %i arguments", func_name, min_args);
  } else {
    return 1;
  }
  return 0;
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata)                      SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
  void *ptr;
  swig_type_info *type;
  int own;
  void *self;
  struct SwigPtr* next;
} SwigPtr;
static swig_module_info *saved_swig_module = 0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(SwigPtr** swig_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!swig_ptr || !type) return 1;

  /* Allocate memory */
  SwigPtr *obj=(SwigPtr *)malloc(sizeof(SwigPtr));
  if (!obj) return 1;

  /* Initialize object */
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  obj->self = obj;
  obj->next = 0;

  /* Return memory reference and successful return */
  *swig_ptr = obj;
  return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(SwigPtr* p) {
  /* Quick return if null pointer? */
  if (p==0) return 0;

  /* Clear and free */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  p->self=0;
  p->next=0;
  free(p);
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {
  /* Unused at the moment */
}

SWIGRUNTIME int
SWIG_Matlab_CallInterp(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  return mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
#else
  mxArray* ex = mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
  if (ex) {
    mxDestroyArray(ex);
    return 1;
  } else {
    return 0;
  }
#endif
}

SWIGRUNTIME void SWIG_Matlab_Error(const char *message) {
#ifdef HAVE_OCTAVE
    mexErrMsgTxt(message);
#else
    mxArray *msg = mxCreateString(message);
    mexCallMATLAB(0, 0, 1, &msg, "error");
    mxDestroyArray(msg);
#endif
}

SWIGRUNTIME void SWIG_Matlab_ErrorId(const char *errorid, const char *message) {
#ifdef HAVE_OCTAVE
    mexErrMsgIdAndTxt(errorid, message);
#else
    mxArray *msg = mxCreateString(message);
    mxArray *id  = mxCreateString(errorid);
    mxArray *arg[2] = {id, msg};
    mexCallMATLAB(0, 0, 2, arg, "error");
    mxDestroyArray(msg);
    mxDestroyArray(id);
#endif
}

SWIGRUNTIME mxArray*
SWIG_Matlab_CallInterpEx(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  int flag = mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
  if (flag) {
    SWIG_Matlab_ErrorId("SWIG:CallInterpEx","Not implemented for Octave");
  }
  return 0;
#else
  return mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
#endif
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Matlab_ConvertPacked(mxArray* pm, void *ptr, size_t sz, swig_type_info *ty) {
  SWIG_Matlab_ErrorId("SWIG:ConvertPacked","Not implemented");
  return SWIG_ERROR;
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */
  SwigPtr* swig_ptr;
  if (SWIG_Matlab_NewPointer(&swig_ptr, ptr, type, own)) {
    SWIG_Matlab_ErrorId("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Create a SwigRef instance */
  mxArray* pm = 0;
  int ex = SWIG_Matlab_CallInterp(1, &pm, 0, 0, "SwigRef");
  if (ex) SWIG_Matlab_ErrorId("SWIG:NewPointerObj", "Cannot create SwigRef instance");

  /* Set pointer property */
  mxArray *pm_ptr = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ptr) = (uint64_T)swig_ptr;
  if(!pm_ptr) SWIG_Matlab_ErrorId("SWIG:NewPointerObj", "mxCreateNumericMatrix failed");

#ifdef HAVE_OCTAVE
  mxArray *rhs[2] = {pm, pm_ptr};
  mexCallMATLAB(0, 0, 2, rhs, "SwigSet");
#else
  mxSetProperty(pm, 0, "swigPtr", pm_ptr);
#endif
  mxDestroyArray(pm_ptr);

  /* Create a proxy class of the desired type */
  if (type->clientdata) {
    const char* matlab_classname = (const char *)type->clientdata;
    mxArray* pm_test = 0;
    ex = SWIG_Matlab_CallInterp(1, &pm_test, 1, &pm, matlab_classname);
    if (ex) {
      mexWarnMsgIdAndTxt("SWIG:NewPointerObj",
                         "NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
    } else {
      mxDestroyArray(pm);
      pm = pm_test;
    }
  }

  return pm;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE mxArray*
SWIG_Matlab_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  SWIG_Matlab_ErrorId("SWIG:NewPackedOb","Not implemented");
  return 0;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm) {
  // Short-circuit for non-class types
  if (mxIsNumeric(pm) || mxIsLogical(pm) || mxIsCell(pm) || mxIsChar(pm)) return 0;
/* Get index, represented as a uint64_T scalar */
#ifdef HAVE_OCTAVE
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
#else
  mxArray *pm_ptr = mxGetProperty(pm, 0, "swigPtr");
#endif
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  return p ? p->own : 0;
}

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm) {
  // Short-circuit for non-class types
  if (mxIsNumeric(pm) || mxIsLogical(pm) || mxIsCell(pm) || mxIsChar(pm)) return 0;
/* Get index, represented as a uint64_T scalar */
#ifdef HAVE_OCTAVE
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
#else
  mxArray *pm_ptr = mxGetProperty(pm, 0, "swigPtr");
#endif
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return 0;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Consistency check */
  if (p->self != p) return 0;

  /* Get pointer object */
  return p;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  // Short-circuit for non-class types
  if (mxIsNumeric(pm) || mxIsLogical(pm) || mxIsCell(pm) || mxIsChar(pm)) return SWIG_ERROR;
  /* Get index, represented as a uint64_T scalar */
#ifdef HAVE_OCTAVE
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
#else
  mxArray *pm_ptr = mxGetProperty(pm, 0, "swigPtr");
#endif
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)){
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* swig_ptr = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Get pointer object */
  if (!swig_ptr) return SWIG_ERROR;

  swig_cast_info *tc;
  int same_type = 0;
  SwigPtr* p=swig_ptr;
  while (p) {
    /* Loop over types */
    swig_type_info *p_type = p->type;

    /* No type cast needed */
    if (p_type==type || !type) {
      same_type = 1;
      break;
    }

    /* Check if type conversion is possible */
    tc = SWIG_TypeCheck(p_type->name, type);
    if (tc) break;

    /* Check next type */
    p = p->next;
  }

  /* Conversion not possible */
  if (!same_type && !tc) return SWIG_ERROR;

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;

  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    SWIG_Matlab_DeletePointer(swig_ptr);
  }

  /* No type cast needed */
  if (same_type || !ptr) {
    return SWIG_OK;
  }

  /* Do type-cast */
  int newmemory = 0;
  *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
  if (newmemory == SWIG_CAST_NEW_MEMORY) {
    if (own) {
      *own = *own | SWIG_CAST_NEW_MEMORY;
    } else {
      /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
      SWIG_Matlab_ErrorId("SWIG:ConvertPointerObj", "SWIG error in converting pointer. Bad typemap?");
      return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  if (!saved_swig_module) {
    /* First call for this module, fetch pointer from MATLAB */
    mxArray* mem = 0;
    int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
    if (flag || !mem) SWIG_Matlab_ErrorId("SWIG:GetModule", "Cannot call SwigMem");
    /* On first call, mem is an empty matrix */
    if (mxGetNumberOfElements(mem)!= 0) {
      if (!mxIsStruct(mem)) {
        SWIG_Matlab_ErrorId("SWIG:GetModule", "Corrupted memory");
      }
      mxArray *module = mxGetField(mem, 0,
        "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
      if (module && mxGetNumberOfElements(module) == 1 && mxGetClassID(module) == mxUINT64_CLASS && !mxIsComplex(module)) {
        /* Cast memory as a pointer */
        saved_swig_module = (swig_module_info*)(*(uint64_T*)mxGetData(module));
      }
    }
    mxDestroyArray(mem);
  }
  return saved_swig_module;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer) {
  mxArray* mem = 0;
  const char *fields[1] = {"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME};
  int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
  if (flag || !mem) SWIG_Matlab_ErrorId("SWIG:SetModule", "Cannot call SwigMem");
  /* Under normal circumstances, swigMem is an empty matrix */
  /* but is not required to be for a valid call to SWIG_Matlab_SetModule() */
  if (mxGetNumberOfElements(mem) == 0) {
    mxDestroyArray(mem);
    mem = mxCreateStructMatrix(1,1,1,fields);
    if(!mem) SWIG_Matlab_ErrorId("SWIG:SetModule","mxCreateStructMatrix failed");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) SWIG_Matlab_ErrorId("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetField(mem, 0, fields[0], module);
  } else {
    int nfields = 0;
    int fieldNum = 0;
    /* Add to existing mem if not the same */
    if (!mxIsStruct(mem)) {
      SWIG_Matlab_ErrorId("SWIG:SetModule", "Corrupted memory");
    }
    nfields = mxGetNumberOfFields(mem);
    /* Check if same type table */
    int ii;
    for (ii=0; ii<nfields; ++ii){
      if(strcmp(mxGetFieldNameByNumber(mem, ii), fields[0]) == 0) {
        mxDestroyArray(mem);
        return;
      }
    }
    fieldNum = mxAddField(mem, fields[0]);
    if (fieldNum < 0) SWIG_Matlab_ErrorId("SWIG:SetModule", "Error adding field to SwigMem");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) SWIG_Matlab_ErrorId("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetFieldByNumber(mem, 0, fieldNum, module);
  }
  /* Set variable in SwigMem */
  flag = mexCallMATLAB(0, 0, 1, &mem, "SwigMem");
  mxDestroyArray(mem);
  if (flag) {
    SWIG_Matlab_ErrorId("SWIG:SetModule", "Could not set variable in SwigMem.\n");
  }
  saved_swig_module = pointer;
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

/* Convert Matlab arguments to a type description
 *
 * You must call SWIG_Python_str_DelForPy3() on the result after usage
*/
SWIGRUNTIME const char*
SWIG_Matlab_ArgsTypeDesc(int argc, mxArray *argv[]) {
  mxArray* mem = 0;
  const char* type_name = 0;
  int flag = mexCallMATLAB(1, &mem, argc, argv, "SwigType");
  if (!flag && mxIsChar(mem)) type_name = mxArrayToString(mem);
  return type_name;
}

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Matlab proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_MATLAB_HEADER_
#define SWIG_DIRECTOR_MATLAB_HEADER_

#include <string>
#include <sstream>
#include <iostream>
#include <exception>
#include <vector>
#include <map>

/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

extern "C" {
  struct swig_type_info;

  mxArray *mxCreateSharedDataCopy(const mxArray *mx);
  //mxArray *mxCreateReference(const mxArray *mx);

struct mxArray_Tag_Partial {
    void *name_or_CrossLinkReverse;
    mxClassID ClassID;
    int VariableType;
    mxArray *CrossLink;
    size_t ndim;
    unsigned int RefCount; /* Number of sub-elements identical to this one */
};

mxArray *mxCreateReference(const mxArray *mx)
{
    struct mxArray_Tag_Partial *my = (struct mxArray_Tag_Partial *) mx;
    ++my->RefCount;
    return (mxArray *) mx;
}
}



namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(const char *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(const char *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise("SWIG:DirectorRuntimeError", msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(const char *error, const char *msg)
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException("SWIG:DirectorRuntimeError", "SWIG director type mismatch", msg) {
    }

    static void raise(const char *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException("SWIG:DirectorRuntimeError", "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException("SWIG:DirectorRuntimeError", "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };



# define SWIG_GUARD(mutex)


  /* director base class */
  class Director {
  private:
    /* reference counter */
    mutable int swig_refcount;

    /* flag indicating whether the object is owned by matlab or c++ */
    mutable bool swig_disown_flag;

    /* Name of field in MATLAB */
    std::string fieldname() const {
      std::stringstream ss;
      ss << "x" << this;
      return ss.str();
    }

    /* decrement the reference count of the wrapped matlab object */
    void swig_decref() {
      if (swig_disown_flag) {
        //mexPrintf("decref to %d\n", swig_refcount-1);

        if (--swig_refcount==0) {
          // Delete MATLAB storage
          std::string fname = fieldname();
          mxArray* field = mxCreateString(fname.c_str());
          mxArray* empty = mxCreateDoubleMatrix(0, 0, mxREAL);
          mxArray* rhs[2] = {field, empty};
          int error = SWIG_Matlab_CallInterp(0, 0, 2, rhs, "SwigStorage");
          mxDestroyArray(field);
          mxDestroyArray(empty);
          if (error) {
            SWIG_Matlab_ErrorId("SWIG:Director:swig_decref", "Cannot call SwigStorage");
          }
        }
      }
    }

  public:
    /* Constructor */
    Director(mxArray *self) : swig_refcount(0), swig_disown_flag(false) {
      // Save MATLAB in SwigStorage
      std::string fname = fieldname();
      mxArray* field = mxCreateString(fname.c_str());
      mxArray* rhs[2] = {field, self};
      int error = SWIG_Matlab_CallInterp(0, 0, 2, rhs, "SwigStorage");
      mxDestroyArray(field);
      if (error) {
        SWIG_Matlab_ErrorId("SWIG:Director:Director", "Cannot call SwigStorage");
      }
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      //mexPrintf("Calling destructor\n");
      swig_decref();
    }

    /* return a pointer to the wrapped object */
    mxArray *swig_get_self() const {
      // Save MATLAB in SwigStorage
      std::string fname = fieldname();
      mxArray* field = mxCreateString(fname.c_str());
      mxArray* swig_self = 0;
      int error = SWIG_Matlab_CallInterp(1, &swig_self, 1, &field, "SwigStorage");
      mxDestroyArray(field);
      if (error) {
        SWIG_Matlab_ErrorId("SWIG:Director:Director", "Cannot call SwigStorage");
      }
      return swig_self;
    }

    /* acquire ownership of the wrapped object */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped object */
    void swig_incref() const {
      if (swig_disown_flag) {
        swig_refcount++;
        //mexPrintf("incref to %d\n", swig_refcount);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

  };

}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AnySlice swig_types[0]
#define SWIGTYPE_p_AuxOut swig_types[1]
#define SWIGTYPE_p_OptiSpline swig_types[2]
#define SWIGTYPE_p_OptiSplineAdvanced swig_types[3]
#define SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t swig_types[4]
#define SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t swig_types[5]
#define SWIGTYPE_p_OptiSplineSol swig_types[6]
#define SWIGTYPE_p_Parameter swig_types[7]
#define SWIGTYPE_p_TensorBasis swig_types[8]
#define SWIGTYPE_p_TensorT_casadi__MX_t swig_types[9]
#define SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t swig_types[10]
#define SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t swig_types[11]
#define SWIGTYPE_p_allocator_type swig_types[12]
#define SWIGTYPE_p_casadi__Callback swig_types[13]
#define SWIGTYPE_p_casadi__DaeBuilder swig_types[14]
#define SWIGTYPE_p_casadi__Function swig_types[15]
#define SWIGTYPE_p_casadi__GenericType swig_types[16]
#define SWIGTYPE_p_casadi__Importer swig_types[17]
#define SWIGTYPE_p_casadi__Linsol swig_types[18]
#define SWIGTYPE_p_casadi__MX swig_types[19]
#define SWIGTYPE_p_casadi__MatrixT_casadi__SXElem_t swig_types[20]
#define SWIGTYPE_p_casadi__MatrixT_double_t swig_types[21]
#define SWIGTYPE_p_casadi__MatrixT_int_t swig_types[22]
#define SWIGTYPE_p_casadi__NlpBuilder swig_types[23]
#define SWIGTYPE_p_casadi__Opti swig_types[24]
#define SWIGTYPE_p_casadi__OptiAdvanced swig_types[25]
#define SWIGTYPE_p_casadi__OptiSol swig_types[26]
#define SWIGTYPE_p_casadi__PrintableCommon swig_types[27]
#define SWIGTYPE_p_casadi__SharedObject swig_types[28]
#define SWIGTYPE_p_casadi__Slice swig_types[29]
#define SWIGTYPE_p_casadi__Sparsity swig_types[30]
#define SWIGTYPE_p_casadi__Variable swig_types[31]
#define SWIGTYPE_p_casadi__WeakRef swig_types[32]
#define SWIGTYPE_p_casadi__XmlFile swig_types[33]
#define SWIGTYPE_p_char swig_types[34]
#define SWIGTYPE_p_const_reference swig_types[35]
#define SWIGTYPE_p_difference_type swig_types[36]
#define SWIGTYPE_p_first_type swig_types[37]
#define SWIGTYPE_p_int swig_types[38]
#define SWIGTYPE_p_key_type swig_types[39]
#define SWIGTYPE_p_mapped_type swig_types[40]
#define SWIGTYPE_p_reference swig_types[41]
#define SWIGTYPE_p_second_type swig_types[42]
#define SWIGTYPE_p_size_type swig_types[43]
#define SWIGTYPE_p_spline__Argument swig_types[44]
#define SWIGTYPE_p_spline__BSplineBasis swig_types[45]
#define SWIGTYPE_p_spline__Basis swig_types[46]
#define SWIGTYPE_p_spline__Coefficient swig_types[47]
#define SWIGTYPE_p_spline__Domain swig_types[48]
#define SWIGTYPE_p_spline__Function swig_types[49]
#define SWIGTYPE_p_spline__Interval swig_types[50]
#define SWIGTYPE_p_spline__MonomialBasis swig_types[51]
#define SWIGTYPE_p_spline__Parameter swig_types[52]
#define SWIGTYPE_p_spline__Polynomial swig_types[53]
#define SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t swig_types[54]
#define SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t swig_types[55]
#define SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t swig_types[56]
#define SWIGTYPE_p_spline__PrintableObjectT_spline__SharedObject_t swig_types[57]
#define SWIGTYPE_p_spline__SharedObject swig_types[58]
#define SWIGTYPE_p_spline__TensorBasis swig_types[59]
#define SWIGTYPE_p_spline__TensorDomain swig_types[60]
#define SWIGTYPE_p_spline__UnivariateBasis swig_types[61]
#define SWIGTYPE_p_std__initializer_listT_casadi__MX_t swig_types[62]
#define SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t swig_types[63]
#define SWIGTYPE_p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t swig_types[64]
#define SWIGTYPE_p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t swig_types[65]
#define SWIGTYPE_p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t swig_types[66]
#define SWIGTYPE_p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t swig_types[67]
#define SWIGTYPE_p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t swig_types[68]
#define SWIGTYPE_p_std__string swig_types[69]
#define SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t swig_types[73]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t swig_types[75]
#define SWIGTYPE_p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t swig_types[76]
#define SWIGTYPE_p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t swig_types[77]
#define SWIGTYPE_p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t swig_types[78]
#define SWIGTYPE_p_swig__MatlabSwigIterator swig_types[79]
#define SWIGTYPE_p_value_type swig_types[80]
static swig_type_info *swig_types[82];
static swig_module_info swig_module = {swig_types, 81, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct MatlabSwigIterator {
  private:
    mxArray* _seq;

  protected:
    MatlabSwigIterator(mxArray* seq) : _seq(seq)
    {
      (void)_seq;
    }
      
  public:
    virtual ~MatlabSwigIterator() {}

    virtual mxArray* value() const = 0;

    virtual MatlabSwigIterator *incr(size_t n = 1) = 0;

    virtual MatlabSwigIterator *decr(size_t n = 1)
    {
      throw stop_iteration();
    }

    virtual ptrdiff_t distance(const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    virtual MatlabSwigIterator *copy() const = 0;

    mxArray* next()
    {
      mxArray* obj = value();
      incr();
      return obj;
    }

    mxArray* previous()
    {
      decr();
      return value();
    }

    MatlabSwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const MatlabSwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const MatlabSwigIterator& x) const
    {
      return ! operator==(x);
    }

    MatlabSwigIterator* operator ++ () {
      incr();
      return this;
    }

    MatlabSwigIterator* operator -- () {
      decr();
      return this;
    }
      
    MatlabSwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    MatlabSwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const MatlabSwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::MatlabSwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (mxArray* pm, unsigned long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long (mxArray* pm, unsigned long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_size_t (mxArray* obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_long_SS_long    (long long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE mxArray*
  SWIG_From_bool  (bool value)
{
  return mxCreateLogicalScalar(value);
}


  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_long_SS_long (mxArray* pm, long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (mxArray* obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <tensor.hpp>
#include <src/SharedObject/SharedObject.h>
#include <src/SharedObject/SharedObjectNode.h>

#include <src/Basis/Basis.h>
#include <src/Basis/UnivariateBasis.h>
#include <src/Basis/MonomialBasis.h>
#include <src/Basis/BSplineBasis.h>
#include <src/Basis/TensorBasis.h>
#include <src/Basis/UnivariateBasis.h>
#include <src/Basis/MonomialBasis.h>
#include <src/Basis/BSplineBasis.h>
#include <src/Basis/utils/vectorUtilities.h> // Debug

#include <src/Coefficients/Coefficient.h>

#include <src/Domain/Interval.h>
#include <src/Domain/Domain.h>
#include <src/Domain/TensorDomain.h>

#include <src/Function/FunctionNode.h>
#include <src/Function/Function.h>
#include <src/Function/Polynomial.h>
#include <src/Function/Parameter.h>
#include <src/Function/Argument.h>
#include <src/Function/NumericIndex.h>
#include <src/Optistack/optistack.h>

using namespace spline;
#include <casadi/casadi.hpp>


#include <algorithm>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
// Traits that provides the from method
  template <class Type> struct traits_from_ptr {
    static mxArray* from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static mxArray* from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static mxArray* from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static mxArray* from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline mxArray* from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline mxArray* from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

    // Traits that provides the asval/as/check method
  template <class Type>
  struct traits_asptr {   
    static int asptr(mxArray* pm, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(pm, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(mxArray* pm, Type **vptr) {
    return traits_asptr<Type>::asptr(pm, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(mxArray* pm, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(pm, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(mxArray* pm, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(pm,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(mxArray* pm, Type *val) {
    return traits_asval<Type>::asval(pm, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type v;
      int res = asval(pm, &v);
      if (mxGetClassID(pm) == mxUNKNOWN_CLASS || !SWIG_IsOK(res)) {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
        memset(static_cast<void *>(v_def),0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(mxArray* pm, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(pm, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(mxArray* obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(mxArray* obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(mxArray* obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {













}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }

    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class MatlabSwigIterator_T :  public MatlabSwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef MatlabSwigIterator_T<out_iterator> self_type;

    MatlabSwigIterator_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef mxArray* result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorOpen_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;
    typedef MatlabSwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorOpen_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    mxArray* value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorClosed_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;    
    typedef MatlabSwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    mxArray* value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
    struct MatlabSequence_Ref // * matlab can't support these, because of how assignment works
  {
    MatlabSequence_Ref(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    operator T () const
    {
      //      swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, _index);
      mxArray* item; // * todo
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Matlab_AddErrorMsg(msg);
	SWIG_Matlab_AddErrorMsg(e.what());
	throw;
      }
    }

    MatlabSequence_Ref& operator=(const T& v)
    {
      //      MatlabSequence_SetItem(_seq, _index, swig::from<T>(v));
      // * todo
      return *this;
    }

  private:
    mxArray* _seq;
    int _index;
  };

  template <class T>
  struct MatlabSequence_ArrowProxy
  {
    MatlabSequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct MatlabSequence_InputIterator
  {
    typedef MatlabSequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    MatlabSequence_InputIterator()
    {
    }

    MatlabSequence_InputIterator(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    MatlabSequence_ArrowProxy<T>
    operator->() const {
      return MatlabSequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    mxArray* _seq;
    difference_type _index;
  };

  template <class T>
  struct MatlabSequence_Cont
  {
    typedef MatlabSequence_Ref<T> reference;
    typedef const MatlabSequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef MatlabSequence_InputIterator<T, reference> iterator;
    typedef MatlabSequence_InputIterator<T, const_reference> const_iterator;

    MatlabSequence_Cont(mxArray* const seq) : _seq(seq)
    {
      // * assert that we have map type etc.
      /*
      if (!MatlabSequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
      */
    }

    ~MatlabSequence_Cont()
    {
    }

    size_type size() const
    {
      //      return static_cast<size_type>(MatlabSequence_Size(_seq));
      return 0; // * todo
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	//	swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, i);
	mxArray* item; // * todo
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    mxArray* _seq;
  };

}


  namespace casadi {

    void interpret_NumericIndex(spline::NumericIndex& a) {
      
        a--;
      
    }
    void interpret_NumericIndex(std::vector<spline::NumericIndex>& a) {
      
        for (auto& e: a) e--;
      
    }

    bool to_ptr(mxArray *p, AnyScalar** m);
    bool to_ptr(mxArray *p, std::vector<AnyScalar>** m);
    bool to_ptr(mxArray *p, AnyTensor** m);
    bool to_ptr(mxArray *p, AnyVector** m);
    bool to_ptr(mxArray *p, AnySlice** m);
    bool to_ptr(mxArray *p, DT** m);
    bool to_ptr(mxArray *p, ST** m);
    bool to_ptr(mxArray *p, MT** m);
    bool to_ptr(mxArray *p, spline::Argument** m);
    bool to_ptr(mxArray *p, std::vector<spline::Argument>** m);
    bool to_ptr(mxArray *p, spline::TensorBasis** m);
    bool to_ptr(mxArray *p, spline::Basis** m);

    bool to_ptr(mxArray *p, spline::TensorDomain** m);
    bool to_ptr(mxArray *p, spline::Domain** m);
    bool to_ptr(mxArray *p, spline::Interval** m);

    bool to_ptr(mxArray *p, spline::Coefficient** m);
    bool to_ptr(mxArray *p, spline::Function** m);
    bool to_ptr(mxArray *p, spline::Parameter** m);

    mxArray * from_ptr(const std::vector<AnyScalar>* a);
    mxArray * from_ptr(const AnyScalar *a);
    mxArray * from_ptr(const AnyTensor *a);
    mxArray * from_ptr(const AnyVector *a);
    mxArray * from_ptr(const AnySlice *a);

    mxArray * from_ptr(const spline::TensorBasis *a);
    mxArray * from_ptr(const spline::Basis *a);

    mxArray * from_ptr(const spline::TensorDomain *a);
    mxArray * from_ptr(const spline::Domain *a);
    mxArray * from_ptr(const spline::Interval *a);

    mxArray * from_ptr(const spline::Coefficient *a);
    mxArray * from_ptr(const spline::Function *a);
    mxArray *from_ptr(const DT *a);
    mxArray *from_ptr(const ST *a);
    mxArray *from_ptr(const MT *a);
    mxArray *from_ptr(const spline::Argument *a);
  }


  namespace casadi {
    /* Check if Null or None */
    bool is_null(mxArray *p);

    /* Typemaps from CasADi types to types in the interfaced language:
     *
     * to_ptr: Converts a pointer in interfaced language to C++:
     *   Input: GUESTOBJECT pointer p
     *   Output: Pointer to pointer: At input, pointer to pointer to temporary
     *   The routine will either:
     *     - Do nothing, if 0
     *     - Change the pointer
     *     - Change the temporary object
     *   Returns true upon success, else false
     *
     * from_ptr: Converts result from CasADi to interfaced language
     */

    // Basic types
    bool to_ptr(mxArray *p, bool** m);
    mxArray* from_ptr(const bool *a);
    bool to_ptr(mxArray *p, int** m);
    mxArray* from_ptr(const int *a);
    bool to_ptr(mxArray *p, double** m);
    mxArray* from_ptr(const double *a);
    bool to_ptr(mxArray *p, std::string** m);
    mxArray* from_ptr(const std::string *a);

    // std::vector

    bool to_ptr(mxArray *p, std::vector<double> **m);
    mxArray* from_ptr(const std::vector<double> *a);
    bool to_ptr(mxArray *p, std::vector<int>** m);
    mxArray* from_ptr(const std::vector<int> *a);
    bool to_ptr(mxArray *p, std::vector<std::string>** m);
    mxArray* from_ptr(const std::vector<std::string> *a);

    template<typename M> bool to_ptr(mxArray *p, std::vector<M>** m);
    template<typename M> mxArray* from_ptr(const std::vector<M> *a);

    // std::pair

    bool to_ptr(mxArray *p, std::pair<int, int>** m);
    mxArray* from_ptr(const std::pair<int, int>* a);

    template<typename M1, typename M2> bool to_ptr(mxArray *p, std::pair<M1, M2>** m);
    template<typename M1, typename M2> mxArray* from_ptr(const std::pair<M1, M2>* a);

    // std::map
    template<typename M> bool to_ptr(mxArray *p, std::map<std::string, M>** m);
    template<typename M> mxArray* from_ptr(const std::map<std::string, M> *a);

    // Slice
    bool to_ptr(mxArray *p, casadi::Slice** m);
    mxArray* from_ptr(const casadi::Slice *a);

    // Sparsity
    bool to_ptr(mxArray *p, casadi::Sparsity** m);
    mxArray* from_ptr(const casadi::Sparsity *a);

    // Matrix<>
    bool to_ptr(mxArray *p, casadi::DM** m);
    mxArray* from_ptr(const casadi::DM *a);
    bool to_ptr(mxArray *p, casadi::IM** m);
    mxArray* from_ptr(const casadi::IM *a);
    bool to_ptr(mxArray *p, casadi::SX** m);
    mxArray* from_ptr(const casadi::SX *a);

    // MX
    bool to_ptr(mxArray *p, casadi::MX** m);
    mxArray* from_ptr(const casadi::MX *a);

    // Function
    bool to_ptr(mxArray *p, casadi::Function** m);
    mxArray* from_ptr(const casadi::Function *a);

    // SXElem
    bool to_ptr(mxArray *p, casadi::SXElem** m);
    mxArray* from_ptr(const casadi::SXElem *a);

    // GenericType
    bool to_ptr(mxArray *p, casadi::GenericType** m);
    mxArray* from_ptr(const casadi::GenericType *a);

    // Same as to_ptr, but with pointer instead of pointer to pointer
    template<typename M> bool to_val(mxArray *p, M* m);

    // Check if conversion is possible
    template<typename M> bool can_convert(mxArray *p) { return to_ptr(p, static_cast<M**>(0));}

    // Same as the above, but with reference instead of pointer
    template<typename M> mxArray* from_ref(const M& m) { return from_ptr(&m);}

    // Specialization for std::vectors of booleans
    mxArray* from_ref(std::vector<bool>::const_reference m) {
      bool tmp = m;
      return from_ptr(&tmp);
    }

    // Same as the above, but with a temporary object
    template<typename M> mxArray* from_tmp(M m) { return from_ptr(&m);}

    // Get sparsity pattern
    Sparsity get_sparsity(const mxArray* p);

    // Number of nonzeros
    size_t getNNZ(const mxArray* p);



    mxArray* full(const IM& m) {







      mxArray *p  = mxCreateDoubleMatrix(m.size1(), m.size2(), mxREAL);
      std::vector<double> nz = m.get_nonzeros<double>();
      double* d = static_cast<double*>(mxGetData(p));
      if (!nz.empty()) casadi_densify(&nz[0], m.sparsity(), d, false); // Column-major
      return p;



    }


    // Convert to a sparse matrix
    mxArray* sparse(const IM& m) {







      mxArray *p  = mxCreateSparse(m.size1(), m.size2(), m.nnz(), mxREAL);
      std::vector<double> nz = m.get_nonzeros<double>();
      if (!nz.empty()) casadi::casadi_copy(&nz[0], m.nnz(), static_cast<double*>(mxGetData(p)));
      std::copy(m.colind(), m.colind()+m.size2()+1, mxGetJc(p));
      std::copy(m.row(), m.row()+m.nnz(), mxGetIr(p));
      return p;




    }




    mxArray* full(const DM& m, bool simplify=false) {









      mxArray *p  = mxCreateDoubleMatrix(m.size1(), m.size2(), mxREAL);
      double* d = static_cast<double*>(mxGetData(p));
      casadi_densify(m.ptr(), m.sparsity(), d, false); // Column-major
      return p;



    }


    // Convert to a sparse matrix
    mxArray* sparse(const DM& m) {







      mxArray *p  = mxCreateSparse(m.size1(), m.size2(), m.nnz(), mxREAL);
      casadi::casadi_copy(m.ptr(), m.nnz(), static_cast<double*>(mxGetData(p)));
      std::copy(m.colind(), m.colind()+m.size2()+1, mxGetJc(p));
      std::copy(m.row(), m.row()+m.nnz(), mxGetIr(p));
      return p;




    }

    mxArray* full_or_sparse(const DM& m, bool simplify=false) {
      if (m.is_dense()) {
        return full(m, simplify);
      } else {
        mxArray* p = sparse(m);
        if (is_null(p)) return from_ptr(&m);
        return p;
      }
    }





















































































































  } // namespace CasADi
 

  namespace casadi {
    template<typename M> bool to_val(mxArray *p, M* m) {
      // Copy the pointer
      M *m2 = m;
      bool ret = to_ptr(p, m ? &m2 : 0);
      // If pointer changed, copy the object
      if (m!=m2) *m=*m2;
      return ret;
    }

    // Same as to_ptr, but with GenericType
    template<typename M> bool to_generic(mxArray *p, GenericType** m) {
      if (m) {
        // Temporary
        M tmp, *tmp_ptr=&tmp;
        bool ret = to_ptr(p, &tmp_ptr);
        if (!ret) return ret;
        **m = GenericType(*tmp_ptr);
        return ret;
      } else {
        return to_ptr(p, static_cast<M**>(0));
      }
    }

    // Check if int
    template<typename T> struct is_int {
      static inline bool check() {return false;}
    };

    template<> struct is_int<int> {
      static inline bool check() {return true;}
    };

    bool is_null(mxArray *p) {




      if (p == 0) return true;

      return false;
    }


    Sparsity get_sparsity(const mxArray* p) {
      // Get sparsity pattern
      size_t nrow = mxGetM(p);
      size_t ncol = mxGetN(p);

      if (mxIsSparse(p)) {
        // Sparse storage in MATLAB
        mwIndex *Jc = mxGetJc(p);
        mwIndex *Ir = mxGetIr(p);

        // Store in vectors
        std::vector<int> colind(ncol+1);
        std::copy(Jc, Jc+colind.size(), colind.begin());
        std::vector<int> row(colind.back());
        std::copy(Ir, Ir+row.size(), row.begin());

        // Create pattern and return
        return Sparsity(nrow, ncol, colind, row);
      } else {
        return Sparsity::dense(nrow, ncol);
      }
    }

    size_t getNNZ(const mxArray* p) {
      // Dimensions
      size_t nrow = mxGetM(p);
      size_t ncol = mxGetN(p);
      if (mxIsSparse(p)) {
        // Sparse storage in MATLAB
        mwIndex *Jc = mxGetJc(p);
        return Jc[ncol];
      } else {
        return nrow*ncol;
      }
    }

  } // namespace casadi
 

  namespace casadi {
    bool to_ptr(mxArray *p, spline::Basis** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Basis, 0))) {
        return true;
      }
      return false;
    }
    bool to_ptr(mxArray *p, spline::TensorBasis** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__TensorBasis, 0))) {
        return true;
      }
      {
        std::vector<Basis> tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }
      {
        Basis tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }
      return false;
    }

    bool to_ptr(mxArray *p, spline::Interval** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Interval, 0))) {
        return true;
      }
      {
        std::vector<AnyScalar> tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt) && (*mt).size()==2) {
          if (m) **m = tmp;
          return true;
        }
      }
      return false;
    }
    bool to_ptr(mxArray *p, spline::Domain** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Domain, 0))) {
        return true;
      }
      {
        Interval tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = tmp;
          return true;
        }
      }
      return false;
    }
    bool to_ptr(mxArray *p, spline::TensorDomain** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__TensorDomain, 0))) {
        return true;
      }

      {
        std::vector<Domain> tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }
      {
        Domain tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      return false;
    }

    bool to_ptr(mxArray *p, spline::Coefficient** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Coefficient, 0))) {
        return true;
      }

      {
        AnyTensor tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      return false;
    }
    bool to_ptr(mxArray *p, AnyScalar** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Double scalar
      {
        double tmp;
        if (to_val(p, &tmp)) {
          if (m) **m=tmp;
          return true;
        }
      }

      // Integer scalar
      {
        int tmp;
        if (to_val(p, &tmp)) {
          if (m) **m=tmp;
          return true;
        }
      }

      // Try first converting to a temporary SX
      {
        SX tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt) && (*mt).is_scalar()) {
          if (m) **m = *mt;
          return true;
        }
      }

      // Try first converting to a temporary MX
      {
        MX tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt) && (*mt).is_scalar()) {
          if (m) **m = *mt;
          return true;
        }
      }
      return false;
    }

    bool to_ptr(mxArray *p, std::vector<AnyScalar>** m) {
      {
        std::vector<double> tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = AnyScalar::from_vector(*mt);
          return true;
        }
      }
      {
        std::vector<SX> tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt)) {
            for (auto& e : *mt) {
              if (!e.is_scalar()) return false;
            }
            if (m) **m = AnyScalar::from_vector(*mt);
          return true;
        }
      }
      {
        std::vector<MX> tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt)) {
          for (auto& e : *mt) {
            if (!e.is_scalar()) return false;
          }
          if (m) **m = AnyScalar::from_vector(*mt);
          return true;
        }
      }
      return false;
    }
    








































    bool to_ptr(mxArray *p, DT** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0))) {
        return true;
      }

      
      if (mxIsDouble(p) && !mxIsSparse(p)) {
        if (m) {
          int n_dims = mxGetNumberOfDimensions(p);
          const size_t* p_dim = static_cast<const size_t*>(mxGetDimensions(p));
          std::vector<int> dim(p_dim, p_dim+n_dims);
          double* p_data = static_cast<double*>(mxGetData(p));
          std::vector<double> data(p_data, p_data+product(dim));
          **m = DT(data, dim);
        }
        return true;
      }
      

      




      // Try first converting to a temporary DM
      {
        DM tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      return false;
    }
    bool to_ptr(mxArray *p, ST** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0))) {
        return true;
      }

      // Try first converting to a temporary SX
      {
        SX tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      // Try first converting to a temporary DT
      {
        DT tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      return false;
    }
    bool to_ptr(mxArray *p, MT** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_TensorT_casadi__MX_t, 0))) {
        return true;
      }

      // Try first converting to a temporary MX
      {
        MX tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      // Try first converting to a temporary DT
      {
        DT tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      return false;
    }

    bool to_ptr(mxArray *p, AnyVector** m) {
      {
        DT tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt) && ((*mt).is_vector())) {
          if (m) **m = *mt;
          return true;
        }
      }
      {
        ST tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt) && ((*mt).is_vector())) {
          if (m) **m = *mt;
          return true;
        }
      }

      {
        MT tmp, *mt=&tmp;
        if(casadi::to_ptr(p, &mt) && ((*mt).is_vector())) {
          if (m) **m = *mt;
          return true;
        }
      }
      {
        std::vector<AnyScalar> tmp, *mt = &tmp;
        if (casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = vertcat(*mt);
          return true;
        }
      }
      return false;
    }

    bool to_ptr(mxArray *p, AnyTensor** m) {
      {
        DT tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }
      {
        ST tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }

      {
        MT tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m) **m = *mt;
          return true;
        }
      }
      return false;
    }

    bool to_ptr(mxArray *p, AnySlice** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_AnySlice, 0))) {
        return true;
      }
      // Integer
      {
        NumericIndex tmp;
        if (to_val(p, &tmp)) {
          if (m) {
            interpret_NumericIndex(tmp);
            **m = AnySlice(tmp);
          }
          return true;
        }
      }
      // Integer vector
      {
        std::vector<NumericIndex> tmp;
        if (to_val(p, &tmp)) {
          if (m) {
            interpret_NumericIndex(tmp);
            **m = AnySlice(tmp);
          }
          return true;
        }
      }

















      // string
      {
        std::string tmp;
        if (to_val(p, &tmp)) {
          if (tmp!=":") return false;
          if (m) **m = AnySlice();
          return true;
        }
      }
      return false;
    }
    bool to_ptr(mxArray *p, std::vector<spline::Argument>** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t, 0))) {
        return true;
      }
      {
        std::vector<int> tmp;
        if (to_val(p, &tmp)) {

          for (int i=0;i<tmp.size();++i) tmp[i]-=1;

          if (m) **m = Argument::from_vector(tmp);
          return true;
        }
      }
      {
        std::vector<std::string> tmp;
        if (to_val(p, &tmp)) {
          if (m) **m = Argument::from_vector(tmp);
          return true;
        }
      }
      {
        std::vector<spline::Parameter> tmp;
        if (to_val(p, &tmp)) {
          if (m) **m = Argument::from_vector(tmp);
          return true;
        }
      }
    }

    bool to_ptr(mxArray *p, spline::Argument** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Argument, 0))) {
        return true;
      }
      // String scalar
      {
        std::string tmp;
        if (to_val(p, &tmp)) {
          if (m) **m=tmp;
          return true;
        }
      }
      // Integer scalar
      {
        int tmp;
        if (to_val(p, &tmp)) {

          if (m) **m=tmp-1;



          return true;
        }
      }
      // Parameter
      {
        spline::Parameter tmp;
        if (to_val(p, &tmp)) {
          if (m) **m=tmp;
          return true;
        }
      }
      return false;
    }
    bool to_ptr(mxArray *p, spline::Parameter** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Parameter, 0))) {
        return true;
      }
      return false;
    }
    bool to_ptr(mxArray *p, spline::Function** m) {
      // Treat Null
      if (is_null(p)) return false;

      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_spline__Function, 0))) {
        return true;
      }

      {
        AnyTensor tmp;
        if (to_val(p, &tmp)) {
          if (m) **m=tmp;
          return true;
        }
      }

      return false;
      }

    mxArray * from_ptr(const AnyScalar *a) {
      if (a->is_double()) return from_ref(static_cast<double>(*a));
      if (a->is_SX()) return from_ref(static_cast<SX>(*a));
      if (a->is_MX()) return from_ref(static_cast<MX>(*a));



      return 0;
    }

    mxArray * from_ptr(const std::vector<AnyScalar> *a) {
      if (AnyScalar::is_double(*a)) return from_ref(AnyScalar::as_double(*a));
      if (AnyScalar::is_SX(*a)) return from_ref(AnyScalar::as_SX(*a));
      if (AnyScalar::is_MX(*a)) return from_ref(AnyScalar::as_MX(*a));



      return 0;
    }

    mxArray * from_ptr(const spline::Argument *a) {



      return 0;
    }

    mxArray * from_ptr(const AnySlice *a) {



      return 0;
    }

    mxArray * from_ptr(const AnyVector *a) {
      return from_ptr(static_cast<const AnyTensor*>(a));
    }

    mxArray * from_ptr(const AnyTensor *a) {
      if (a->is_DT()) {
        DT temp = static_cast<DT>(*a);

        int n_dim = temp.n_dims();
        if (n_dim==0) return mxCreateDoubleScalar(static_cast<double>(temp.data()));
        std::vector<size_t> dim(n_dim);
        std::vector<int> dims = temp.dims();
        std::copy(dims.begin(), dims.end(), dim.begin());
        mxArray *p  = mxCreateNumericArray(n_dim, get_ptr(dim), mxDOUBLE_CLASS, mxREAL);
        spline_assert(p);
        double* d = static_cast<double*>(mxGetData(p));
        std::vector<double> nz = temp.data().nonzeros();
        std::copy(nz.begin(), nz.end(), d);
        return p;





        return from_ref(temp);
      }
      if (a->is_ST()) {
        ST temp = static_cast<ST>(*a);
        if (temp.n_dims()<=2) {
          SX r = temp.matrix();
          return from_ref(r);
        }
        return from_ref(temp);
      }
      if (a->is_MT()) {
        MT temp = static_cast<MT>(*a);
        if (temp.n_dims()<=2) {
          MX r = temp.matrix();
          return from_ref(r);
        }
        return from_ref(temp);
      }



      return 0;
    }
    
    mxArray* from_ptr(const DT *a) {
      return SWIG_NewPointerObj(new DT(*a), SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, SWIG_POINTER_OWN);
    }

    mxArray* from_ptr(const ST *a) {
      return SWIG_NewPointerObj(new ST(*a), SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, SWIG_POINTER_OWN);
    }

    mxArray* from_ptr(const MT *a) {
      return SWIG_NewPointerObj(new MT(*a), SWIGTYPE_p_TensorT_casadi__MX_t, SWIG_POINTER_OWN);
    }
    mxArray* from_ptr(const spline::Coefficient *a) {
      return SWIG_NewPointerObj(new spline::Coefficient(*a), SWIGTYPE_p_spline__Coefficient, SWIG_POINTER_OWN);
    }
    mxArray* from_ptr(const spline::Function *a) {
      return SWIG_NewPointerObj(new spline::Function(*a), SWIGTYPE_p_spline__Function, SWIG_POINTER_OWN);
    }
    mxArray* from_ptr(const spline::Parameter *a) {
      return SWIG_NewPointerObj(new spline::Parameter(*a), SWIGTYPE_p_spline__Parameter, SWIG_POINTER_OWN);
    }

    mxArray* from_ptr(const spline::Basis *a) {
      if (dynamic_cast<const spline::MonomialBasisNode*>(a->get())) {;
        const spline::MonomialBasisNode * b = dynamic_cast<const spline::MonomialBasisNode*>(a->get());
        return SWIG_NewPointerObj(new spline::MonomialBasis(b->shared_from_this<spline::MonomialBasis>()), SWIGTYPE_p_spline__MonomialBasis, SWIG_POINTER_OWN);
      } else if (dynamic_cast<const spline::BSplineBasisNode*>(a->get())) {
        const spline::BSplineBasisNode * b = dynamic_cast<const spline::BSplineBasisNode*>(a->get());
        return SWIG_NewPointerObj(new spline::BSplineBasis(b->shared_from_this<spline::BSplineBasis>()), SWIGTYPE_p_spline__BSplineBasis, SWIG_POINTER_OWN);
      } else {
        return SWIG_NewPointerObj(new spline::Basis(*a), SWIGTYPE_p_spline__Basis, SWIG_POINTER_OWN);
      }
    }
    mxArray* from_ptr(const spline::TensorBasis *a) {
      return SWIG_NewPointerObj(new spline::TensorBasis(*a), SWIGTYPE_p_spline__TensorBasis, SWIG_POINTER_OWN);
    }

    mxArray* from_ptr(const spline::Domain *a) {
      if (dynamic_cast<const spline::IntervalNode*>(a->get())) {;
        const spline::IntervalNode * b = dynamic_cast<const spline::IntervalNode*>(a->get());
        return SWIG_NewPointerObj(new spline::Interval(b->shared_from_this<spline::Interval>()), SWIGTYPE_p_spline__Interval, SWIG_POINTER_OWN);
      } else {
        return SWIG_NewPointerObj(new spline::Domain(*a), SWIGTYPE_p_spline__Domain, SWIG_POINTER_OWN);
      }
    }
    mxArray* from_ptr(const spline::TensorDomain *a) {
      return SWIG_NewPointerObj(new spline::TensorDomain(*a), SWIGTYPE_p_spline__TensorDomain, SWIG_POINTER_OWN);
    }


  } // namespace casadi
 

SWIGINTERN int
SWIG_AsVal_bool (mxArray* pm, bool *val)
{
   if(!mxIsLogicalScalar(pm)) return SWIG_TypeError;
   if (val) *val = mxIsLogicalScalarTrue(pm);
   return SWIG_OK;
}


  namespace casadi {
    bool to_ptr(mxArray *p, bool** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Standard typemaps
      if (SWIG_IsOK(SWIG_AsVal_bool (p, m ? *m : 0))) return true;


      if (mxIsLogicalScalar(p)) {
        if (m) **m = mxIsLogicalScalarTrue(p);
        return true;
      }


      // No match
      return false;
    }

    mxArray * from_ptr(const bool *a) {



      return mxCreateLogicalScalar(*a);



    }
  } // namespace casadi
 

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  namespace casadi {
    bool to_ptr(mxArray *p, int** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Standard typemaps
      if (SWIG_IsOK(SWIG_AsVal_int (p, m ? *m : 0))) return true;

      // long within int bounds
      {
        long tmp;
        if (SWIG_IsOK(SWIG_AsVal_long (p, &tmp))) {
          // Check if within bounds
          if (tmp>=std::numeric_limits<int>::min() && tmp<=std::numeric_limits<int>::max()) {
            if (m) **m = static_cast<int>(tmp);
            return true;
          }
        }
      }
















      bool tmp;
      if (to_val(p, m? &tmp : 0)) {
        if (m) **m = tmp;
        return true;
      }

      // No match
      return false;
    }

    mxArray * from_ptr(const int *a) {



      return mxCreateDoubleScalar(static_cast<double>(*a));



    }
  } // namespace casadi
 

  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


  namespace casadi {
    bool to_ptr(mxArray *p, double** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Standard typemaps
      if (SWIG_IsOK(SWIG_AsVal_double (p, m ? *m : 0))) return true;
















      int tmp;
      if (to_val(p, m? &tmp: 0)) {
        if (m) **m = tmp;
        return true;
      }

      // No match
      return false;
    }

    mxArray * from_ptr(const double *a) {



      return mxCreateDoubleScalar(*a);



    }
  } // namespace casadi
 

  namespace casadi {



    // Cell array
    template<typename M> bool to_ptr_cell(mxArray *p, std::vector<M>** m) {
      // Cell arrays (only row vectors)
      if (mxGetClassID(p)==mxCELL_CLASS) {
        int nrow = mxGetM(p), ncol = mxGetN(p);
        if (nrow==1 || (nrow==0 && ncol==0) || ncol==1) {
          // Allocate elements
          if (m) {
            (**m).clear();
            (**m).reserve(ncol);
          }

          // Temporary
          M tmp;

          // Loop over elements
          for (int i=0; i<ncol; ++i) {
            // Get element
            mxArray* pe = mxGetCell(p, i);
            if (pe==0) return false;

            // Convert element
            M *m_i = m ? &tmp : 0;
            if (!to_ptr(pe, m_i ? &m_i : 0)) {
              return false;
            }
            if (m) (**m).push_back(*m_i);
          }
          return true;
        }
      }
      return false;
    }

    // MATLAB row/column vector maps to std::vector<double>
    bool to_ptr(mxArray *p, std::vector<double> **m) {
      // Treat Null
      if (is_null(p)) return false;

      if (mxIsDouble(p) && mxGetNumberOfDimensions(p)==2
          && (mxGetM(p)<=1 || mxGetN(p)<=1)) {
        if (m) {
          double* data = static_cast<double*>(mxGetData(p));
          int n = mxGetM(p)*mxGetN(p);
          (**m).resize(n);
          std::copy(data, data+n, (**m).begin());
        }
        return true;
      }

      // Cell array
      if (to_ptr_cell(p, m)) return true;

      // No match
      return false;
    }

    bool to_ptr(mxArray *p, std::vector<int>** m) {
      if (mxIsDouble(p) && mxGetNumberOfDimensions(p)==2
          && (mxGetM(p)<=1 || mxGetN(p)<=1)) {
        double* data = static_cast<double*>(mxGetData(p));
        int n = mxGetM(p)*mxGetN(p);

        // Check if all integers
        bool all_integers=true;
        for (int i=0; all_integers && i<n; ++i) {
          if (data[i]!=static_cast<int>(data[i])) {
            all_integers = false;
            break;
          }
        }

        // Successful conversion
        if (all_integers) {
          if (m) {
            (**m).resize(n);
            std::copy(data, data+n, (**m).begin());
          }
          return true;
        }
      }

      if (mxIsLogical(p) && !mxIsLogicalScalar(p) &&mxGetNumberOfDimensions(p)==2
          && (mxGetM(p)<=1 || mxGetN(p)<=1) ) {
        int n = mxGetM(p)*mxGetN(p);
        mxLogical* data = static_cast<mxLogical*>(mxGetData(p));
        if (m) {
          (**m).resize(n);
          std::copy(data, data+n, (**m).begin());
        }
        return true;
      }

      // Cell array
      if (to_ptr_cell(p, m)) return true;

      return false;
    }


    // MATLAB n-by-m char array mapped to vector of length m
    bool to_ptr(mxArray *p, std::vector<std::string>** m) {
      if (mxIsChar(p)) {
	if (m) {
          // Get data
	  size_t nrow = mxGetM(p);
	  size_t ncol = mxGetN(p);
          mxChar *data = mxGetChars(p);

          // Allocate space for output
          (**m).resize(nrow);
          std::vector<std::string> &m_ref = **m;

          // For all strings
          for (size_t j=0; j!=nrow; ++j) {
            // Get length without trailing spaces
            size_t len = ncol;
            while (len!=0 && data[j + nrow*(len-1)]==' ') --len;

            // Check if null-terminated
            for (size_t i=0; i!=len; ++i) {
              if (data[j + nrow*i]=='\0') {
                len = i;
                break;
              }
            }

            // Create a string of the desired length
            m_ref[j] = std::string(len, ' ');

            // Get string content
            for (size_t i=0; i!=len; ++i) {
              m_ref[j][i] = data[j + nrow*i];
            }
          }
        }
	return true;
      }

      // Cell array
      if (to_ptr_cell(p, m)) return true;

      // No match
      return false;
    }


    template<typename M> bool to_ptr(mxArray *p, std::vector<M>** m) {
      // Treat Null
      if (is_null(p)) return false;













































      // Cell array
      if (to_ptr_cell(p, m)) return true;

      // No match
      return false;
    }


    mxArray* from_ptr(const std::vector<double> *a) {
      mxArray* ret = mxCreateDoubleMatrix(1, a->size(), mxREAL);
      std::copy(a->begin(), a->end(), static_cast<double*>(mxGetData(ret)));
      return ret;
    }
    mxArray* from_ptr(const std::vector<int> *a) {
      mxArray* ret = mxCreateDoubleMatrix(1, a->size(), mxREAL);
      std::copy(a->begin(), a->end(), static_cast<double*>(mxGetData(ret)));
      return ret;
    }
    mxArray* from_ptr(const std::vector<std::string> *a) {
      // Collect arguments as char arrays
      std::vector<const char*> str(a->size());
      for (size_t i=0; i<str.size(); ++i) str[i] = (*a)[i].c_str();

      // std::vector<string> maps to MATLAB char array with multiple columns
      return mxCreateCharMatrixFromStrings(str.size(), str.empty() ? 0 : &str[0]);
    }


    template<typename M> mxArray* from_ptr(const std::vector<M> *a) {














      // std::vector maps to MATLAB cell array
      mxArray* ret = mxCreateCellMatrix(1, a->size());
      if (!ret) return 0;
      for (int k=0; k<a->size(); ++k) {
        mxArray* el = from_ref(a->at(k));
        if (!el) return 0;
        mxSetCell(ret, k, el);
      }
      return ret;



    }
  } // namespace casadi


  namespace casadi {
    bool to_ptr(mxArray *p, Function** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Function already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__Function, 0))) {
        return true;
      }

      // No match
      return false;
    }

    mxArray* from_ptr(const Function *a) {
      return SWIG_NewPointerObj(new Function(*a), SWIGTYPE_p_casadi__Function, SWIG_POINTER_OWN);
    }
  } // namespace casadi


  namespace casadi {
    bool to_ptr(mxArray *p, GenericType** m) {







      // Treat Null
      if (is_null(p)) return false;

      // GenericType already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__GenericType, 0))) {
        return true;
      }

      // Try to convert to different types
      if (to_generic<int>(p, m)
          || to_generic<double>(p, m)
          || to_generic<std::string>(p, m)
          || to_generic<std::vector<int> >(p, m)
          || to_generic<std::vector<double> >(p, m)
          || to_generic<std::vector<bool> >(p, m)
          || to_generic<std::vector<std::string> >(p, m)
          || to_generic<std::vector<std::vector<int> > >(p, m)
          || to_generic<casadi::Function>(p, m)
          || to_generic<casadi::GenericType::Dict>(p, m)) {
        return true;
      }

      // Check if it can be converted to boolean (last as e.g. can be converted to boolean)
      if (to_generic<bool>(p, m)) return true;

      // No match
      return false;
    }

    mxArray * from_ptr(const GenericType *a) {
      switch (a->getType()) {
      case OT_BOOL: return from_tmp(a->as_bool());
      case OT_INT: return from_tmp(a->as_int());
      case OT_DOUBLE: return from_tmp(a->as_double());
      case OT_STRING: return from_tmp(a->as_string());
      case OT_INTVECTOR: return from_tmp(a->as_int_vector());
      case OT_INTVECTORVECTOR: return from_tmp(a->as_int_vector_vector());
      case OT_BOOLVECTOR: return from_tmp(a->as_bool_vector());
      case OT_DOUBLEVECTOR: return from_tmp(a->as_double_vector());
      case OT_STRINGVECTOR: return from_tmp(a->as_string_vector());
      case OT_DICT: return from_tmp(a->as_dict());
      case OT_FUNCTION: return from_tmp(a->as_function());



      default: return 0;
      }
    }
  } // namespace casadi


  namespace casadi {
    bool to_ptr(mxArray *p, std::string** m) {
      // Treat Null
      if (is_null(p)) return false;

      // String already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_std__string, 0))) {
        return true;
      }











      if (mxIsChar(p) && mxGetM(p)==1) {
	if (m) {
	  size_t len=mxGetN(p);
	  std::vector<char> s(len+1);
	  if (mxGetString(p, &s[0], (len+1)*sizeof(char))) return false;
	  **m = std::string(&s[0], len);
        }
	return true;
      }


      // No match
      return false;
    }

    mxArray* from_ptr(const std::string *a) {



      return mxCreateString(a->c_str());



    }
  } // namespace casadi


  namespace casadi {
    bool to_ptr(mxArray *p, Slice** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Slice already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__Slice, 0))) {
        return true;
      }


























      // No match
      return false;
    }

    mxArray* from_ptr(const Slice *a) {
      return SWIG_NewPointerObj(new Slice(*a), SWIGTYPE_p_casadi__Slice, SWIG_POINTER_OWN);
    }

  } // namespace casadi


  namespace casadi {
    template<typename M> bool to_ptr(mxArray *p, std::map<std::string, M>** m) {



















      if (mxIsStruct(p) && mxGetM(p)==1 && mxGetN(p)==1) {
	int len = mxGetNumberOfFields(p);
	for (int k=0; k<len; ++k) {
	  mxArray *value = mxGetFieldByNumber(p, 0, k);
          if (m) {
	    M *v=&(**m)[std::string(mxGetFieldNameByNumber(p, k))], *v2=v;
            if (!casadi::to_ptr(value, &v)) return false;
            if (v!=v2) *v2=*v; // if only pointer changed
	  } else {
            if (!casadi::to_ptr(value, static_cast<M**>(0))) return false;
	  }
	}
        return true;
      }

      return false;
    }

    template<typename M> mxArray* from_ptr(const std::map<std::string, M> *a) {













      // Get vectors of the field names and mxArrays
      std::vector<const char*> fieldnames;
      std::vector<mxArray*> fields;
      for (typename std::map<std::string, M>::const_iterator it=a->begin(); it!=a->end(); ++it) {
	fieldnames.push_back(it->first.c_str());
	mxArray* f = from_ptr(&it->second);
	if (!f) {
	  // Deallocate elements created up to now
	  for (int k=0; k<fields.size(); ++k) mxDestroyArray(fields[k]);
	  return 0;
	}
	fields.push_back(f);
      }

      // Create return object
      mxArray *p = mxCreateStructMatrix(1, 1, fields.size(),
					fieldnames.empty() ? 0 : &fieldnames[0]);
      for (int k=0; k<fields.size(); ++k) mxSetFieldByNumber(p, 0, k, fields[k]);
      return p;



    }
  } // namespace casadi


  namespace casadi {

    bool to_ptr(mxArray *p, std::pair<int, int>** m) {
      // (int,int) mapped to 2-by-1 double matrix
      if (mxIsDouble(p) && mxGetNumberOfDimensions(p)==2 && !mxIsSparse(p)
          && mxGetM(p)==1 && mxGetN(p)==2) {
        double* data = static_cast<double*>(mxGetData(p));
        int first = static_cast<int>(data[0]);
        int second = static_cast<int>(data[1]);
        if (data[0]==first && data[1]==second) {
          if (m) **m = std::make_pair(first, second);
          return true;
        } else {
          return false;
        }
      }

      // No match
      return false;
    }


    template<typename M1, typename M2> bool to_ptr(mxArray *p, std::pair<M1, M2>** m) {








      // Other overloads mapped to 2-by-1 cell array
      if (mxGetClassID(p)==mxCELL_CLASS && mxGetM(p)==1 && mxGetN(p)==2) {
        mxArray *p_first = mxGetCell(p, 0);
        mxArray *p_second = mxGetCell(p, 1);
        return to_val(p_first, m ? &(**m).first : 0)
          && to_val(p_second, m ? &(**m).second : 0);
      }

      // No match
      return false;
    }


    mxArray* from_ptr(const std::pair<int, int>* a) {
      // (int,int) mapped to 2-by-1 double matrix
      mxArray* ret = mxCreateDoubleMatrix(1, 2, mxREAL);
      double* data = static_cast<double*>(mxGetData(ret));
      data[0] = a->first;
      data[1] = a->second;
      return ret;
    }


    template<typename M1, typename M2> mxArray* from_ptr(const std::pair<M1, M2>* a) {






      // Other overloads mapped to 2-by-1 cell array
      mxArray* ret = mxCreateCellMatrix(1, 2);
      mxSetCell(ret, 0, from_ref(a->first));
      mxSetCell(ret, 1, from_ref(a->second));
      return ret;



    }
  } // namespace casadi
 

  namespace casadi {
    bool to_ptr(mxArray *p, SX** m) {
      // Treat Null
      if (is_null(p)) return false;

      // SX already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__MatrixT_casadi__SXElem_t, 0))) {
        return true;
      }

      // Try first converting to a temporary DM
      {
        DM tmp;
        if(to_val(p, m? &tmp: 0)) {
          if (m) **m = tmp;
          return true;
        }
      }














      // No match
      return false;
    }

    mxArray* from_ptr(const SX *a) {
      return SWIG_NewPointerObj(new SX(*a), SWIGTYPE_p_casadi__MatrixT_casadi__SXElem_t, SWIG_POINTER_OWN);
    }
  } // namespace casadi
 

  namespace casadi {
    bool to_ptr(mxArray *p, SXElem** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Try first converting to a temporary SX
      {
        SX tmp, *mt=&tmp;
        if(casadi::to_ptr(p, m ? &mt : 0)) {
          if (m && !mt->is_scalar()) return false;
          if (m) **m = mt->scalar();
          return true;
        }
      }

      // No match
      return false;
    }

    mxArray* from_ptr(const SXElem *a) {
      return from_ref(SX(*a));
    }
  } // namespace casadi
 

  namespace casadi {
    bool to_ptr(mxArray *p, MX** m) {
      // Treat Null
      if (is_null(p)) return false;

      // MX already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__MX, 0))) {
        return true;
      }

      // Try first converting to a temporary DM
      {
        DM tmp;
        if(to_val(p, m ? &tmp : 0)) {
          if (m) **m = tmp;
          return true;
        }
      }











      // No match
      return false;
    }

    mxArray* from_ptr(const MX *a) {
      return SWIG_NewPointerObj(new MX(*a), SWIGTYPE_p_casadi__MX, SWIG_POINTER_OWN);
    }
  } // namespace casadi
 

  namespace casadi {















    bool to_ptr(mxArray *p, DM** m) {
      // Treat Null
      if (is_null(p)) return false;

      // DM already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__MatrixT_double_t, 0))) {
        return true;
      }

      // Object is an IM
      {
        // Pointer to object
        IM *m2;
        if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(&m2),
                                      SWIGTYPE_p_casadi__MatrixT_int_t, 0))) {
          if (m) **m=*m2;
          return true;
        }
      }

      // Object is a sparsity pattern
      {
        Sparsity *m2;
        if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(&m2),
                                      SWIGTYPE_p_casadi__Sparsity, 0))) {
          if (m) **m=DM::ones(*m2);
          return true;
        }
      }

      // Double scalar
      {
        double tmp;
        if (to_val(p, m? &tmp: 0)) {
          if (m) **m=tmp;
          return true;
        }
      }




























      // MATLAB double matrix (sparse or dense)
      if (mxIsDouble(p) && mxGetNumberOfDimensions(p)==2) {
        if (m) {
          **m = casadi::DM(get_sparsity(p));
          double* data = static_cast<double*>(mxGetData(p));
          casadi_copy(data, (*m)->nnz(), (*m)->ptr());
        }
        return true;
      }


      // First convert to IM
      if (can_convert<IM>(p)) {
        IM tmp;
        if (to_val(p, &tmp)) {
          if (m) **m=tmp;
          return true;
        }
      }

      // No match
      return false;
    }

    mxArray* from_ptr(const DM *a) {
      return SWIG_NewPointerObj(new DM(*a), SWIGTYPE_p_casadi__MatrixT_double_t, SWIG_POINTER_OWN);
    }
  } // namespace casadi


  namespace casadi {
    bool to_ptr(mxArray *p, Sparsity** m) {
      // Treat Null
      if (is_null(p)) return false;

      // Sparsity already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__Sparsity, 0))) {
        return true;
      }

      // No match
      return false;
    }

    mxArray* from_ptr(const Sparsity *a) {
      return SWIG_NewPointerObj(new Sparsity(*a), SWIGTYPE_p_casadi__Sparsity, SWIG_POINTER_OWN);
    }
  } // namespace casadi


  namespace casadi {
    bool to_ptr(mxArray *p, IM** m) {
      // Treat Null
      if (is_null(p)) return false;

      // IM already?
      if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(m),
                                    SWIGTYPE_p_casadi__MatrixT_int_t, 0))) {
        return true;
      }

      // Object is a sparsity pattern
      {
        Sparsity *m2;
        if (SWIG_IsOK(SWIG_ConvertPtr(p, reinterpret_cast<void**>(&m2),
                                      SWIGTYPE_p_casadi__Sparsity, 0))) {
          if (m) **m=IM::ones(*m2);
          return true;
        }
      }

      // First convert to integer
      {
        int tmp;
        if (to_val(p, m? &tmp: 0)) {
          if (m) **m=tmp;
          return true;
        }
      }






















      // In MATLAB, it is common to use floating point values to represent integers
      if (mxIsDouble(p) && mxGetNumberOfDimensions(p)==2) {
        double* data = static_cast<double*>(mxGetData(p));

        // Check if all integers
        bool all_integers=true;
        size_t sz = getNNZ(p);
        for (size_t i=0; i<sz; ++i) {
          if (data[i] != int(data[i])) {
            all_integers = false;
            break;
          }
        }

        // If successful
        if (all_integers) {
          if (m) {
            **m = casadi::IM(get_sparsity(p));
            for (size_t i=0; i<sz; ++i) {
              (**m)->at(i) = int(data[i]);
            }
          }
          return true;
        }
      }


      // No match
      return false;
    }

    mxArray* from_ptr(const IM *a) {
      return SWIG_NewPointerObj(new IM(*a), SWIGTYPE_p_casadi__MatrixT_int_t, SWIG_POINTER_OWN);
    }
  } // namespace casadi
 
 
SWIGINTERN AnyTensor Tensor_Sl_casadi_DM_Sg__plus__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs+rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_DM_Sg__minus__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs-rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_DM_Sg__times(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs*rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_DM_Sg__mtimes__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs.mtimes(rhs); }
SWIGINTERN AnyTensor Tensor_Sl_casadi_DM_Sg__rmtimes(AnyTensor const &lhs,AnyTensor const &rhs){ return rhs.mtimes(lhs); }
SWIGINTERN AnyTensor Tensor_Sl_casadi_SX_Sg__plus__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs+rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_SX_Sg__minus__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs-rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_SX_Sg__times(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs*rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_SX_Sg__mtimes__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs.mtimes(rhs); }
SWIGINTERN AnyTensor Tensor_Sl_casadi_SX_Sg__rmtimes(AnyTensor const &lhs,AnyTensor const &rhs){ return rhs.mtimes(lhs); }
SWIGINTERN AnyTensor Tensor_Sl_casadi_MX_Sg__plus__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs+rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_MX_Sg__minus__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs-rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_MX_Sg__times(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs*rhs; }
SWIGINTERN AnyTensor Tensor_Sl_casadi_MX_Sg__mtimes__SWIG_1(AnyTensor const &lhs,AnyTensor const &rhs){ return lhs.mtimes(rhs); }
SWIGINTERN AnyTensor Tensor_Sl_casadi_MX_Sg__rmtimes(AnyTensor const &lhs,AnyTensor const &rhs){ return rhs.mtimes(lhs); }
SWIGINTERN spline::Function spline_Function_plus__SWIG_2(spline::Function const &lhs,spline::Function const &rhs){ return lhs+rhs; }
SWIGINTERN spline::Function spline_Function_minus__SWIG_2(spline::Function const &lhs,spline::Function const &rhs){ return lhs-rhs; }
SWIGINTERN spline::Function spline_Function_times__SWIG_2(spline::Function const &lhs,spline::Function const &rhs){ return lhs*rhs; }
SWIGINTERN spline::Function spline_Function_mtimes__SWIG_2(spline::Function const &lhs,spline::Function const &rhs){ return lhs.mtimes(rhs); }
SWIGINTERN spline::Function spline_Function_rmtimes__SWIG_1(spline::Function const &lhs,spline::Function const &rhs){ return rhs.mtimes(lhs); }
SWIGINTERN spline::Function spline_Function_power(spline::Function const &lhs,int rhs){ return lhs.pow(rhs); }
SWIGINTERN spline::Function spline_Function_mpower(spline::Function const &lhs,int rhs){ spline_assert(lhs.is_scalar()); return lhs.pow(rhs); }
SWIGINTERN spline::Function spline_Function_plus__SWIG_3(spline::Function const &lhs,AnyTensor const &rhs){ return lhs+rhs; }
SWIGINTERN spline::Function spline_Function_minus__SWIG_3(spline::Function const &lhs,AnyTensor const &rhs){ return lhs-rhs; }
SWIGINTERN spline::Function spline_Function_times__SWIG_3(spline::Function const &lhs,AnyTensor const &rhs){ return lhs*rhs; }
SWIGINTERN spline::Function spline_Function_mtimes__SWIG_3(spline::Function const &lhs,AnyTensor const &rhs){ return lhs.mtimes(rhs); }
SWIGINTERN spline::Function spline_Function_rmtimes__SWIG_2(spline::Function const &lhs,AnyTensor const &rhs){ return lhs.rmtimes(rhs); }
SWIGINTERN MX spline_Function_le__SWIG_1(spline::Function const &lhs,MX const &rhs){ return lhs<=rhs; }
SWIGINTERN spline::Function spline_Function_plus__SWIG_4(AnyTensor const &lhs,spline::Function const &rhs){ return rhs+lhs; }
SWIGINTERN spline::Function spline_Function_minus__SWIG_4(AnyTensor const &lhs,spline::Function const &rhs){ return (-rhs)+lhs; }
SWIGINTERN spline::Function spline_Function_times__SWIG_4(AnyTensor const &lhs,spline::Function const &rhs){ return rhs*lhs; }
SWIGINTERN spline::Function spline_Function_mtimes__SWIG_4(AnyTensor const &lhs,spline::Function const &rhs){ return rhs.rmtimes(lhs); }
SWIGINTERN spline::Function spline_Function_rmtimes__SWIG_3(AnyTensor const &lhs,spline::Function const &rhs){ return rhs.mtimes(rhs); }
SWIGINTERN MX spline_Function_le__SWIG_2(MX const &lhs,spline::Function const &rhs){ return rhs>=lhs; }
SWIGINTERN spline::Function spline_Function_ctranspose(spline::Function const *self){ return self->transpose();}

  namespace spline {
    AnyTensor spline_plus(const AnyTensor& lhs, const AnyTensor& rhs) { return lhs+rhs; }
    AnyTensor spline_minus(const AnyTensor& lhs, const AnyTensor& rhs) { return lhs-rhs; }
    AnyTensor spline_times(const AnyTensor& lhs, const AnyTensor& rhs) { return lhs*rhs; }
    AnyTensor spline_mtimes(const AnyTensor& lhs, const AnyTensor& rhs) { return lhs.mtimes(rhs); }
    AnyTensor spline_rmtimes(const AnyTensor& lhs, const AnyTensor& rhs) { return rhs.mtimes(lhs); }
    Function spline_power(const Function& lhs, int rhs) { return lhs.pow(rhs); }
    Function spline_plus(const Function& lhs, const Function& rhs) { return lhs+rhs; }
    Function spline_minus(const Function& lhs, const Function& rhs) { return lhs-rhs; }
    Function spline_times(const Function& lhs, const Function& rhs) { return lhs*rhs; }
    Function spline_mtimes(const Function& lhs, const Function& rhs) { return lhs.mtimes(rhs); }
    Function spline_rmtimes(const Function& lhs, const Function& rhs) { return rhs.mtimes(lhs); }
    Function spline_plus(const Function& lhs, const AnyTensor& rhs) { return lhs+rhs; }
    Function spline_minus(const Function& lhs, const AnyTensor& rhs) { return lhs-rhs; }
    Function spline_times(const Function& lhs, const AnyTensor& rhs) { return lhs*rhs; }
    Function spline_mtimes(const Function& lhs, const AnyTensor& rhs) { return lhs.mtimes(rhs); }
    Function spline_rmtimes(const Function& lhs, const AnyTensor& rhs) { return lhs.rmtimes(rhs); }
    Function spline_plus(const AnyTensor& lhs, const Function& rhs) { return rhs+lhs; }
    Function spline_minus(const AnyTensor& lhs, const Function& rhs) { return (-rhs)+lhs; }
    Function spline_times(const AnyTensor& lhs, const Function& rhs) { return rhs*lhs; }
    Function spline_mtimes(const AnyTensor& lhs, const Function& rhs) { return rhs.rmtimes(lhs); }
    Function spline_rmtimes(const AnyTensor& lhs, const Function& rhs) { return rhs.mtimes(rhs); }

    Function spline_vertcat(const std::vector<spline::Function>& args) { return Function::vertcat(args); }
    Function spline_horzcat(const std::vector<spline::Function>& args) { return Function::horzcat(args); }
    Function spline_blkdiag(const std::vector<spline::Function>& args) { return Function::blkdiag(args); }

  }



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "splinesMATLAB_wrap.h"

int _wrap_delete_MatlabSwigIterator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MatlabSwigIterator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatlabSwigIterator" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_value",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_value" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      try {
        result = (mxArray *)((swig::MatlabSwigIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)(arg1)->incr();
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_incr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_incr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_incr'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::incr(size_t)\n"
    "    swig::MatlabSwigIterator::incr()\n");
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)(arg1)->decr();
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_decr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_decr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_decr'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::decr(size_t)\n"
    "    swig::MatlabSwigIterator::decr()\n");
  return 1;
}


int _wrap_MatlabSwigIterator_distance (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_distance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_distance" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  {
    try {
      try {
        result = ((swig::MatlabSwigIterator const *)arg1)->distance((swig::MatlabSwigIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Matlab_ErrorId("SWIG:RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_equal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_equal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_equal" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  {
    try {
      try {
        result = (bool)((swig::MatlabSwigIterator const *)arg1)->equal((swig::MatlabSwigIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Matlab_ErrorId("SWIG:RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_copy (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_copy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_copy" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->copy();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_next (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_next",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_next" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      try {
        result = (mxArray *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_previous (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_previous",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_previous" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      try {
        result = (mxArray *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_advance (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_advance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_advance" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_eq" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_eq" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_eq" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  {
    try {
      result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator ==((swig::MatlabSwigIterator const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_ne (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_ne",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_ne" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  {
    try {
      result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator !=((swig::MatlabSwigIterator const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOincr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOincr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOincr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      result = (swig::MatlabSwigIterator *)(arg1)->operator ++();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOdecr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOdecr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOdecr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  {
    try {
      result = (swig::MatlabSwigIterator *)(arg1)->operator --();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_plus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_plus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
          SWIG_fail;
        }
      }
      
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  {
    try {
      result = ((swig::MatlabSwigIterator const *)arg1)->operator -((swig::MatlabSwigIterator const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_minus'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::operator -(ptrdiff_t) const\n"
    "    swig::MatlabSwigIterator::operator -(swig::MatlabSwigIterator const &) const\n");
  return 1;
}


int _wrap_new_PrintSharedObject__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::PrintableObject< spline::SharedObject > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintSharedObject",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::PrintableObject< spline::SharedObject > *)new spline::PrintableObject< spline::SharedObject >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_spline__SharedObject_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintSharedObject'."
      "  Prototype:\n"
      "    PRINTSHAREDOBJECT()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintSharedObject__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< spline::SharedObject > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::PrintableObject< spline::SharedObject > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintSharedObject",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__PrintableObjectT_spline__SharedObject_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PrintSharedObject" "', argument " "1"" of type '" "spline::PrintableObject< spline::SharedObject > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PrintSharedObject" "', argument " "1"" of type '" "spline::PrintableObject< spline::SharedObject > const &""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< spline::SharedObject > * >(argp1);
  {
    try {
      result = (spline::PrintableObject< spline::SharedObject > *)new spline::PrintableObject< spline::SharedObject >((spline::PrintableObject< spline::SharedObject > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_spline__SharedObject_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintSharedObject'."
      "  Prototype:\n"
      "    PRINTSHAREDOBJECT(PrintSharedObject)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintSharedObject (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PrintSharedObject__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__PrintableObjectT_spline__SharedObject_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PrintSharedObject__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintSharedObject'."
    "  Possible prototypes are:\n"
    "    PRINTSHAREDOBJECT()\n"
    "    PRINTSHAREDOBJECT(PrintSharedObject)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_PrintSharedObject (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< spline::SharedObject > *arg1 = (spline::PrintableObject< spline::SharedObject > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PrintSharedObject",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__PrintableObjectT_spline__SharedObject_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PrintSharedObject" "', argument " "1"" of type '" "spline::PrintableObject< spline::SharedObject > *""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< spline::SharedObject > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_PrintSharedObject'."
      "  Prototype:\n"
      "    PRINTSHAREDOBJECT(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintMT__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::PrintableObject< Tensor< casadi::MX > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintMT",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::PrintableObject< Tensor< casadi::MX > > *)new spline::PrintableObject< Tensor< casadi::MX > >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintMT'."
      "  Prototype:\n"
      "    PRINTMT()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintMT__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< Tensor< casadi::MX > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::PrintableObject< Tensor< casadi::MX > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintMT",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PrintMT" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::MX > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PrintMT" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::MX > > const &""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< Tensor< casadi::MX > > * >(argp1);
  {
    try {
      result = (spline::PrintableObject< Tensor< casadi::MX > > *)new spline::PrintableObject< Tensor< casadi::MX > >((spline::PrintableObject< Tensor< casadi::MX > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintMT'."
      "  Prototype:\n"
      "    PRINTMT(PrintMT)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintMT (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PrintMT__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PrintMT__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintMT'."
    "  Possible prototypes are:\n"
    "    PRINTMT()\n"
    "    PRINTMT(PrintMT)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_PrintMT (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< Tensor< casadi::MX > > *arg1 = (spline::PrintableObject< Tensor< casadi::MX > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PrintMT",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PrintMT" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::MX > > *""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< Tensor< casadi::MX > > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_PrintMT'."
      "  Prototype:\n"
      "    PRINTMT(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintDT__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::PrintableObject< Tensor< casadi::DM > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintDT",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::PrintableObject< Tensor< casadi::DM > > *)new spline::PrintableObject< Tensor< casadi::DM > >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintDT'."
      "  Prototype:\n"
      "    PRINTDT()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintDT__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< Tensor< casadi::DM > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::PrintableObject< Tensor< casadi::DM > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintDT",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PrintDT" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::DM > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PrintDT" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::DM > > const &""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< Tensor< casadi::DM > > * >(argp1);
  {
    try {
      result = (spline::PrintableObject< Tensor< casadi::DM > > *)new spline::PrintableObject< Tensor< casadi::DM > >((spline::PrintableObject< Tensor< casadi::DM > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintDT'."
      "  Prototype:\n"
      "    PRINTDT(PrintDT)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintDT (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PrintDT__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PrintDT__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintDT'."
    "  Possible prototypes are:\n"
    "    PRINTDT()\n"
    "    PRINTDT(PrintDT)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_PrintDT (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< Tensor< casadi::DM > > *arg1 = (spline::PrintableObject< Tensor< casadi::DM > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PrintDT",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PrintDT" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::DM > > *""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< Tensor< casadi::DM > > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_PrintDT'."
      "  Prototype:\n"
      "    PRINTDT(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintST__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::PrintableObject< Tensor< casadi::SX > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintST",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::PrintableObject< Tensor< casadi::SX > > *)new spline::PrintableObject< Tensor< casadi::SX > >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintST'."
      "  Prototype:\n"
      "    PRINTST()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintST__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< Tensor< casadi::SX > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::PrintableObject< Tensor< casadi::SX > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PrintST",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PrintST" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::SX > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PrintST" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::SX > > const &""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< Tensor< casadi::SX > > * >(argp1);
  {
    try {
      result = (spline::PrintableObject< Tensor< casadi::SX > > *)new spline::PrintableObject< Tensor< casadi::SX > >((spline::PrintableObject< Tensor< casadi::SX > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintST'."
      "  Prototype:\n"
      "    PRINTST(PrintST)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_PrintST (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PrintST__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PrintST__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PrintST'."
    "  Possible prototypes are:\n"
    "    PRINTST()\n"
    "    PRINTST(PrintST)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_PrintST (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::PrintableObject< Tensor< casadi::SX > > *arg1 = (spline::PrintableObject< Tensor< casadi::SX > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PrintST",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PrintST" "', argument " "1"" of type '" "spline::PrintableObject< Tensor< casadi::SX > > *""'"); 
  }
  arg1 = reinterpret_cast< spline::PrintableObject< Tensor< casadi::SX > > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_PrintST'."
      "  Prototype:\n"
      "    PRINTST(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_SharedObject_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::SharedObject *arg1 = (spline::SharedObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SharedObject_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__SharedObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedObject_to_string" "', argument " "1"" of type '" "spline::SharedObject const *""'"); 
  }
  arg1 = reinterpret_cast< spline::SharedObject * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::SharedObject const *)arg1)->to_string();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SharedObject_to_string'."
      "  Prototype:\n"
      "    TO_STRING(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_SharedObject__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::SharedObject *result = 0 ;
  
  if (!SWIG_check_num_args("new_SharedObject",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::SharedObject *)new spline::SharedObject();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__SharedObject, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SharedObject'."
      "  Prototype:\n"
      "    SHAREDOBJECT()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_SharedObject__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::SharedObject *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::SharedObject *result = 0 ;
  
  if (!SWIG_check_num_args("new_SharedObject",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__SharedObject,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SharedObject" "', argument " "1"" of type '" "spline::SharedObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SharedObject" "', argument " "1"" of type '" "spline::SharedObject const &""'"); 
  }
  arg1 = reinterpret_cast< spline::SharedObject * >(argp1);
  {
    try {
      result = (spline::SharedObject *)new spline::SharedObject((spline::SharedObject const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__SharedObject, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SharedObject'."
      "  Prototype:\n"
      "    SHAREDOBJECT(SharedObject)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_SharedObject (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SharedObject__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__SharedObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SharedObject__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SharedObject'."
    "  Possible prototypes are:\n"
    "    SHAREDOBJECT()\n"
    "    SHAREDOBJECT(SharedObject)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_SharedObject (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::SharedObject *arg1 = (spline::SharedObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SharedObject",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__SharedObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SharedObject" "', argument " "1"" of type '" "spline::SharedObject *""'"); 
  }
  arg1 = reinterpret_cast< spline::SharedObject * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_SharedObject'."
      "  Prototype:\n"
      "    SHAREDOBJECT(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Argument__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Argument *result = 0 ;
  
  if (!SWIG_check_num_args("new_Argument",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Argument *)new spline::Argument();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Argument, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Argument'."
      "  Prototype:\n"
      "    ARGUMENT()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Argument__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string m1 ;
  mxArray * _out;
  spline::Argument *result = 0 ;
  
  if (!SWIG_check_num_args("new_Argument",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "char" "'.");
  {
    try {
      result = (spline::Argument *)new spline::Argument((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Argument, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Argument'."
      "  Prototype:\n"
      "    ARGUMENT(char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Argument__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  mxArray * _out;
  spline::Argument *result = 0 ;
  
  if (!SWIG_check_num_args("new_Argument",argc,1,1,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "int" "'.");
  {
    try {
      result = (spline::Argument *)new spline::Argument(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Argument, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Argument'."
      "  Prototype:\n"
      "    ARGUMENT(int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Argument__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Parameter *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Argument *result = 0 ;
  
  if (!SWIG_check_num_args("new_Argument",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Parameter,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Argument" "', argument " "1"" of type '" "Parameter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Argument" "', argument " "1"" of type '" "Parameter const &""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  {
    try {
      result = (spline::Argument *)new spline::Argument((Parameter const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Argument, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Argument'."
      "  Prototype:\n"
      "    ARGUMENT(Parameter const &)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_concrete__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Argument *arg1 = (spline::Argument *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > m2 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Argument_concrete",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Argument_concrete" "', argument " "1"" of type '" "spline::Argument const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Argument * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "char" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::Argument const *)arg1)->concrete((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_concrete'."
      "  Prototype:\n"
      "    CONCRETE(self,[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_from_vector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > m1 ;
  mxArray * _out;
  std::vector< spline::Argument,std::allocator< spline::Argument > > result;
  
  if (!SWIG_check_num_args("Argument_from_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "int" "]" "'.");
  {
    try {
      result = spline::Argument::from_vector((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[index]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_from_vector'."
      "  Prototype:\n"
      "    FROM_VECTOR([int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_from_vector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string,std::allocator< std::string > > *arg1 = 0 ;
  std::vector< std::string > m1 ;
  mxArray * _out;
  std::vector< spline::Argument,std::allocator< spline::Argument > > result;
  
  if (!SWIG_check_num_args("Argument_from_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "char" "]" "'.");
  {
    try {
      result = spline::Argument::from_vector((std::vector< std::string,std::allocator< std::string > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[index]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_from_vector'."
      "  Prototype:\n"
      "    FROM_VECTOR([char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_from_vector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Parameter,std::allocator< spline::Parameter > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< spline::Argument,std::allocator< spline::Argument > > result;
  
  if (!SWIG_check_num_args("Argument_from_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Argument_from_vector" "', argument " "1"" of type '" "std::vector< Parameter,std::allocator< spline::Parameter > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Argument_from_vector" "', argument " "1"" of type '" "std::vector< Parameter,std::allocator< spline::Parameter > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Parameter,std::allocator< spline::Parameter > > * >(argp1);
  {
    try {
      result = spline::Argument::from_vector((std::vector< Parameter,std::allocator< spline::Parameter > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[index]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_from_vector'."
      "  Prototype:\n"
      "    FROM_VECTOR(std::vector< Parameter,std::allocator< spline::Parameter > > const &)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_from_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Argument_from_vector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<std::string> **>(0));
    if (_v) {
      return _wrap_Argument_from_vector__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<int> **>(0));
    if (_v) {
      return _wrap_Argument_from_vector__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_from_vector'."
    "  Possible prototypes are:\n"
    "    FROM_VECTOR(std::vector< Parameter,std::allocator< spline::Parameter > > const &)\n"
    "    FROM_VECTOR([char])\n"
    "    FROM_VECTOR([int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Argument_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Argument *arg1 = (spline::Argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Argument_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Argument_type" "', argument " "1"" of type '" "spline::Argument const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Argument * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Argument const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_is_all (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Argument *arg1 = (spline::Argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Argument_is_all",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Argument_is_all" "', argument " "1"" of type '" "spline::Argument const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Argument * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::Argument const *)arg1)->is_all();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_is_all'."
      "  Prototype:\n"
      "    IS_ALL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_concrete__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::vector< spline::Argument > m1 ;
  std::vector< std::string > m2 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("Argument_concrete",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[index]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "char" "]" "'.");
  {
    try {
      result = spline::Argument::concrete((std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_concrete'."
      "  Prototype:\n"
      "    CONCRETE([index],[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_concrete__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg1 = 0 ;
  TensorBasis *arg2 = 0 ;
  std::vector< spline::Argument > m1 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("Argument_concrete",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[index]" "'.");
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TensorBasis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Argument_concrete" "', argument " "2"" of type '" "TensorBasis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Argument_concrete" "', argument " "2"" of type '" "TensorBasis const &""'"); 
  }
  arg2 = reinterpret_cast< TensorBasis * >(argp2);
  {
    try {
      result = spline::Argument::concrete((std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg1,(TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_concrete'."
      "  Prototype:\n"
      "    CONCRETE([index],TensorBasis const &)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_concrete__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Argument *arg1 = 0 ;
  TensorBasis *arg2 = 0 ;
  spline::Argument m1 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Argument_concrete",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "index" "'.");
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TensorBasis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Argument_concrete" "', argument " "2"" of type '" "TensorBasis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Argument_concrete" "', argument " "2"" of type '" "TensorBasis const &""'"); 
  }
  arg2 = reinterpret_cast< TensorBasis * >(argp2);
  {
    try {
      result = (int)spline::Argument::concrete((spline::Argument const &)*arg1,(TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_concrete'."
      "  Prototype:\n"
      "    CONCRETE(index,TensorBasis const &)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Argument_concrete (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Argument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<std::string> **>(0));
      if (_v) {
        return _wrap_Argument_concrete__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::Argument > **>(0));
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TensorBasis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Argument_concrete__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::Argument > **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<std::string> **>(0));
      if (_v) {
        return _wrap_Argument_concrete__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Argument **>(0));
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TensorBasis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Argument_concrete__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Argument_concrete'."
    "  Possible prototypes are:\n"
    "    CONCRETE(self,[char])\n"
    "    CONCRETE([index],TensorBasis const &)\n"
    "    CONCRETE([index],[char])\n"
    "    CONCRETE(index,TensorBasis const &)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_new_Argument__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Argument *arg1 = 0 ;
  spline::Argument m1 ;
  mxArray * _out;
  spline::Argument *result = 0 ;
  
  if (!SWIG_check_num_args("new_Argument",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "index" "'.");
  {
    try {
      result = (spline::Argument *)new spline::Argument((spline::Argument const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Argument, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Argument'."
      "  Prototype:\n"
      "    ARGUMENT(index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Argument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Argument__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Parameter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Argument__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< int **>(0));
    if (_v) {
      return _wrap_new_Argument__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Argument **>(0));
    if (_v) {
      return _wrap_new_Argument__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::string **>(0));
    if (_v) {
      return _wrap_new_Argument__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Argument'."
    "  Possible prototypes are:\n"
    "    ARGUMENT()\n"
    "    ARGUMENT(Parameter const &)\n"
    "    ARGUMENT(int)\n"
    "    ARGUMENT(index)\n"
    "    ARGUMENT(char)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Argument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Argument *arg1 = (spline::Argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Argument",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Argument, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Argument" "', argument " "1"" of type '" "spline::Argument *""'"); 
  }
  arg1 = reinterpret_cast< spline::Argument * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Argument'."
      "  Prototype:\n"
      "    ARGUMENT(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_invert_order (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > m1 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("invert_order",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "int" "]" "'.");
  {
    try {
      result = invert_order((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'invert_order'."
      "  Prototype:\n"
      "    INVERT_ORDER([int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_AnySlice_start__get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("AnySlice_start__get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnySlice_start__get" "', argument " "1"" of type '" "AnySlice *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  result = (int) ((arg1)->start_);
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'AnySlice_start__get'."
      "  Prototype:\n"
      "    ANYSLICE_START__GET(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_AnySlice_stop__get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("AnySlice_stop__get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnySlice_stop__get" "', argument " "1"" of type '" "AnySlice *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  result = (int) ((arg1)->stop_);
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'AnySlice_stop__get'."
      "  Prototype:\n"
      "    ANYSLICE_STOP__GET(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_AnySlice_step__get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("AnySlice_step__get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnySlice_step__get" "', argument " "1"" of type '" "AnySlice *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  result = (int) ((arg1)->step_);
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'AnySlice_step__get'."
      "  Prototype:\n"
      "    ANYSLICE_STEP__GET(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_AnySlice_indices__get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_check_num_args("AnySlice_indices__get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnySlice_indices__get" "', argument " "1"" of type '" "AnySlice *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->indices_);
  if(!(_out = casadi::from_ptr(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'AnySlice_indices__get'."
      "  Prototype:\n"
      "    ANYSLICE_INDICES__GET(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_AnySlice_has_indices__get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AnySlice_has_indices__get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnySlice_has_indices__get" "', argument " "1"" of type '" "AnySlice *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  result = (bool) ((arg1)->has_indices_);
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'AnySlice_has_indices__get'."
      "  Prototype:\n"
      "    ANYSLICE_HAS_INDICES__GET(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_AnySlice__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  AnySlice *result = 0 ;
  
  if (!SWIG_check_num_args("new_AnySlice",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (AnySlice *)new AnySlice();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnySlice, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AnySlice'."
      "  Prototype:\n"
      "    ANYSLICE()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_AnySlice__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  mxArray * _out;
  AnySlice *result = 0 ;
  
  if (!SWIG_check_num_args("new_AnySlice",argc,1,1,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "int" "'.");
  {
    try {
      result = (AnySlice *)new AnySlice(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnySlice, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AnySlice'."
      "  Prototype:\n"
      "    ANYSLICE(int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_AnySlice__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 = (int) 1 ;
  mxArray * _out;
  AnySlice *result = 0 ;
  
  if (!SWIG_check_num_args("new_AnySlice",argc,3,2,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "int" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  if (2<argc) {
    if (!casadi::to_val(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "int" "'.");
  }
  {
    try {
      result = (AnySlice *)new AnySlice(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnySlice, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AnySlice'."
      "  Prototype:\n"
      "    ANYSLICE(int,int,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_AnySlice__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > m1 ;
  mxArray * _out;
  AnySlice *result = 0 ;
  
  if (!SWIG_check_num_args("new_AnySlice",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "int" "]" "'.");
  {
    try {
      result = (AnySlice *)new AnySlice((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnySlice, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AnySlice'."
      "  Prototype:\n"
      "    ANYSLICE([int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_AnySlice_indices (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("AnySlice_indices",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnySlice_indices" "', argument " "1"" of type '" "AnySlice const *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((AnySlice const *)arg1)->indices(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'AnySlice_indices'."
      "  Prototype:\n"
      "    INDICES(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_AnySlice__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = 0 ;
  AnySlice m1 ;
  mxArray * _out;
  AnySlice *result = 0 ;
  
  if (!SWIG_check_num_args("new_AnySlice",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnySlice" "'.");
  {
    try {
      result = (AnySlice *)new AnySlice((AnySlice const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnySlice, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AnySlice'."
      "  Prototype:\n"
      "    ANYSLICE(AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_AnySlice (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AnySlice__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< int **>(0));
    if (_v) {
      return _wrap_new_AnySlice__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<int> **>(0));
    if (_v) {
      return _wrap_new_AnySlice__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnySlice **>(0));
    if (_v) {
      return _wrap_new_AnySlice__SWIG_4(resc,resv,argc,argv);
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< int **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_AnySlice__SWIG_2(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< int **>(0));
        if (_v) {
          return _wrap_new_AnySlice__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AnySlice'."
    "  Possible prototypes are:\n"
    "    ANYSLICE()\n"
    "    ANYSLICE(int)\n"
    "    ANYSLICE([int])\n"
    "    ANYSLICE(AnySlice)\n"
    "    ANYSLICE(int,int,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_AnySlice (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnySlice *arg1 = (AnySlice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AnySlice",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_AnySlice, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnySlice" "', argument " "1"" of type '" "AnySlice *""'"); 
  }
  arg1 = reinterpret_cast< AnySlice * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_AnySlice'."
      "  Prototype:\n"
      "    ANYSLICE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_concat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Tensor< casadi::DM >,std::allocator< Tensor< casadi::DM > > > *arg1 = 0 ;
  spline::NumericIndex *arg2 = 0 ;
  std::vector< Tensor< casadi::DM > > m1 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  Tensor< casadi::Matrix< double > > result;
  
  if (!SWIG_check_num_args("DTensor_concat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[DTensor]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR concat((std::vector< Tensor< casadi::Matrix< double > >,std::allocator< Tensor< casadi::Matrix< double > > > > const &)*arg1,(int const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_concat'."
      "  Prototype:\n"
      "    CONCAT([DTensor],index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_repeat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::Matrix< double > > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  Tensor< casadi::DM > m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::Matrix< double > > result;
  
  if (!SWIG_check_num_args("DTensor_repeat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "DTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR repeat((Tensor< casadi::Matrix< double > > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_repeat'."
      "  Prototype:\n"
      "    REPEAT(DTensor,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_pack (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Tensor< casadi::DM >,std::allocator< Tensor< casadi::DM > > > *arg1 = 0 ;
  spline::NumericIndex *arg2 = 0 ;
  std::vector< Tensor< casadi::DM > > m1 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  Tensor< casadi::Matrix< double > > result;
  
  if (!SWIG_check_num_args("DTensor_pack",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[DTensor]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR pack((std::vector< Tensor< casadi::Matrix< double > >,std::allocator< Tensor< casadi::Matrix< double > > > > const &)*arg1,(int const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_pack'."
      "  Prototype:\n"
      "    PACK([DTensor],index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_DTensor__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< double > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  casadi::Matrix< double > m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DTensor",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "DM" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = (Tensor< casadi::DM > *)new Tensor< casadi::DM >((casadi::Matrix< double > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DTensor'."
      "  Prototype:\n"
      "    DTENSOR(DM,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_DTensor__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< double > *arg1 = 0 ;
  casadi::Matrix< double > m1 ;
  mxArray * _out;
  Tensor< casadi::DM > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "DM" "'.");
  {
    try {
      result = (Tensor< casadi::DM > *)new Tensor< casadi::DM >((casadi::Matrix< double > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DTensor'."
      "  Prototype:\n"
      "    DTENSOR(DM)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_DTensor__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = 0 ;
  Tensor< casadi::DM > m1 ;
  mxArray * _out;
  Tensor< casadi::DM > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "DTensor" "'.");
  {
    try {
      result = (Tensor< casadi::DM > *)new Tensor< casadi::DM >((Tensor< casadi::DM > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DTensor'."
      "  Prototype:\n"
      "    DTENSOR(DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_DTensor__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  mxArray * _out;
  Tensor< casadi::DM > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "double" "'.");
  {
    try {
      result = (Tensor< casadi::DM > *)new Tensor< casadi::DM >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DTensor'."
      "  Prototype:\n"
      "    DTENSOR(double)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_DTensor__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  Tensor< casadi::DM > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DTensor",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (Tensor< casadi::DM > *)new Tensor< casadi::DM >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DTensor'."
      "  Prototype:\n"
      "    DTENSOR()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_DTensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_DTensor__SWIG_4(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< double **>(0));
    if (_v) {
      return _wrap_new_DTensor__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< casadi::Matrix<double> **>(0));
    if (_v) {
      return _wrap_new_DTensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< Tensor<casadi::DM> **>(0));
    if (_v) {
      return _wrap_new_DTensor__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< casadi::Matrix<double> **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        return _wrap_new_DTensor__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DTensor'."
    "  Possible prototypes are:\n"
    "    DTENSOR()\n"
    "    DTENSOR(double)\n"
    "    DTENSOR(DM)\n"
    "    DTENSOR(DTensor)\n"
    "    DTENSOR(DM,[int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_DTensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTensor" "', argument " "1"" of type '" "Tensor< casadi::DM > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_DTensor'."
      "  Prototype:\n"
      "    DTENSOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_is_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DTensor_is_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_is_scalar" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((Tensor< casadi::DM > const *)arg1)->is_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_is_scalar'."
      "  Prototype:\n"
      "    IS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_as_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Matrix< double > result;
  
  if (!SWIG_check_num_args("DTensor_as_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_as_scalar" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->as_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DM" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_as_scalar'."
      "  Prototype:\n"
      "    AS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_is_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DTensor_is_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_is_vector" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((Tensor< casadi::DM > const *)arg1)->is_vector();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_is_vector'."
      "  Prototype:\n"
      "    IS_VECTOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_as_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_as_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_as_vector" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->as_vector();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_as_vector'."
      "  Prototype:\n"
      "    AS_VECTOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Matrix< double > result;
  
  if (!SWIG_check_num_args("DTensor_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_data" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->data();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DM" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_data'."
      "  Prototype:\n"
      "    DATA(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_matrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Matrix< double > result;
  
  if (!SWIG_check_num_args("DTensor_matrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_matrix" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->matrix();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DM" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_matrix'."
      "  Prototype:\n"
      "    MATRIX(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_squeeze (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_squeeze",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_squeeze" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->squeeze();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_squeeze'."
      "  Prototype:\n"
      "    SQUEEZE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_shape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_shape",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_shape" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->shape((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_shape'."
      "  Prototype:\n"
      "    SHAPE(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_numel (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DTensor_numel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_numel" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::DM > const *)arg1)->numel();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_numel'."
      "  Prototype:\n"
      "    NUMEL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_normalize_dim (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > m1 ;
  mxArray * _out;
  std::pair< int,int > result;
  
  if (!SWIG_check_num_args("DTensor_normalize_dim",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR normalize_dim((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[int,int]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_normalize_dim'."
      "  Prototype:\n"
      "    NORMALIZE_DIM([int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_binary_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  Tensor< casadi::DM > m1 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("DTensor_binary_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "DTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR binary_dims((Tensor< casadi::Matrix< double > > const &)*arg1,(Tensor< casadi::Matrix< double > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_binary_dims'."
      "  Prototype:\n"
      "    BINARY_DIMS(DTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_get_slice__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  AnySlice *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_get_slice",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_get_slice" "', argument " "1"" of type '" "Tensor< casadi::DM > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->get_slice((AnySlice const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_get_slice'."
      "  Prototype:\n"
      "    GET_SLICE(self,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_get_slice__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  AnySlice *arg2 = 0 ;
  AnySlice *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  AnySlice m3 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_get_slice",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_get_slice" "', argument " "1"" of type '" "Tensor< casadi::DM > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->get_slice((AnySlice const &)*arg2,(AnySlice const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_get_slice'."
      "  Prototype:\n"
      "    GET_SLICE(self,AnySlice,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_get_slice (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        return _wrap_DTensor_get_slice__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< AnySlice **>(0));
        if (_v) {
          return _wrap_DTensor_get_slice__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_get_slice'."
    "  Possible prototypes are:\n"
    "    GET_SLICE(self,AnySlice)\n"
    "    GET_SLICE(self,AnySlice,AnySlice)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_DTensor_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< double > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  casadi::Matrix< double > m1 ;
  std::vector< int > m3 ;
  mxArray * _out;
  casadi::Matrix< double > result;
  
  if (!SWIG_check_num_args("DTensor_get",argc,3,3,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "DM" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR get((casadi::Matrix< double > const &)*arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DM" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_get'."
      "  Prototype:\n"
      "    GET(DM,[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< double > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  casadi::Matrix< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m3 ;
  casadi::Matrix< double > m4 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DTensor_set",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_casadi__MatrixT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_set" "', argument " "1"" of type '" "casadi::Matrix< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTensor_set" "', argument " "1"" of type '" "casadi::Matrix< double > &""'"); 
  }
  arg1 = reinterpret_cast< casadi::Matrix< double > * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  arg4 = &m4;
  if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "DM" "'.");
  {
    try {
      Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR set(*arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(casadi::Matrix< double > const &)*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_set'."
      "  Prototype:\n"
      "    SET(DM,[int],[int],DM)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_n_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DTensor_n_dims",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_n_dims" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::DM > const *)arg1)->n_dims();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_n_dims'."
      "  Prototype:\n"
      "    N_DIMS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_dims__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_check_num_args("DTensor_dims",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_dims" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (std::vector< int,std::allocator< int > > *) &((Tensor< casadi::DM > const *)arg1)->dims();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ptr(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_dims'."
      "  Prototype:\n"
      "    DIMS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_dims__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DTensor_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_dims" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::DM > const *)arg1)->dims(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_dims'."
      "  Prototype:\n"
      "    DIMS(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DTensor_dims__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_DTensor_dims__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_dims'."
    "  Possible prototypes are:\n"
    "    DIMS(self)\n"
    "    DIMS(self,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_DTensor_sym (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::string m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_sym",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "char" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::DM >::SWIGTEMPLATEDISAMBIGUATOR sym((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_sym'."
      "  Prototype:\n"
      "    SYM(char,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_solve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_solve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_solve" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->solve((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_solve'."
      "  Prototype:\n"
      "    SOLVE(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_plus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_plus" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator +((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_plus'."
      "  Prototype:\n"
      "    PLUS(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_minus" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator -((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_minus'."
      "  Prototype:\n"
      "    MINUS(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_uminus" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator -();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_uminus'."
      "  Prototype:\n"
      "    UMINUS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_mtimes" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator *((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_le (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_le",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_le" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator <=((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_le'."
      "  Prototype:\n"
      "    LE(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_ge (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_ge",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_ge" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator >=((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_ge'."
      "  Prototype:\n"
      "    GE(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_eq" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator ==((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_eq'."
      "  Prototype:\n"
      "    EQ(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_paren" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->operator ()((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_paren'."
      "  Prototype:\n"
      "    PAREN(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  spline::NumericIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  spline::NumericIndex m3 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_transform" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' index '.");
  interpret_NumericIndex(*arg3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->transform((Tensor< casadi::DM > const &)*arg2,(spline::NumericIndex const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,DTensor,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_index (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_index",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_index" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->index((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_index'."
      "  Prototype:\n"
      "    INDEX(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_reorder_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  spline::NumericIndexVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::NumericIndexVector m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_reorder_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_reorder_dims" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' [index] '.");
  interpret_NumericIndex(m2);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->reorder_dims((spline::NumericIndexVector const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_reorder_dims'."
      "  Prototype:\n"
      "    REORDER_DIMS(self,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_einstein__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< int > m3 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_einstein",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_einstein" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->einstein((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_einstein'."
      "  Prototype:\n"
      "    EINSTEIN(self,[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_einstein__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  std::vector< int > m3 ;
  std::vector< int > m4 ;
  std::vector< int > m5 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_einstein",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_einstein" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  arg4 = &m4;
  if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "[" "int" "]" "'.");
  arg5 = &m5;
  if (!casadi::to_ptr(argv[4], &arg5)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 5 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->einstein((Tensor< casadi::DM > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::vector< int,std::allocator< int > > const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_einstein'."
      "  Prototype:\n"
      "    EINSTEIN(self,DTensor,[int],[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_einstein (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_DTensor_einstein__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::DM> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          _v = casadi::to_ptr(argv[3], static_cast< std::vector<int> **>(0));
          if (_v) {
            _v = casadi::to_ptr(argv[4], static_cast< std::vector<int> **>(0));
            if (_v) {
              return _wrap_DTensor_einstein__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_einstein'."
    "  Possible prototypes are:\n"
    "    EINSTEIN(self,[int],[int])\n"
    "    EINSTEIN(self,DTensor,[int],[int],[int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_DTensor_outer_product (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_outer_product",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_outer_product" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->outer_product((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_outer_product'."
      "  Prototype:\n"
      "    OUTER_PRODUCT(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_trailing_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_trailing_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_trailing_mtimes" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->trailing_mtimes((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_trailing_mtimes'."
      "  Prototype:\n"
      "    TRAILING_MTIMES(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_trailing_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_trailing_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_trailing_rmtimes" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->trailing_rmtimes((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_trailing_rmtimes'."
      "  Prototype:\n"
      "    TRAILING_RMTIMES(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_inner (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_inner",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_inner" "', argument " "1"" of type '" "Tensor< casadi::DM > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->inner((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_inner'."
      "  Prototype:\n"
      "    INNER(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_partial_product (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  Tensor< casadi::DM > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::DM > m2 ;
  mxArray * _out;
  Tensor< casadi::DM > result;
  
  if (!SWIG_check_num_args("DTensor_partial_product",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_partial_product" "', argument " "1"" of type '" "Tensor< casadi::DM > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->partial_product((Tensor< casadi::DM > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_partial_product'."
      "  Prototype:\n"
      "    PARTIAL_PRODUCT(self,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::DM > *arg1 = (Tensor< casadi::DM > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DTensor_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTensor_to_string" "', argument " "1"" of type '" "Tensor< casadi::DM > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::DM > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::DM > const *)arg1)->to_string();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_to_string'."
      "  Prototype:\n"
      "    TO_STRING(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_plus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("DTensor_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_DM_Sg__plus__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_plus'."
      "  Prototype:\n"
      "    PLUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::DM> **>(0));
      if (_v) {
        return _wrap_DTensor_plus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_DTensor_plus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_plus'."
    "  Possible prototypes are:\n"
    "    PLUS(self,DTensor)\n"
    "    PLUS(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_DTensor_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("DTensor_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_DM_Sg__minus__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_minus'."
      "  Prototype:\n"
      "    MINUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::DM> **>(0));
      if (_v) {
        return _wrap_DTensor_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_DTensor_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_minus'."
    "  Possible prototypes are:\n"
    "    MINUS(self,DTensor)\n"
    "    MINUS(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_DTensor_times (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("DTensor_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_DM_Sg__times((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_times'."
      "  Prototype:\n"
      "    TIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("DTensor_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_DM_Sg__mtimes__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_mtimes'."
      "  Prototype:\n"
      "    MTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_DTensor_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::DM> **>(0));
      if (_v) {
        return _wrap_DTensor_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_DTensor_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_mtimes'."
    "  Possible prototypes are:\n"
    "    MTIMES(self,DTensor)\n"
    "    MTIMES(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_DTensor_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("DTensor_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_DM_Sg__rmtimes((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DTensor_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_concat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Tensor< casadi::SX >,std::allocator< Tensor< casadi::SX > > > *arg1 = 0 ;
  spline::NumericIndex *arg2 = 0 ;
  std::vector< Tensor< casadi::SX > > m1 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  Tensor< casadi::Matrix< casadi::SXElem > > result;
  
  if (!SWIG_check_num_args("STensor_concat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[STensor]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR concat((std::vector< Tensor< casadi::Matrix< casadi::SXElem > >,std::allocator< Tensor< casadi::Matrix< casadi::SXElem > > > > const &)*arg1,(int const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_concat'."
      "  Prototype:\n"
      "    CONCAT([STensor],index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_repeat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::Matrix< casadi::SXElem > > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  Tensor< casadi::SX > m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::Matrix< casadi::SXElem > > result;
  
  if (!SWIG_check_num_args("STensor_repeat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "STensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR repeat((Tensor< casadi::Matrix< casadi::SXElem > > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_repeat'."
      "  Prototype:\n"
      "    REPEAT(STensor,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_pack (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Tensor< casadi::SX >,std::allocator< Tensor< casadi::SX > > > *arg1 = 0 ;
  spline::NumericIndex *arg2 = 0 ;
  std::vector< Tensor< casadi::SX > > m1 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  Tensor< casadi::Matrix< casadi::SXElem > > result;
  
  if (!SWIG_check_num_args("STensor_pack",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[STensor]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR pack((std::vector< Tensor< casadi::Matrix< casadi::SXElem > >,std::allocator< Tensor< casadi::Matrix< casadi::SXElem > > > > const &)*arg1,(int const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_pack'."
      "  Prototype:\n"
      "    PACK([STensor],index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_STensor__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< casadi::SXElem > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  casadi::Matrix< casadi::SXElem > m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_STensor",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "SX" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = (Tensor< casadi::SX > *)new Tensor< casadi::SX >((casadi::Matrix< casadi::SXElem > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_STensor'."
      "  Prototype:\n"
      "    STENSOR(SX,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_STensor__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< casadi::SXElem > *arg1 = 0 ;
  casadi::Matrix< casadi::SXElem > m1 ;
  mxArray * _out;
  Tensor< casadi::SX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_STensor",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "SX" "'.");
  {
    try {
      result = (Tensor< casadi::SX > *)new Tensor< casadi::SX >((casadi::Matrix< casadi::SXElem > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_STensor'."
      "  Prototype:\n"
      "    STENSOR(SX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_STensor__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = 0 ;
  Tensor< casadi::SX > m1 ;
  mxArray * _out;
  Tensor< casadi::SX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_STensor",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "STensor" "'.");
  {
    try {
      result = (Tensor< casadi::SX > *)new Tensor< casadi::SX >((Tensor< casadi::SX > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_STensor'."
      "  Prototype:\n"
      "    STENSOR(STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_STensor__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  mxArray * _out;
  Tensor< casadi::SX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_STensor",argc,1,1,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "double" "'.");
  {
    try {
      result = (Tensor< casadi::SX > *)new Tensor< casadi::SX >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_STensor'."
      "  Prototype:\n"
      "    STENSOR(double)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_STensor__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  Tensor< casadi::SX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_STensor",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (Tensor< casadi::SX > *)new Tensor< casadi::SX >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_STensor'."
      "  Prototype:\n"
      "    STENSOR()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_STensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_STensor__SWIG_4(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< double **>(0));
    if (_v) {
      return _wrap_new_STensor__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< casadi::Matrix<casadi::SXElem> **>(0));
    if (_v) {
      return _wrap_new_STensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< Tensor<casadi::SX> **>(0));
    if (_v) {
      return _wrap_new_STensor__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< casadi::Matrix<casadi::SXElem> **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        return _wrap_new_STensor__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_STensor'."
    "  Possible prototypes are:\n"
    "    STENSOR()\n"
    "    STENSOR(double)\n"
    "    STENSOR(SX)\n"
    "    STENSOR(STensor)\n"
    "    STENSOR(SX,[int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_STensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_STensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_STensor" "', argument " "1"" of type '" "Tensor< casadi::SX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_STensor'."
      "  Prototype:\n"
      "    STENSOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_is_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("STensor_is_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_is_scalar" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((Tensor< casadi::SX > const *)arg1)->is_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_is_scalar'."
      "  Prototype:\n"
      "    IS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_as_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Matrix< casadi::SXElem > result;
  
  if (!SWIG_check_num_args("STensor_as_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_as_scalar" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->as_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "SX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_as_scalar'."
      "  Prototype:\n"
      "    AS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_is_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("STensor_is_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_is_vector" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((Tensor< casadi::SX > const *)arg1)->is_vector();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_is_vector'."
      "  Prototype:\n"
      "    IS_VECTOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_as_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_as_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_as_vector" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->as_vector();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_as_vector'."
      "  Prototype:\n"
      "    AS_VECTOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Matrix< casadi::SXElem > result;
  
  if (!SWIG_check_num_args("STensor_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_data" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->data();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "SX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_data'."
      "  Prototype:\n"
      "    DATA(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_matrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Matrix< casadi::SXElem > result;
  
  if (!SWIG_check_num_args("STensor_matrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_matrix" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->matrix();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "SX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_matrix'."
      "  Prototype:\n"
      "    MATRIX(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_squeeze (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_squeeze",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_squeeze" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->squeeze();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_squeeze'."
      "  Prototype:\n"
      "    SQUEEZE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_shape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_shape",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_shape" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->shape((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_shape'."
      "  Prototype:\n"
      "    SHAPE(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_numel (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("STensor_numel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_numel" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::SX > const *)arg1)->numel();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_numel'."
      "  Prototype:\n"
      "    NUMEL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_normalize_dim (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > m1 ;
  mxArray * _out;
  std::pair< int,int > result;
  
  if (!SWIG_check_num_args("STensor_normalize_dim",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR normalize_dim((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[int,int]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_normalize_dim'."
      "  Prototype:\n"
      "    NORMALIZE_DIM([int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_binary_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  Tensor< casadi::SX > m1 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("STensor_binary_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "STensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR binary_dims((Tensor< casadi::Matrix< casadi::SXElem > > const &)*arg1,(Tensor< casadi::Matrix< casadi::SXElem > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_binary_dims'."
      "  Prototype:\n"
      "    BINARY_DIMS(STensor,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_get_slice__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  AnySlice *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_get_slice",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_get_slice" "', argument " "1"" of type '" "Tensor< casadi::SX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->get_slice((AnySlice const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_get_slice'."
      "  Prototype:\n"
      "    GET_SLICE(self,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_get_slice__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  AnySlice *arg2 = 0 ;
  AnySlice *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  AnySlice m3 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_get_slice",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_get_slice" "', argument " "1"" of type '" "Tensor< casadi::SX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->get_slice((AnySlice const &)*arg2,(AnySlice const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_get_slice'."
      "  Prototype:\n"
      "    GET_SLICE(self,AnySlice,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_get_slice (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        return _wrap_STensor_get_slice__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< AnySlice **>(0));
        if (_v) {
          return _wrap_STensor_get_slice__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_get_slice'."
    "  Possible prototypes are:\n"
    "    GET_SLICE(self,AnySlice)\n"
    "    GET_SLICE(self,AnySlice,AnySlice)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_STensor_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< casadi::SXElem > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  casadi::Matrix< casadi::SXElem > m1 ;
  std::vector< int > m3 ;
  mxArray * _out;
  casadi::Matrix< casadi::SXElem > result;
  
  if (!SWIG_check_num_args("STensor_get",argc,3,3,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "SX" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR get((casadi::Matrix< casadi::SXElem > const &)*arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "SX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_get'."
      "  Prototype:\n"
      "    GET(SX,[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::Matrix< casadi::SXElem > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  casadi::Matrix< casadi::SXElem > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m3 ;
  casadi::Matrix< casadi::SXElem > m4 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("STensor_set",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_casadi__MatrixT_casadi__SXElem_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_set" "', argument " "1"" of type '" "casadi::Matrix< casadi::SXElem > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STensor_set" "', argument " "1"" of type '" "casadi::Matrix< casadi::SXElem > &""'"); 
  }
  arg1 = reinterpret_cast< casadi::Matrix< casadi::SXElem > * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  arg4 = &m4;
  if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "SX" "'.");
  {
    try {
      Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR set(*arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(casadi::Matrix< casadi::SXElem > const &)*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_set'."
      "  Prototype:\n"
      "    SET(SX,[int],[int],SX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_n_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("STensor_n_dims",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_n_dims" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::SX > const *)arg1)->n_dims();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_n_dims'."
      "  Prototype:\n"
      "    N_DIMS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_dims__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_check_num_args("STensor_dims",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_dims" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (std::vector< int,std::allocator< int > > *) &((Tensor< casadi::SX > const *)arg1)->dims();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ptr(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_dims'."
      "  Prototype:\n"
      "    DIMS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_dims__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("STensor_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_dims" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::SX > const *)arg1)->dims(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_dims'."
      "  Prototype:\n"
      "    DIMS(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_STensor_dims__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_STensor_dims__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_dims'."
    "  Possible prototypes are:\n"
    "    DIMS(self)\n"
    "    DIMS(self,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_STensor_sym (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::string m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_sym",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "char" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::SX >::SWIGTEMPLATEDISAMBIGUATOR sym((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_sym'."
      "  Prototype:\n"
      "    SYM(char,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_solve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_solve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_solve" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->solve((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_solve'."
      "  Prototype:\n"
      "    SOLVE(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_plus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_plus" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator +((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_plus'."
      "  Prototype:\n"
      "    PLUS(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_minus" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator -((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_minus'."
      "  Prototype:\n"
      "    MINUS(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_uminus" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator -();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_uminus'."
      "  Prototype:\n"
      "    UMINUS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_mtimes" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator *((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_le (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_le",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_le" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator <=((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_le'."
      "  Prototype:\n"
      "    LE(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_ge (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_ge",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_ge" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator >=((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_ge'."
      "  Prototype:\n"
      "    GE(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_eq" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator ==((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_eq'."
      "  Prototype:\n"
      "    EQ(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_paren" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->operator ()((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_paren'."
      "  Prototype:\n"
      "    PAREN(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  spline::NumericIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  spline::NumericIndex m3 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_transform" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' index '.");
  interpret_NumericIndex(*arg3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->transform((Tensor< casadi::SX > const &)*arg2,(spline::NumericIndex const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,STensor,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_index (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_index",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_index" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->index((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_index'."
      "  Prototype:\n"
      "    INDEX(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_reorder_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  spline::NumericIndexVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::NumericIndexVector m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_reorder_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_reorder_dims" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' [index] '.");
  interpret_NumericIndex(m2);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->reorder_dims((spline::NumericIndexVector const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_reorder_dims'."
      "  Prototype:\n"
      "    REORDER_DIMS(self,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_einstein__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< int > m3 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_einstein",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_einstein" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->einstein((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_einstein'."
      "  Prototype:\n"
      "    EINSTEIN(self,[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_einstein__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  std::vector< int > m3 ;
  std::vector< int > m4 ;
  std::vector< int > m5 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_einstein",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_einstein" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  arg4 = &m4;
  if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "[" "int" "]" "'.");
  arg5 = &m5;
  if (!casadi::to_ptr(argv[4], &arg5)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 5 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->einstein((Tensor< casadi::SX > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::vector< int,std::allocator< int > > const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_einstein'."
      "  Prototype:\n"
      "    EINSTEIN(self,STensor,[int],[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_einstein (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_STensor_einstein__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::SX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          _v = casadi::to_ptr(argv[3], static_cast< std::vector<int> **>(0));
          if (_v) {
            _v = casadi::to_ptr(argv[4], static_cast< std::vector<int> **>(0));
            if (_v) {
              return _wrap_STensor_einstein__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_einstein'."
    "  Possible prototypes are:\n"
    "    EINSTEIN(self,[int],[int])\n"
    "    EINSTEIN(self,STensor,[int],[int],[int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_STensor_outer_product (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_outer_product",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_outer_product" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->outer_product((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_outer_product'."
      "  Prototype:\n"
      "    OUTER_PRODUCT(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_trailing_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_trailing_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_trailing_mtimes" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->trailing_mtimes((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_trailing_mtimes'."
      "  Prototype:\n"
      "    TRAILING_MTIMES(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_trailing_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_trailing_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_trailing_rmtimes" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->trailing_rmtimes((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_trailing_rmtimes'."
      "  Prototype:\n"
      "    TRAILING_RMTIMES(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_inner (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_inner",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_inner" "', argument " "1"" of type '" "Tensor< casadi::SX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->inner((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_inner'."
      "  Prototype:\n"
      "    INNER(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_partial_product (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  Tensor< casadi::SX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::SX > m2 ;
  mxArray * _out;
  Tensor< casadi::SX > result;
  
  if (!SWIG_check_num_args("STensor_partial_product",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_partial_product" "', argument " "1"" of type '" "Tensor< casadi::SX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "STensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->partial_product((Tensor< casadi::SX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "STensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_partial_product'."
      "  Prototype:\n"
      "    PARTIAL_PRODUCT(self,STensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::SX > *arg1 = (Tensor< casadi::SX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("STensor_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STensor_to_string" "', argument " "1"" of type '" "Tensor< casadi::SX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::SX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::SX > const *)arg1)->to_string();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_to_string'."
      "  Prototype:\n"
      "    TO_STRING(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_plus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("STensor_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_SX_Sg__plus__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_plus'."
      "  Prototype:\n"
      "    PLUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::SX> **>(0));
      if (_v) {
        return _wrap_STensor_plus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_STensor_plus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_plus'."
    "  Possible prototypes are:\n"
    "    PLUS(self,STensor)\n"
    "    PLUS(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_STensor_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("STensor_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_SX_Sg__minus__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_minus'."
      "  Prototype:\n"
      "    MINUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::SX> **>(0));
      if (_v) {
        return _wrap_STensor_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_STensor_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_minus'."
    "  Possible prototypes are:\n"
    "    MINUS(self,STensor)\n"
    "    MINUS(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_STensor_times (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("STensor_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_SX_Sg__times((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_times'."
      "  Prototype:\n"
      "    TIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("STensor_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_SX_Sg__mtimes__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_mtimes'."
      "  Prototype:\n"
      "    MTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_STensor_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::SX> **>(0));
      if (_v) {
        return _wrap_STensor_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_STensor_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_mtimes'."
    "  Possible prototypes are:\n"
    "    MTIMES(self,STensor)\n"
    "    MTIMES(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_STensor_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("STensor_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_SX_Sg__rmtimes((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'STensor_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_concat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Tensor< casadi::MX >,std::allocator< Tensor< casadi::MX > > > *arg1 = 0 ;
  spline::NumericIndex *arg2 = 0 ;
  std::vector< Tensor< casadi::MX > > m1 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_concat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[MTensor]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR concat((std::vector< Tensor< casadi::MX >,std::allocator< Tensor< casadi::MX > > > const &)*arg1,(int const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_concat'."
      "  Prototype:\n"
      "    CONCAT([MTensor],index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_repeat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  Tensor< casadi::MX > m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_repeat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "MTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR repeat((Tensor< casadi::MX > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_repeat'."
      "  Prototype:\n"
      "    REPEAT(MTensor,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_pack (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Tensor< casadi::MX >,std::allocator< Tensor< casadi::MX > > > *arg1 = 0 ;
  spline::NumericIndex *arg2 = 0 ;
  std::vector< Tensor< casadi::MX > > m1 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_pack",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[MTensor]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR pack((std::vector< Tensor< casadi::MX >,std::allocator< Tensor< casadi::MX > > > const &)*arg1,(int const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_pack'."
      "  Prototype:\n"
      "    PACK([MTensor],index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MTensor__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::MX *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  casadi::MX m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MTensor",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "MX" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = (Tensor< casadi::MX > *)new Tensor< casadi::MX >((casadi::MX const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MX_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MTensor'."
      "  Prototype:\n"
      "    MTENSOR(MX,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MTensor__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::MX *arg1 = 0 ;
  casadi::MX m1 ;
  mxArray * _out;
  Tensor< casadi::MX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "MX" "'.");
  {
    try {
      result = (Tensor< casadi::MX > *)new Tensor< casadi::MX >((casadi::MX const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MX_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MTensor'."
      "  Prototype:\n"
      "    MTENSOR(MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MTensor__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = 0 ;
  Tensor< casadi::MX > m1 ;
  mxArray * _out;
  Tensor< casadi::MX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "MTensor" "'.");
  {
    try {
      result = (Tensor< casadi::MX > *)new Tensor< casadi::MX >((Tensor< casadi::MX > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MX_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MTensor'."
      "  Prototype:\n"
      "    MTENSOR(MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MTensor__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  mxArray * _out;
  Tensor< casadi::MX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "double" "'.");
  {
    try {
      result = (Tensor< casadi::MX > *)new Tensor< casadi::MX >(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MX_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MTensor'."
      "  Prototype:\n"
      "    MTENSOR(double)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MTensor__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  Tensor< casadi::MX > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MTensor",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (Tensor< casadi::MX > *)new Tensor< casadi::MX >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TensorT_casadi__MX_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MTensor'."
      "  Prototype:\n"
      "    MTENSOR()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MTensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MTensor__SWIG_4(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< double **>(0));
    if (_v) {
      return _wrap_new_MTensor__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< Tensor<casadi::MX> **>(0));
    if (_v) {
      return _wrap_new_MTensor__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< casadi::MX **>(0));
    if (_v) {
      return _wrap_new_MTensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< casadi::MX **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        return _wrap_new_MTensor__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MTensor'."
    "  Possible prototypes are:\n"
    "    MTENSOR()\n"
    "    MTENSOR(double)\n"
    "    MTENSOR(MTensor)\n"
    "    MTENSOR(MX)\n"
    "    MTENSOR(MX,[int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_MTensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MTensor" "', argument " "1"" of type '" "Tensor< casadi::MX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_MTensor'."
      "  Prototype:\n"
      "    MTENSOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_is_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MTensor_is_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_is_scalar" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((Tensor< casadi::MX > const *)arg1)->is_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_is_scalar'."
      "  Prototype:\n"
      "    IS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_as_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("MTensor_as_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_as_scalar" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->as_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_as_scalar'."
      "  Prototype:\n"
      "    AS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_is_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MTensor_is_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_is_vector" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((Tensor< casadi::MX > const *)arg1)->is_vector();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_is_vector'."
      "  Prototype:\n"
      "    IS_VECTOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_as_vector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_as_vector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_as_vector" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->as_vector();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_as_vector'."
      "  Prototype:\n"
      "    AS_VECTOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("MTensor_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_data" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->data();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_data'."
      "  Prototype:\n"
      "    DATA(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_matrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("MTensor_matrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_matrix" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->matrix();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_matrix'."
      "  Prototype:\n"
      "    MATRIX(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_squeeze (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_squeeze",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_squeeze" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->squeeze();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_squeeze'."
      "  Prototype:\n"
      "    SQUEEZE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_shape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_shape",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_shape" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->shape((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_shape'."
      "  Prototype:\n"
      "    SHAPE(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_numel (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("MTensor_numel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_numel" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::MX > const *)arg1)->numel();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_numel'."
      "  Prototype:\n"
      "    NUMEL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_normalize_dim (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > m1 ;
  mxArray * _out;
  std::pair< int,int > result;
  
  if (!SWIG_check_num_args("MTensor_normalize_dim",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR normalize_dim((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[int,int]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_normalize_dim'."
      "  Prototype:\n"
      "    NORMALIZE_DIM([int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_binary_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::MX > m1 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("MTensor_binary_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "MTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR binary_dims((Tensor< casadi::MX > const &)*arg1,(Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_binary_dims'."
      "  Prototype:\n"
      "    BINARY_DIMS(MTensor,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_get_slice__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  AnySlice *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_get_slice",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_get_slice" "', argument " "1"" of type '" "Tensor< casadi::MX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->get_slice((AnySlice const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_get_slice'."
      "  Prototype:\n"
      "    GET_SLICE(self,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_get_slice__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  AnySlice *arg2 = 0 ;
  AnySlice *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  AnySlice m3 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_get_slice",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_get_slice" "', argument " "1"" of type '" "Tensor< casadi::MX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->get_slice((AnySlice const &)*arg2,(AnySlice const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_get_slice'."
      "  Prototype:\n"
      "    GET_SLICE(self,AnySlice,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_get_slice (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        return _wrap_MTensor_get_slice__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< AnySlice **>(0));
        if (_v) {
          return _wrap_MTensor_get_slice__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_get_slice'."
    "  Possible prototypes are:\n"
    "    GET_SLICE(self,AnySlice)\n"
    "    GET_SLICE(self,AnySlice,AnySlice)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_MTensor_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::MX *arg1 = 0 ;
  std::vector< int,std::allocator< int > > arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  casadi::MX m1 ;
  std::vector< int > m3 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("MTensor_get",argc,3,3,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "MX" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR get((casadi::MX const &)*arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_get'."
      "  Prototype:\n"
      "    GET(MX,[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  casadi::MX *arg1 = 0 ;
  std::vector< int,std::allocator< int > > arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  casadi::MX *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m3 ;
  casadi::MX m4 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MTensor_set",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_casadi__MX,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_set" "', argument " "1"" of type '" "casadi::MX &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MTensor_set" "', argument " "1"" of type '" "casadi::MX &""'"); 
  }
  arg1 = reinterpret_cast< casadi::MX * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  arg4 = &m4;
  if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "MX" "'.");
  {
    try {
      Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR set(*arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(casadi::MX const &)*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_set'."
      "  Prototype:\n"
      "    SET(MX,[int],[int],MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_n_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("MTensor_n_dims",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_n_dims" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::MX > const *)arg1)->n_dims();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_n_dims'."
      "  Prototype:\n"
      "    N_DIMS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_dims__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_check_num_args("MTensor_dims",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_dims" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (std::vector< int,std::allocator< int > > *) &((Tensor< casadi::MX > const *)arg1)->dims();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ptr(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_dims'."
      "  Prototype:\n"
      "    DIMS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_dims__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("MTensor_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_dims" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((Tensor< casadi::MX > const *)arg1)->dims(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_dims'."
      "  Prototype:\n"
      "    DIMS(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MTensor_dims__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_MTensor_dims__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_dims'."
    "  Possible prototypes are:\n"
    "    DIMS(self)\n"
    "    DIMS(self,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_MTensor_sym (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::string m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_sym",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "char" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = Tensor< casadi::MX >::SWIGTEMPLATEDISAMBIGUATOR sym((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_sym'."
      "  Prototype:\n"
      "    SYM(char,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_solve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_solve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_solve" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->solve((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_solve'."
      "  Prototype:\n"
      "    SOLVE(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_plus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_plus" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator +((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_plus'."
      "  Prototype:\n"
      "    PLUS(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_minus" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator -((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_minus'."
      "  Prototype:\n"
      "    MINUS(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_uminus" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator -();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_uminus'."
      "  Prototype:\n"
      "    UMINUS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_mtimes" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator *((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_le (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_le",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_le" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator <=((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_le'."
      "  Prototype:\n"
      "    LE(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_ge (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_ge",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_ge" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator >=((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_ge'."
      "  Prototype:\n"
      "    GE(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_eq" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator ==((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_eq'."
      "  Prototype:\n"
      "    EQ(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_paren" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->operator ()((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_paren'."
      "  Prototype:\n"
      "    PAREN(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  spline::NumericIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  spline::NumericIndex m3 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_transform" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' index '.");
  interpret_NumericIndex(*arg3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->transform((Tensor< casadi::MX > const &)*arg2,(spline::NumericIndex const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,MTensor,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_index (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_index",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_index" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->index((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_index'."
      "  Prototype:\n"
      "    INDEX(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_reorder_dims (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  spline::NumericIndexVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::NumericIndexVector m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_reorder_dims",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_reorder_dims" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' [index] '.");
  interpret_NumericIndex(m2);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->reorder_dims((spline::NumericIndexVector const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_reorder_dims'."
      "  Prototype:\n"
      "    REORDER_DIMS(self,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_einstein__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< int > m3 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_einstein",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_einstein" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->einstein((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_einstein'."
      "  Prototype:\n"
      "    EINSTEIN(self,[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_einstein__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  std::vector< int > m3 ;
  std::vector< int > m4 ;
  std::vector< int > m5 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_einstein",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_einstein" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  arg4 = &m4;
  if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "[" "int" "]" "'.");
  arg5 = &m5;
  if (!casadi::to_ptr(argv[4], &arg5)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 5 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->einstein((Tensor< casadi::MX > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::vector< int,std::allocator< int > > const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_einstein'."
      "  Prototype:\n"
      "    EINSTEIN(self,MTensor,[int],[int],[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_einstein (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_MTensor_einstein__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          _v = casadi::to_ptr(argv[3], static_cast< std::vector<int> **>(0));
          if (_v) {
            _v = casadi::to_ptr(argv[4], static_cast< std::vector<int> **>(0));
            if (_v) {
              return _wrap_MTensor_einstein__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_einstein'."
    "  Possible prototypes are:\n"
    "    EINSTEIN(self,[int],[int])\n"
    "    EINSTEIN(self,MTensor,[int],[int],[int])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_MTensor_outer_product (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_outer_product",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_outer_product" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->outer_product((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_outer_product'."
      "  Prototype:\n"
      "    OUTER_PRODUCT(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_trailing_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_trailing_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_trailing_mtimes" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->trailing_mtimes((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_trailing_mtimes'."
      "  Prototype:\n"
      "    TRAILING_MTIMES(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_trailing_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_trailing_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_trailing_rmtimes" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->trailing_rmtimes((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_trailing_rmtimes'."
      "  Prototype:\n"
      "    TRAILING_RMTIMES(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_inner (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_inner",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_inner" "', argument " "1"" of type '" "Tensor< casadi::MX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->inner((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_inner'."
      "  Prototype:\n"
      "    INNER(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_partial_product (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  Tensor< casadi::MX > result;
  
  if (!SWIG_check_num_args("MTensor_partial_product",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_partial_product" "', argument " "1"" of type '" "Tensor< casadi::MX > *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->partial_product((Tensor< casadi::MX > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_partial_product'."
      "  Prototype:\n"
      "    PARTIAL_PRODUCT(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Tensor< casadi::MX > *arg1 = (Tensor< casadi::MX > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MTensor_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TensorT_casadi__MX_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MTensor_to_string" "', argument " "1"" of type '" "Tensor< casadi::MX > const *""'"); 
  }
  arg1 = reinterpret_cast< Tensor< casadi::MX > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((Tensor< casadi::MX > const *)arg1)->to_string();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_to_string'."
      "  Prototype:\n"
      "    TO_STRING(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_plus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("MTensor_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_MX_Sg__plus__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_plus'."
      "  Prototype:\n"
      "    PLUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        return _wrap_MTensor_plus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_MTensor_plus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_plus'."
    "  Possible prototypes are:\n"
    "    PLUS(self,MTensor)\n"
    "    PLUS(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_MTensor_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("MTensor_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_MX_Sg__minus__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_minus'."
      "  Prototype:\n"
      "    MINUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        return _wrap_MTensor_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_MTensor_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_minus'."
    "  Possible prototypes are:\n"
    "    MINUS(self,MTensor)\n"
    "    MINUS(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_MTensor_times (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("MTensor_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_MX_Sg__times((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_times'."
      "  Prototype:\n"
      "    TIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("MTensor_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_MX_Sg__mtimes__SWIG_1((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_mtimes'."
      "  Prototype:\n"
      "    MTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_MTensor_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TensorT_casadi__MX_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        return _wrap_MTensor_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_MTensor_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_mtimes'."
    "  Possible prototypes are:\n"
    "    MTIMES(self,MTensor)\n"
    "    MTIMES(AnyTensor,AnyTensor)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_MTensor_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("MTensor_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = Tensor_Sl_casadi_MX_Sg__rmtimes((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MTensor_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< AnyScalar,std::allocator< AnyScalar > > result;
  
  if (!SWIG_check_num_args("Domain_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_data" "', argument " "1"" of type '" "spline::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Domain const *)arg1)->data();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[AnyScalar]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_data'."
      "  Prototype:\n"
      "    DATA(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Domain_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_type" "', argument " "1"" of type '" "spline::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Domain const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_intersection__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  spline::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Domain m2 ;
  mxArray * _out;
  spline::Domain result;
  
  if (!SWIG_check_num_args("Domain_intersection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_intersection" "', argument " "1"" of type '" "spline::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Domain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Domain const *)arg1)->intersection((spline::Domain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Domain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_intersection'."
      "  Prototype:\n"
      "    INTERSECTION(self,Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_intersection__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  spline::Interval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Interval m2 ;
  mxArray * _out;
  spline::Domain result;
  
  if (!SWIG_check_num_args("Domain_intersection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_intersection" "', argument " "1"" of type '" "spline::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "interval" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Domain const *)arg1)->intersection((spline::Interval const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Domain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_intersection'."
      "  Prototype:\n"
      "    INTERSECTION(self,interval)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_intersection (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Domain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Domain **>(0));
      if (_v) {
        return _wrap_Domain_intersection__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Domain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Interval **>(0));
      if (_v) {
        return _wrap_Domain_intersection__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_intersection'."
    "  Possible prototypes are:\n"
    "    INTERSECTION(self,Domain)\n"
    "    INTERSECTION(self,interval)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Domain_eq__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  spline::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Domain m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Domain_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_eq" "', argument " "1"" of type '" "spline::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Domain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::Domain const *)arg1)->operator ==((spline::Domain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_eq'."
      "  Prototype:\n"
      "    EQ(self,Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_eq__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  spline::Interval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Interval m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Domain_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Domain_eq" "', argument " "1"" of type '" "spline::Domain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "interval" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::Domain const *)arg1)->operator ==((spline::Interval const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_eq'."
      "  Prototype:\n"
      "    EQ(self,interval)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Domain_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Domain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Domain **>(0));
      if (_v) {
        return _wrap_Domain_eq__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Domain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Interval **>(0));
      if (_v) {
        return _wrap_Domain_eq__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Domain_eq'."
    "  Possible prototypes are:\n"
    "    EQ(self,Domain)\n"
    "    EQ(self,interval)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_new_Domain__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Domain *result = 0 ;
  
  if (!SWIG_check_num_args("new_Domain",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Domain *)new spline::Domain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Domain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Domain'."
      "  Prototype:\n"
      "    DOMAIN()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Domain__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = 0 ;
  spline::Domain m1 ;
  mxArray * _out;
  spline::Domain *result = 0 ;
  
  if (!SWIG_check_num_args("new_Domain",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Domain" "'.");
  {
    try {
      result = (spline::Domain *)new spline::Domain((spline::Domain const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Domain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Domain'."
      "  Prototype:\n"
      "    DOMAIN(Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Domain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Domain__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Domain **>(0));
    if (_v) {
      return _wrap_new_Domain__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Domain'."
    "  Possible prototypes are:\n"
    "    DOMAIN()\n"
    "    DOMAIN(Domain)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Domain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = (spline::Domain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Domain",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Domain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Domain" "', argument " "1"" of type '" "spline::Domain *""'"); 
  }
  arg1 = reinterpret_cast< spline::Domain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Domain'."
      "  Prototype:\n"
      "    DOMAIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Interval__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Interval *result = 0 ;
  
  if (!SWIG_check_num_args("new_Interval",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Interval *)new spline::Interval();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Interval, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Interval'."
      "  Prototype:\n"
      "    INTERVAL()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Interval__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = 0 ;
  spline::Domain m1 ;
  mxArray * _out;
  spline::Interval *result = 0 ;
  
  if (!SWIG_check_num_args("new_Interval",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Domain" "'.");
  {
    try {
      result = (spline::Interval *)new spline::Interval((spline::Domain const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Interval, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Interval'."
      "  Prototype:\n"
      "    INTERVAL(Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Interval__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyScalar *arg1 = 0 ;
  AnyScalar *arg2 = 0 ;
  AnyScalar m1 ;
  AnyScalar m2 ;
  mxArray * _out;
  spline::Interval *result = 0 ;
  
  if (!SWIG_check_num_args("new_Interval",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyScalar" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyScalar" "'.");
  {
    try {
      result = (spline::Interval *)new spline::Interval((AnyScalar const &)*arg1,(AnyScalar const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Interval, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Interval'."
      "  Prototype:\n"
      "    INTERVAL(AnyScalar,AnyScalar)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Interval__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< AnyScalar,std::allocator< AnyScalar > > *arg1 = 0 ;
  std::vector< AnyScalar > m1 ;
  mxArray * _out;
  spline::Interval *result = 0 ;
  
  if (!SWIG_check_num_args("new_Interval",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[AnyScalar]" "'.");
  {
    try {
      result = (spline::Interval *)new spline::Interval((std::vector< AnyScalar,std::allocator< AnyScalar > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Interval, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Interval'."
      "  Prototype:\n"
      "    INTERVAL([AnyScalar])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Interval_min (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Interval *arg1 = (spline::Interval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyScalar result;
  
  if (!SWIG_check_num_args("Interval_min",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Interval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_min" "', argument " "1"" of type '" "spline::Interval const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Interval * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Interval const *)arg1)->min();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyScalar" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Interval_min'."
      "  Prototype:\n"
      "    MIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Interval_max (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Interval *arg1 = (spline::Interval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyScalar result;
  
  if (!SWIG_check_num_args("Interval_max",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Interval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_max" "', argument " "1"" of type '" "spline::Interval const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Interval * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Interval const *)arg1)->max();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyScalar" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Interval_max'."
      "  Prototype:\n"
      "    MAX(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Interval__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Interval *arg1 = 0 ;
  spline::Interval m1 ;
  mxArray * _out;
  spline::Interval *result = 0 ;
  
  if (!SWIG_check_num_args("new_Interval",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "interval" "'.");
  {
    try {
      result = (spline::Interval *)new spline::Interval((spline::Interval const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Interval, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Interval'."
      "  Prototype:\n"
      "    INTERVAL(interval)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Interval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Interval__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< AnyScalar > **>(0));
    if (_v) {
      return _wrap_new_Interval__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Domain **>(0));
    if (_v) {
      return _wrap_new_Interval__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Interval **>(0));
    if (_v) {
      return _wrap_new_Interval__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyScalar **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyScalar **>(0));
      if (_v) {
        return _wrap_new_Interval__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Interval'."
    "  Possible prototypes are:\n"
    "    INTERVAL()\n"
    "    INTERVAL([AnyScalar])\n"
    "    INTERVAL(Domain)\n"
    "    INTERVAL(interval)\n"
    "    INTERVAL(AnyScalar,AnyScalar)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Interval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Interval *arg1 = (spline::Interval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Interval",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Interval, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Interval" "', argument " "1"" of type '" "spline::Interval *""'"); 
  }
  arg1 = reinterpret_cast< spline::Interval * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Interval'."
      "  Prototype:\n"
      "    INTERVAL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorDomain__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::TensorDomain *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorDomain",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::TensorDomain *)new spline::TensorDomain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorDomain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorDomain'."
      "  Prototype:\n"
      "    TENSORDOMAIN()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorDomain__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Domain *arg1 = 0 ;
  spline::Domain m1 ;
  mxArray * _out;
  spline::TensorDomain *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorDomain",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Domain" "'.");
  {
    try {
      result = (spline::TensorDomain *)new spline::TensorDomain((spline::Domain const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorDomain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorDomain'."
      "  Prototype:\n"
      "    TENSORDOMAIN(Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorDomain__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Domain,std::allocator< spline::Domain > > *arg1 = 0 ;
  std::vector< spline::Domain > m1 ;
  mxArray * _out;
  spline::TensorDomain *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorDomain",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Domain]" "'.");
  {
    try {
      result = (spline::TensorDomain *)new spline::TensorDomain((std::vector< spline::Domain,std::allocator< spline::Domain > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorDomain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorDomain'."
      "  Prototype:\n"
      "    TENSORDOMAIN([Domain])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorDomain__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Domain,std::allocator< spline::Domain > > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::vector< spline::Domain > m1 ;
  std::vector< std::string > m2 ;
  mxArray * _out;
  spline::TensorDomain *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorDomain",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Domain]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "char" "]" "'.");
  {
    try {
      result = (spline::TensorDomain *)new spline::TensorDomain((std::vector< spline::Domain,std::allocator< spline::Domain > > const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorDomain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorDomain'."
      "  Prototype:\n"
      "    TENSORDOMAIN([Domain],[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_arguments (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("TensorDomain_arguments",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_arguments" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->arguments();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "char" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_arguments'."
      "  Prototype:\n"
      "    ARGUMENTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_argument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TensorDomain_argument",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_argument" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->argument(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_argument'."
      "  Prototype:\n"
      "    ARGUMENT(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_indexArgument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorDomain_indexArgument",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_indexArgument" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "char" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorDomain const *)arg1)->indexArgument(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_indexArgument'."
      "  Prototype:\n"
      "    INDEXARGUMENT(self,char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_hasArguments (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TensorDomain_hasArguments",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_hasArguments" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::TensorDomain const *)arg1)->hasArguments();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_hasArguments'."
      "  Prototype:\n"
      "    HASARGUMENTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TensorDomain_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_type" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_n_domains (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorDomain_n_domains",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_n_domains" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorDomain const *)arg1)->n_domains();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_n_domains'."
      "  Prototype:\n"
      "    N_DOMAINS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_domains (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< spline::Domain,std::allocator< spline::Domain > > result;
  
  if (!SWIG_check_num_args("TensorDomain_domains",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_domains" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->domains();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[Domain]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_domains'."
      "  Prototype:\n"
      "    DOMAINS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_domain__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Domain result;
  
  if (!SWIG_check_num_args("TensorDomain_domain",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_domain" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->domain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Domain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_domain'."
      "  Prototype:\n"
      "    DOMAIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_domain__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string m2 ;
  mxArray * _out;
  spline::Domain result;
  
  if (!SWIG_check_num_args("TensorDomain_domain",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_domain" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "char" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->domain((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Domain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_domain'."
      "  Prototype:\n"
      "    DOMAIN(self,char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_domain__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  spline::Argument *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m2 ;
  mxArray * _out;
  spline::Domain result;
  
  if (!SWIG_check_num_args("TensorDomain_domain",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_domain" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "index" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->domain((spline::Argument const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Domain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_domain'."
      "  Prototype:\n"
      "    DOMAIN(self,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_domain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorDomain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TensorDomain_domain__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorDomain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Argument **>(0));
      if (_v) {
        return _wrap_TensorDomain_domain__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorDomain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::string **>(0));
      if (_v) {
        return _wrap_TensorDomain_domain__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_domain'."
    "  Possible prototypes are:\n"
    "    DOMAIN(self)\n"
    "    DOMAIN(self,index)\n"
    "    DOMAIN(self,char)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorDomain_intersection (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  mxArray * _out;
  spline::TensorDomain result;
  
  if (!SWIG_check_num_args("TensorDomain_intersection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_intersection" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorDomain const *)arg1)->intersection((spline::TensorDomain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorDomain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_intersection'."
      "  Prototype:\n"
      "    INTERSECTION(self,TensorDomain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorDomain_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TensorDomain_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorDomain_eq" "', argument " "1"" of type '" "spline::TensorDomain const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::TensorDomain const *)arg1)->operator ==((spline::TensorDomain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorDomain_eq'."
      "  Prototype:\n"
      "    EQ(self,TensorDomain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorDomain__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = 0 ;
  spline::TensorDomain m1 ;
  mxArray * _out;
  spline::TensorDomain *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorDomain",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "TensorDomain" "'.");
  {
    try {
      result = (spline::TensorDomain *)new spline::TensorDomain((spline::TensorDomain const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorDomain, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorDomain'."
      "  Prototype:\n"
      "    TENSORDOMAIN(TensorDomain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorDomain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_TensorDomain__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Domain **>(0));
    if (_v) {
      return _wrap_new_TensorDomain__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::TensorDomain **>(0));
    if (_v) {
      return _wrap_new_TensorDomain__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::Domain > **>(0));
    if (_v) {
      return _wrap_new_TensorDomain__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::Domain > **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<std::string> **>(0));
      if (_v) {
        return _wrap_new_TensorDomain__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorDomain'."
    "  Possible prototypes are:\n"
    "    TENSORDOMAIN()\n"
    "    TENSORDOMAIN(Domain)\n"
    "    TENSORDOMAIN(TensorDomain)\n"
    "    TENSORDOMAIN([Domain])\n"
    "    TENSORDOMAIN([Domain],[char])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_TensorDomain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorDomain *arg1 = (spline::TensorDomain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_TensorDomain",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorDomain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TensorDomain" "', argument " "1"" of type '" "spline::TensorDomain *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorDomain * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_TensorDomain'."
      "  Prototype:\n"
      "    TENSORDOMAIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Basis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("Basis_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_plus" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->operator +((spline::Basis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_plus'."
      "  Prototype:\n"
      "    PLUS(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Basis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("Basis_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_mtimes" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->operator *((spline::Basis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Basis_eval",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_eval" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->operator ()((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_eval'."
      "  Prototype:\n"
      "    EVAL(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_list_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Basis_list_eval",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_list_eval" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->list_eval((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_list_eval'."
      "  Prototype:\n"
      "    LIST_EVAL(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Basis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Basis_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_eq" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::Basis const *)arg1)->operator ==((spline::Basis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_eq'."
      "  Prototype:\n"
      "    EQ(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Basis_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_type" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_domain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Domain result;
  
  if (!SWIG_check_num_args("Basis_domain",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_domain" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->domain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Domain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_domain'."
      "  Prototype:\n"
      "    DOMAIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_evaluation_grid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Basis_evaluation_grid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_evaluation_grid" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->evaluation_grid();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_evaluation_grid'."
      "  Prototype:\n"
      "    EVALUATION_GRID(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_insert_knots (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  AnyVector *arg2 = 0 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyVector m2 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_insert_knots",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_insert_knots" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyVector" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->insert_knots((AnyVector const &)*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_insert_knots'."
      "  Prototype:\n"
      "    INSERT_KNOTS(self,AnyVector)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_midpoint_refinement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  int arg2 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_midpoint_refinement",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_midpoint_refinement" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->midpoint_refinement(arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_midpoint_refinement'."
      "  Prototype:\n"
      "    MIDPOINT_REFINEMENT(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_degree_elevation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  int arg2 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_degree_elevation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_degree_elevation" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->degree_elevation(arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_degree_elevation'."
      "  Prototype:\n"
      "    DEGREE_ELEVATION(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_kick_boundary (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Domain *arg2 = 0 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Domain m2 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_kick_boundary",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_kick_boundary" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Domain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->kick_boundary((spline::Domain const &)*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_project_to (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Basis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Basis_project_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_project_to" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->project_to((spline::Basis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_project_to'."
      "  Prototype:\n"
      "    PROJECT_TO(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_transform_to (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Basis *arg2 = 0 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_transform_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_transform_to" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->transform_to((spline::Basis const &)*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_transform_to'."
      "  Prototype:\n"
      "    TRANSFORM_TO(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_basis_functions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Basis_basis_functions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_basis_functions" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->basis_functions();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_basis_functions'."
      "  Prototype:\n"
      "    BASIS_FUNCTIONS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_dimension (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Basis_dimension",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_dimension" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::Basis const *)arg1)->dimension();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_dimension'."
      "  Prototype:\n"
      "    DIMENSION(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_n_inputs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Basis_n_inputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_n_inputs" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::Basis const *)arg1)->n_inputs();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_n_inputs'."
      "  Prototype:\n"
      "    N_INPUTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_derivative__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Basis result;
  
  arg2 = &m2;
  if (!SWIG_check_num_args("Basis_derivative",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_derivative" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->derivative(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg2);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_derivative'."
      "  Prototype:\n"
      "    DERIVATIVE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_derivative__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  int arg2 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_derivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_derivative" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->derivative(arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_derivative'."
      "  Prototype:\n"
      "    DERIVATIVE(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_derivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Basis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Basis_derivative__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Basis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_Basis_derivative__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_derivative'."
    "  Possible prototypes are:\n"
    "    DERIVATIVE(self)\n"
    "    DERIVATIVE(self,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Basis_antiderivative__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Basis result;
  
  arg2 = &m2;
  if (!SWIG_check_num_args("Basis_antiderivative",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_antiderivative" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->antiderivative(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg2);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_antiderivative'."
      "  Prototype:\n"
      "    ANTIDERIVATIVE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_antiderivative__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  int arg2 ;
  AnyTensor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m3 ;
  mxArray * _out;
  spline::Basis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("Basis_antiderivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_antiderivative" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->antiderivative(arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_antiderivative'."
      "  Prototype:\n"
      "    ANTIDERIVATIVE(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_antiderivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Basis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Basis_antiderivative__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Basis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_Basis_antiderivative__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_antiderivative'."
    "  Possible prototypes are:\n"
    "    ANTIDERIVATIVE(self)\n"
    "    ANTIDERIVATIVE(self,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Basis_integral (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  spline::Domain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Domain m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Basis_integral",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_integral" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Domain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->integral((spline::Domain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_integral'."
      "  Prototype:\n"
      "    INTEGRAL(self,Domain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Basis_const_coeff_tensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Basis_const_coeff_tensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Basis_const_coeff_tensor" "', argument " "1"" of type '" "spline::Basis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Basis const *)arg1)->const_coeff_tensor((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Basis_const_coeff_tensor'."
      "  Prototype:\n"
      "    CONST_COEFF_TENSOR(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Basis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Basis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Basis",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Basis *)new spline::Basis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Basis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Basis'."
      "  Prototype:\n"
      "    BASIS()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Basis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = 0 ;
  spline::Basis m1 ;
  mxArray * _out;
  spline::Basis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Basis",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Basis" "'.");
  {
    try {
      result = (spline::Basis *)new spline::Basis((spline::Basis const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Basis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Basis'."
      "  Prototype:\n"
      "    BASIS(Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Basis__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Basis **>(0));
    if (_v) {
      return _wrap_new_Basis__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Basis'."
    "  Possible prototypes are:\n"
    "    BASIS()\n"
    "    BASIS(Basis)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = (spline::Basis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Basis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Basis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Basis" "', argument " "1"" of type '" "spline::Basis *""'"); 
  }
  arg1 = reinterpret_cast< spline::Basis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Basis'."
      "  Prototype:\n"
      "    BASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_UnivariateBasis_degree (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::UnivariateBasis *arg1 = (spline::UnivariateBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("UnivariateBasis_degree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__UnivariateBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnivariateBasis_degree" "', argument " "1"" of type '" "spline::UnivariateBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::UnivariateBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::UnivariateBasis const *)arg1)->degree();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'UnivariateBasis_degree'."
      "  Prototype:\n"
      "    DEGREE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_UnivariateBasis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::UnivariateBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnivariateBasis",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::UnivariateBasis *)new spline::UnivariateBasis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__UnivariateBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_UnivariateBasis'."
      "  Prototype:\n"
      "    UNIVARIATEBASIS()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_UnivariateBasis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::UnivariateBasis *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::UnivariateBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnivariateBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__UnivariateBasis,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnivariateBasis" "', argument " "1"" of type '" "spline::UnivariateBasis const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnivariateBasis" "', argument " "1"" of type '" "spline::UnivariateBasis const &""'"); 
  }
  arg1 = reinterpret_cast< spline::UnivariateBasis * >(argp1);
  {
    try {
      result = (spline::UnivariateBasis *)new spline::UnivariateBasis((spline::UnivariateBasis const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__UnivariateBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_UnivariateBasis'."
      "  Prototype:\n"
      "    UNIVARIATEBASIS(UnivariateBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_UnivariateBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_UnivariateBasis__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__UnivariateBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnivariateBasis__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_UnivariateBasis'."
    "  Possible prototypes are:\n"
    "    UNIVARIATEBASIS()\n"
    "    UNIVARIATEBASIS(UnivariateBasis)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_UnivariateBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::UnivariateBasis *arg1 = (spline::UnivariateBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_UnivariateBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__UnivariateBasis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnivariateBasis" "', argument " "1"" of type '" "spline::UnivariateBasis *""'"); 
  }
  arg1 = reinterpret_cast< spline::UnivariateBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_UnivariateBasis'."
      "  Prototype:\n"
      "    UNIVARIATEBASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MonomialBasis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  mxArray * _out;
  spline::MonomialBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_MonomialBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "int" "'.");
  {
    try {
      result = (spline::MonomialBasis *)new spline::MonomialBasis(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__MonomialBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MonomialBasis'."
      "  Prototype:\n"
      "    MONOMIALBASIS(int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MonomialBasis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::MonomialBasis *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::MonomialBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_MonomialBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__MonomialBasis,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonomialBasis" "', argument " "1"" of type '" "spline::MonomialBasis const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonomialBasis" "', argument " "1"" of type '" "spline::MonomialBasis const &""'"); 
  }
  arg1 = reinterpret_cast< spline::MonomialBasis * >(argp1);
  {
    try {
      result = (spline::MonomialBasis *)new spline::MonomialBasis((spline::MonomialBasis const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__MonomialBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MonomialBasis'."
      "  Prototype:\n"
      "    MONOMIALBASIS(MonomialBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_MonomialBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__MonomialBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MonomialBasis__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< int **>(0));
    if (_v) {
      return _wrap_new_MonomialBasis__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MonomialBasis'."
    "  Possible prototypes are:\n"
    "    MONOMIALBASIS(MonomialBasis)\n"
    "    MONOMIALBASIS(int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_MonomialBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::MonomialBasis *arg1 = (spline::MonomialBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MonomialBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__MonomialBasis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonomialBasis" "', argument " "1"" of type '" "spline::MonomialBasis *""'"); 
  }
  arg1 = reinterpret_cast< spline::MonomialBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_MonomialBasis'."
      "  Prototype:\n"
      "    MONOMIALBASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_BSplineBasis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyVector *arg1 = 0 ;
  int arg2 ;
  AnyVector m1 ;
  mxArray * _out;
  spline::BSplineBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_BSplineBasis",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyVector" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  {
    try {
      result = (spline::BSplineBasis *)new spline::BSplineBasis((AnyVector const &)*arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__BSplineBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_BSplineBasis'."
      "  Prototype:\n"
      "    BSPLINEBASIS(AnyVector,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_BSplineBasis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyVector *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  AnyVector m1 ;
  mxArray * _out;
  spline::BSplineBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_BSplineBasis",argc,3,3,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyVector" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  if (!casadi::to_val(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "int" "'.");
  {
    try {
      result = (spline::BSplineBasis *)new spline::BSplineBasis((AnyVector const &)*arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__BSplineBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_BSplineBasis'."
      "  Prototype:\n"
      "    BSPLINEBASIS(AnyVector,int,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_BSplineBasis_from_single (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyVector *arg1 = 0 ;
  int arg2 ;
  AnyVector m1 ;
  mxArray * _out;
  SwigValueWrapper< spline::BSplineBasis > result;
  
  if (!SWIG_check_num_args("BSplineBasis_from_single",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyVector" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  {
    try {
      result = spline::BSplineBasis::from_single((AnyVector const &)*arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new spline::BSplineBasis(static_cast< const spline::BSplineBasis& >(result))), SWIGTYPE_p_spline__BSplineBasis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BSplineBasis_from_single'."
      "  Prototype:\n"
      "    FROM_SINGLE(AnyVector,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_BSplineBasis_knots (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::BSplineBasis *arg1 = (spline::BSplineBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< AnyScalar,std::allocator< AnyScalar > > result;
  
  if (!SWIG_check_num_args("BSplineBasis_knots",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__BSplineBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSplineBasis_knots" "', argument " "1"" of type '" "spline::BSplineBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::BSplineBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::BSplineBasis const *)arg1)->knots();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[AnyScalar]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BSplineBasis_knots'."
      "  Prototype:\n"
      "    KNOTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_BSplineBasis_greville (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::BSplineBasis *arg1 = (spline::BSplineBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< AnyScalar,std::allocator< AnyScalar > > result;
  
  if (!SWIG_check_num_args("BSplineBasis_greville",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__BSplineBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BSplineBasis_greville" "', argument " "1"" of type '" "spline::BSplineBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::BSplineBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::BSplineBasis const *)arg1)->greville();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[AnyScalar]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BSplineBasis_greville'."
      "  Prototype:\n"
      "    GREVILLE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_BSplineBasis__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::BSplineBasis *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::BSplineBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_BSplineBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__BSplineBasis,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BSplineBasis" "', argument " "1"" of type '" "spline::BSplineBasis const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BSplineBasis" "', argument " "1"" of type '" "spline::BSplineBasis const &""'"); 
  }
  arg1 = reinterpret_cast< spline::BSplineBasis * >(argp1);
  {
    try {
      result = (spline::BSplineBasis *)new spline::BSplineBasis((spline::BSplineBasis const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__BSplineBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_BSplineBasis'."
      "  Prototype:\n"
      "    BSPLINEBASIS(BSplineBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_BSplineBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__BSplineBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BSplineBasis__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyVector **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_new_BSplineBasis__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyVector **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< int **>(0));
        if (_v) {
          return _wrap_new_BSplineBasis__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_BSplineBasis'."
    "  Possible prototypes are:\n"
    "    BSPLINEBASIS(BSplineBasis)\n"
    "    BSPLINEBASIS(AnyVector,int)\n"
    "    BSPLINEBASIS(AnyVector,int,int)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_BSplineBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::BSplineBasis *arg1 = (spline::BSplineBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BSplineBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__BSplineBasis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BSplineBasis" "', argument " "1"" of type '" "spline::BSplineBasis *""'"); 
  }
  arg1 = reinterpret_cast< spline::BSplineBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_BSplineBasis'."
      "  Prototype:\n"
      "    BSPLINEBASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = 0 ;
  spline::Basis m1 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Basis" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((spline::Basis const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS(Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Basis *arg1 = 0 ;
  std::string *arg2 = 0 ;
  spline::Basis m1 ;
  std::string m2 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Basis" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "char" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((spline::Basis const &)*arg1,(std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS(Basis,char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  spline::TensorBasis m1 ;
  std::vector< std::string > m2 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "TensorBasis" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "char" "]" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((spline::TensorBasis const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS(TensorBasis,[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Basis,std::allocator< spline::Basis > > *arg1 = 0 ;
  std::vector< spline::Basis > m1 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Basis]" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((std::vector< spline::Basis,std::allocator< spline::Basis > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS([Basis])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_5 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Basis,std::allocator< spline::Basis > > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::vector< spline::Basis > m1 ;
  std::vector< std::string > m2 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Basis]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "char" "]" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((std::vector< spline::Basis,std::allocator< spline::Basis > > const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS([Basis],[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::TensorBasis,std::allocator< spline::TensorBasis > > *arg1 = 0 ;
  std::vector< spline::TensorBasis > m1 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[TensorBasis]" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((std::vector< spline::TensorBasis,std::allocator< spline::TensorBasis > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS([TensorBasis])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TensorBasis_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_type" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_n_basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorBasis_n_basis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_n_basis" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorBasis const *)arg1)->n_basis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_n_basis'."
      "  Prototype:\n"
      "    N_BASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_n_inputs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorBasis_n_inputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_n_inputs" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorBasis const *)arg1)->n_inputs();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_n_inputs'."
      "  Prototype:\n"
      "    N_INPUTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_n_inputs_list (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("TensorBasis_n_inputs_list",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_n_inputs_list" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->n_inputs_list();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_n_inputs_list'."
      "  Prototype:\n"
      "    N_INPUTS_LIST(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_dimension (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("TensorBasis_dimension",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_dimension" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->dimension();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_dimension'."
      "  Prototype:\n"
      "    DIMENSION(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_arguments (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("TensorBasis_arguments",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_arguments" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->arguments();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "char" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_arguments'."
      "  Prototype:\n"
      "    ARGUMENTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_arguments_temp (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< spline::Argument,std::allocator< spline::Argument > > result;
  
  if (!SWIG_check_num_args("TensorBasis_arguments_temp",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_arguments_temp" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->arguments_temp();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[index]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_arguments_temp'."
      "  Prototype:\n"
      "    ARGUMENTS_TEMP(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_argument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TensorBasis_argument",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_argument" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->argument(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_argument'."
      "  Prototype:\n"
      "    ARGUMENT(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_index_argument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::Argument *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m2 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorBasis_index_argument",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_index_argument" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "index" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorBasis const *)arg1)->index_argument((spline::Argument const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_index_argument'."
      "  Prototype:\n"
      "    INDEX_ARGUMENT(self,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_indexArgument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string m2 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorBasis_indexArgument",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_indexArgument" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "char" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorBasis const *)arg1)->indexArgument((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_indexArgument'."
      "  Prototype:\n"
      "    INDEXARGUMENT(self,char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_hasArguments (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TensorBasis_hasArguments",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_hasArguments" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::TensorBasis const *)arg1)->hasArguments();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_hasArguments'."
      "  Prototype:\n"
      "    HASARGUMENTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_valid_argument (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::Argument *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TensorBasis_valid_argument",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_valid_argument" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "index" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::TensorBasis const *)arg1)->valid_argument((spline::Argument const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_valid_argument'."
      "  Prototype:\n"
      "    VALID_ARGUMENT(self,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_valid_argument_list (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< spline::Argument > m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TensorBasis_valid_argument_list",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_valid_argument_list" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::TensorBasis const *)arg1)->valid_argument_list((std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_valid_argument_list'."
      "  Prototype:\n"
      "    VALID_ARGUMENT_LIST(self,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_domain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::TensorDomain result;
  
  if (!SWIG_check_num_args("TensorBasis_domain",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_domain" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->domain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorDomain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_domain'."
      "  Prototype:\n"
      "    DOMAIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_basis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("TensorBasis_basis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_basis" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->basis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_basis'."
      "  Prototype:\n"
      "    BASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_basis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string m2 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("TensorBasis_basis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_basis" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "char" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->basis((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_basis'."
      "  Prototype:\n"
      "    BASIS(self,char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_basis__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::Argument *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m2 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("TensorBasis_basis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_basis" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "index" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->basis((spline::Argument const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_basis'."
      "  Prototype:\n"
      "    BASIS(self,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TensorBasis_basis__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Argument **>(0));
      if (_v) {
        return _wrap_TensorBasis_basis__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::string **>(0));
      if (_v) {
        return _wrap_TensorBasis_basis__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_basis'."
    "  Possible prototypes are:\n"
    "    BASIS(self)\n"
    "    BASIS(self,index)\n"
    "    BASIS(self,char)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorBasis_bases (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< spline::Basis,std::allocator< spline::Basis > > result;
  
  if (!SWIG_check_num_args("TensorBasis_bases",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_bases" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->bases();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[Basis]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_bases'."
      "  Prototype:\n"
      "    BASES(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_add_basis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  if (!SWIG_check_num_args("TensorBasis_add_basis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_add_basis" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->add_basis(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_add_basis'."
      "  Prototype:\n"
      "    ADD_BASIS(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_add_basis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::Basis arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  if (!SWIG_check_num_args("TensorBasis_add_basis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_add_basis" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->add_basis(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_add_basis'."
      "  Prototype:\n"
      "    ADD_BASIS(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_add_basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorBasis **>(0));
      if (_v) {
        return _wrap_TensorBasis_add_basis__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Basis **>(0));
      if (_v) {
        return _wrap_TensorBasis_add_basis__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_add_basis'."
    "  Possible prototypes are:\n"
    "    ADD_BASIS(self,TensorBasis)\n"
    "    ADD_BASIS(self,Basis)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorBasis_substitute_bases (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg2 = 0 ;
  std::vector< spline::Basis,std::allocator< spline::Basis > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< spline::Argument > m2 ;
  std::vector< spline::Basis > m3 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  if (!SWIG_check_num_args("TensorBasis_substitute_bases",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_substitute_bases" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[index]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[Basis]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->substitute_bases((std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg2,(std::vector< spline::Basis,std::allocator< spline::Basis > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_substitute_bases'."
      "  Prototype:\n"
      "    SUBSTITUTE_BASES(self,[index],[Basis])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  if (!SWIG_check_num_args("TensorBasis_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_plus" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->operator +((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_plus'."
      "  Prototype:\n"
      "    PLUS(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  if (!SWIG_check_num_args("TensorBasis_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_mtimes" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->operator *((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< AnyScalar,std::allocator< AnyScalar > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > const &arg3_defvalue = {
    
  } ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = (std::vector< spline::Argument,std::allocator< spline::Argument > > *) &arg3_defvalue ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< AnyScalar > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("TensorBasis_eval",argc,4,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_eval" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[AnyScalar]" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  }
  if (3<argc) {
    if (!casadi::to_val(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "bool" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->operator ()((std::vector< AnyScalar,std::allocator< AnyScalar > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_eval'."
      "  Prototype:\n"
      "    EVAL(self,[AnyScalar],[index],bool)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_grid_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > const &arg3_defvalue = {
    
  } ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = (std::vector< spline::Argument,std::allocator< spline::Argument > > *) &arg3_defvalue ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< AnyTensor > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("TensorBasis_grid_eval",argc,4,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_grid_eval" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[AnyTensor]" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  }
  if (3<argc) {
    if (!casadi::to_val(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "bool" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->grid_eval((std::vector< AnyTensor,std::allocator< AnyTensor > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_grid_eval'."
      "  Prototype:\n"
      "    GRID_EVAL(self,[AnyTensor],[index],bool)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_evaluation_grid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< AnyTensor,std::allocator< AnyTensor > > result;
  
  if (!SWIG_check_num_args("TensorBasis_evaluation_grid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_evaluation_grid" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->evaluation_grid();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[AnyTensor]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_evaluation_grid'."
      "  Prototype:\n"
      "    EVALUATION_GRID(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TensorBasis_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_eq" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::TensorBasis const *)arg1)->operator ==((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_eq'."
      "  Prototype:\n"
      "    EQ(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_totalNumberBasisFunctions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TensorBasis_totalNumberBasisFunctions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_totalNumberBasisFunctions" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::TensorBasis const *)arg1)->totalNumberBasisFunctions();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_totalNumberBasisFunctions'."
      "  Prototype:\n"
      "    TOTALNUMBERBASISFUNCTIONS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_const_coeff_tensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("TensorBasis_const_coeff_tensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_const_coeff_tensor" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->const_coeff_tensor((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_const_coeff_tensor'."
      "  Prototype:\n"
      "    CONST_COEFF_TENSOR(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_insert_knots (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< AnyVector,std::allocator< AnyVector > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< AnyVector > m2 ;
  std::vector< spline::Argument > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_insert_knots",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_insert_knots" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[AnyVector]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->insert_knots((std::vector< AnyVector,std::allocator< AnyVector > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_insert_knots'."
      "  Prototype:\n"
      "    INSERT_KNOTS(self,[AnyVector],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_midpoint_refinement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_midpoint_refinement",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_midpoint_refinement" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->midpoint_refinement((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_midpoint_refinement'."
      "  Prototype:\n"
      "    MIDPOINT_REFINEMENT(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_degree_elevation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_degree_elevation",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_degree_elevation" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->degree_elevation((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_degree_elevation'."
      "  Prototype:\n"
      "    DEGREE_ELEVATION(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_kick_boundary__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  std::vector< std::string > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_kick_boundary",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_kick_boundary" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "char" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->kick_boundary((spline::TensorDomain const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,TensorDomain,[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_kick_boundary__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  spline::NumericIndexVector *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  spline::NumericIndexVector m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_kick_boundary",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_kick_boundary" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' [index] '.");
  interpret_NumericIndex(m3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->kick_boundary((spline::TensorDomain const &)*arg2,(spline::NumericIndexVector const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,TensorDomain,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_kick_boundary (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<std::string> **>(0));
        if (_v) {
          return _wrap_TensorBasis_kick_boundary__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_TensorBasis_kick_boundary__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_kick_boundary'."
    "  Possible prototypes are:\n"
    "    KICK_BOUNDARY(self,TensorDomain,[char])\n"
    "    KICK_BOUNDARY(self,TensorDomain,[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorBasis_derivative__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg2 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< spline::Argument > m2 ;
  std::vector< AnyTensor > m3 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("TensorBasis_derivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_derivative" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->derivative((std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_derivative'."
      "  Prototype:\n"
      "    DERIVATIVE(self,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_derivative__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_derivative",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_derivative" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->derivative((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_derivative'."
      "  Prototype:\n"
      "    DERIVATIVE(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_derivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector< spline::Argument > **>(0));
      if (_v) {
        return _wrap_TensorBasis_derivative__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_TensorBasis_derivative__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_derivative'."
    "  Possible prototypes are:\n"
    "    DERIVATIVE(self,[index])\n"
    "    DERIVATIVE(self,[int],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorBasis_antiderivative__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg2 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< spline::Argument > m2 ;
  std::vector< AnyTensor > m3 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("TensorBasis_antiderivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_antiderivative" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->antiderivative((std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_antiderivative'."
      "  Prototype:\n"
      "    ANTIDERIVATIVE(self,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_antiderivative__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_antiderivative",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_antiderivative" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->antiderivative((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_antiderivative'."
      "  Prototype:\n"
      "    ANTIDERIVATIVE(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_antiderivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector< spline::Argument > **>(0));
      if (_v) {
        return _wrap_TensorBasis_antiderivative__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_TensorBasis_antiderivative__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_antiderivative'."
    "  Possible prototypes are:\n"
    "    ANTIDERIVATIVE(self,[index])\n"
    "    ANTIDERIVATIVE(self,[int],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorBasis_integral (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  mxArray * _out;
  std::vector< AnyTensor,std::allocator< AnyTensor > > result;
  
  if (!SWIG_check_num_args("TensorBasis_integral",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_integral" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->integral((spline::TensorDomain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[AnyTensor]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_integral'."
      "  Prototype:\n"
      "    INTEGRAL(self,TensorDomain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_partial_integral__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  std::vector< std::string > m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_partial_integral",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_partial_integral" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "char" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->partial_integral((spline::TensorDomain const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_partial_integral'."
      "  Prototype:\n"
      "    PARTIAL_INTEGRAL(self,TensorDomain,[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_partial_integral__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  spline::NumericIndexVector *arg3 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  spline::NumericIndexVector m3 ;
  std::vector< AnyTensor > m4 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg4 = &m4;
  if (!SWIG_check_num_args("TensorBasis_partial_integral",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_partial_integral" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' [index] '.");
  interpret_NumericIndex(m3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->partial_integral((spline::TensorDomain const &)*arg2,(spline::NumericIndexVector const &)*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg4);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_partial_integral'."
      "  Prototype:\n"
      "    PARTIAL_INTEGRAL(self,TensorDomain,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_partial_integral (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<std::string> **>(0));
        if (_v) {
          return _wrap_TensorBasis_partial_integral__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__TensorBasis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_TensorBasis_partial_integral__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_partial_integral'."
    "  Possible prototypes are:\n"
    "    PARTIAL_INTEGRAL(self,TensorDomain,[char])\n"
    "    PARTIAL_INTEGRAL(self,TensorDomain,[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_TensorBasis_project_to (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("TensorBasis_project_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_project_to" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->project_to((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_project_to'."
      "  Prototype:\n"
      "    PROJECT_TO(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_transform_to (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  std::vector< AnyTensor > m3 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  arg3 = &m3;
  if (!SWIG_check_num_args("TensorBasis_transform_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_transform_to" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->transform_to((spline::TensorBasis const &)*arg2,*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  if (--resc>=0) *resv++ = casadi::from_ptr(arg3);
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_transform_to'."
      "  Prototype:\n"
      "    TRANSFORM_TO(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_basis_functions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("TensorBasis_basis_functions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_basis_functions" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->basis_functions();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_basis_functions'."
      "  Prototype:\n"
      "    BASIS_FUNCTIONS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_TensorBasis_get_permutation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("TensorBasis_get_permutation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBasis_get_permutation" "', argument " "1"" of type '" "spline::TensorBasis const *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::TensorBasis const *)arg1)->get_permutation((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TensorBasis_get_permutation'."
      "  Prototype:\n"
      "    GET_PERMUTATION(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis__SWIG_7 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = 0 ;
  spline::TensorBasis m1 ;
  mxArray * _out;
  spline::TensorBasis *result = 0 ;
  
  if (!SWIG_check_num_args("new_TensorBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "TensorBasis" "'.");
  {
    try {
      result = (spline::TensorBasis *)new spline::TensorBasis((spline::TensorBasis const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__TensorBasis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS(TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_TensorBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_TensorBasis__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Basis **>(0));
    if (_v) {
      return _wrap_new_TensorBasis__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::TensorBasis **>(0));
    if (_v) {
      return _wrap_new_TensorBasis__SWIG_7(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::TensorBasis > **>(0));
    if (_v) {
      return _wrap_new_TensorBasis__SWIG_6(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::Basis > **>(0));
    if (_v) {
      return _wrap_new_TensorBasis__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::TensorBasis **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<std::string> **>(0));
      if (_v) {
        return _wrap_new_TensorBasis__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Basis **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::string **>(0));
      if (_v) {
        return _wrap_new_TensorBasis__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector< spline::Basis > **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<std::string> **>(0));
      if (_v) {
        return _wrap_new_TensorBasis__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TensorBasis'."
    "  Possible prototypes are:\n"
    "    TENSORBASIS()\n"
    "    TENSORBASIS(Basis)\n"
    "    TENSORBASIS(TensorBasis)\n"
    "    TENSORBASIS([TensorBasis])\n"
    "    TENSORBASIS([Basis])\n"
    "    TENSORBASIS(TensorBasis,[char])\n"
    "    TENSORBASIS(Basis,char)\n"
    "    TENSORBASIS([Basis],[char])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_TensorBasis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = (spline::TensorBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_TensorBasis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__TensorBasis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TensorBasis" "', argument " "1"" of type '" "spline::TensorBasis *""'"); 
  }
  arg1 = reinterpret_cast< spline::TensorBasis * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_TensorBasis'."
      "  Prototype:\n"
      "    TENSORBASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Coefficient__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Coefficient *result = 0 ;
  
  if (!SWIG_check_num_args("new_Coefficient",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Coefficient *)new spline::Coefficient();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Coefficient, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Coefficient'."
      "  Prototype:\n"
      "    COEFFICIENT()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Coefficient__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor m1 ;
  mxArray * _out;
  spline::Coefficient *result = 0 ;
  
  if (!SWIG_check_num_args("new_Coefficient",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  {
    try {
      result = (spline::Coefficient *)new spline::Coefficient((AnyTensor const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Coefficient, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Coefficient'."
      "  Prototype:\n"
      "    COEFFICIENT(AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Coefficient__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double > m1 ;
  mxArray * _out;
  spline::Coefficient *result = 0 ;
  
  if (!SWIG_check_num_args("new_Coefficient",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[double]" "'.");
  {
    try {
      result = (spline::Coefficient *)new spline::Coefficient((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Coefficient, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Coefficient'."
      "  Prototype:\n"
      "    COEFFICIENT([double])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_shape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("Coefficient_shape",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_shape" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->shape();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_shape'."
      "  Prototype:\n"
      "    SHAPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_dimension (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("Coefficient_dimension",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_dimension" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->dimension();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_dimension'."
      "  Prototype:\n"
      "    DIMENSION(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Coefficient_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_type" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_uminus" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->operator -();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_uminus'."
      "  Prototype:\n"
      "    UMINUS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_data__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Coefficient_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_data" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->data();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_data'."
      "  Prototype:\n"
      "    DATA(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_data__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  spline::NumericIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::NumericIndex m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Coefficient_data",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_data" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type ' index '.");
  interpret_NumericIndex(*arg2);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->data((spline::NumericIndex const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_data'."
      "  Prototype:\n"
      "    DATA(self,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Coefficient_data__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        return _wrap_Coefficient_data__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_data'."
    "  Possible prototypes are:\n"
    "    DATA(self)\n"
    "    DATA(self,index)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Coefficient_transform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Coefficient_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_transform" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->transform((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_transform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  AnyTensor *arg2 = 0 ;
  spline::NumericIndexVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  spline::NumericIndexVector m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Coefficient_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_transform" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' [index] '.");
  interpret_NumericIndex(m3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->transform((AnyTensor const &)*arg2,(spline::NumericIndexVector const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,AnyTensor,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_transform__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  AnyTensor *arg2 = 0 ;
  spline::NumericIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  spline::NumericIndex m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Coefficient_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_transform" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' index '.");
  interpret_NumericIndex(*arg3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->transform((AnyTensor const &)*arg2,(spline::NumericIndex const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,AnyTensor,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_transform__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg2 = 0 ;
  spline::NumericIndexVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< AnyTensor > m2 ;
  spline::NumericIndexVector m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Coefficient_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_transform" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[AnyTensor]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' [index] '.");
  interpret_NumericIndex(m3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->transform((std::vector< AnyTensor,std::allocator< AnyTensor > > const &)*arg2,(spline::NumericIndexVector const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_transform'."
      "  Prototype:\n"
      "    TRANSFORM(self,[AnyTensor],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Coefficient_transform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< int **>(0));
        if (_v) {
          return _wrap_Coefficient_transform__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_Coefficient_transform__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<AnyTensor> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_Coefficient_transform__SWIG_3(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_transform'."
    "  Possible prototypes are:\n"
    "    TRANSFORM(self,AnyTensor)\n"
    "    TRANSFORM(self,AnyTensor,index)\n"
    "    TRANSFORM(self,AnyTensor,[index])\n"
    "    TRANSFORM(self,[AnyTensor],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Coefficient_transpose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_transpose",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_transpose" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->transpose();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_transpose'."
      "  Prototype:\n"
      "    TRANSPOSE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_rm_direction (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  std::vector< spline::NumericIndex,std::allocator< spline::NumericIndex > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_rm_direction",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_rm_direction" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->rm_direction((std::vector< spline::NumericIndex,std::allocator< spline::NumericIndex > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_rm_direction'."
      "  Prototype:\n"
      "    RM_DIRECTION(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_reshape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_reshape",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_reshape" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->reshape((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_reshape'."
      "  Prototype:\n"
      "    RESHAPE(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_trace (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_trace",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_trace" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->trace();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_trace'."
      "  Prototype:\n"
      "    TRACE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_to_matrix_valued (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_to_matrix_valued",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_to_matrix_valued" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Coefficient const *)arg1)->to_matrix_valued();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_to_matrix_valued'."
      "  Prototype:\n"
      "    TO_MATRIX_VALUED(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_cat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::NumericIndex *arg1 = 0 ;
  std::vector< spline::Coefficient,std::allocator< spline::Coefficient > > *arg2 = 0 ;
  spline::NumericIndex m1 ;
  std::vector< spline::Coefficient > m2 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Coefficient_cat",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type ' index '.");
  interpret_NumericIndex(*arg1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[Coefficient]" "'.");
  {
    try {
      result = spline::Coefficient::cat((int const &)*arg1,(std::vector< spline::Coefficient,std::allocator< spline::Coefficient > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_cat'."
      "  Prototype:\n"
      "    CAT(index,[Coefficient])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Coefficient_is_true_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Coefficient_is_true_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_is_true_scalar" "', argument " "1"" of type '" "spline::Coefficient const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::Coefficient const *)arg1)->is_true_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Coefficient_is_true_scalar'."
      "  Prototype:\n"
      "    IS_TRUE_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Coefficient__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = 0 ;
  spline::Coefficient m1 ;
  mxArray * _out;
  spline::Coefficient *result = 0 ;
  
  if (!SWIG_check_num_args("new_Coefficient",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Coefficient" "'.");
  {
    try {
      result = (spline::Coefficient *)new spline::Coefficient((spline::Coefficient const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Coefficient, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Coefficient'."
      "  Prototype:\n"
      "    COEFFICIENT(Coefficient)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Coefficient (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Coefficient__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<double> **>(0));
    if (_v) {
      return _wrap_new_Coefficient__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      return _wrap_new_Coefficient__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Coefficient **>(0));
    if (_v) {
      return _wrap_new_Coefficient__SWIG_3(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Coefficient'."
    "  Possible prototypes are:\n"
    "    COEFFICIENT()\n"
    "    COEFFICIENT([double])\n"
    "    COEFFICIENT(AnyTensor)\n"
    "    COEFFICIENT(Coefficient)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Coefficient (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Coefficient *arg1 = (spline::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Coefficient",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Coefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coefficient" "', argument " "1"" of type '" "spline::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< spline::Coefficient * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Coefficient'."
      "  Prototype:\n"
      "    COEFFICIENT(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Function__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Function *result = 0 ;
  
  if (!SWIG_check_num_args("new_Function",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Function *)new spline::Function();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Function, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Function'."
      "  Prototype:\n"
      "    FUNCTION()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Function__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::TensorBasis *arg1 = 0 ;
  spline::Coefficient *arg2 = 0 ;
  spline::TensorBasis m1 ;
  spline::Coefficient m2 ;
  mxArray * _out;
  spline::Function *result = 0 ;
  
  if (!SWIG_check_num_args("new_Function",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "TensorBasis" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  {
    try {
      result = (spline::Function *)new spline::Function((spline::TensorBasis const &)*arg1,(spline::Coefficient const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Function, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Function'."
      "  Prototype:\n"
      "    FUNCTION(TensorBasis,Coefficient)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Function__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor m1 ;
  mxArray * _out;
  spline::Function *result = 0 ;
  
  if (!SWIG_check_num_args("new_Function",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  {
    try {
      result = (spline::Function *)new spline::Function((AnyTensor const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Function, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Function'."
      "  Prototype:\n"
      "    FUNCTION(AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Function__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyScalar *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  AnyScalar m1 ;
  std::vector< int > m2 ;
  mxArray * _out;
  spline::Function *result = 0 ;
  
  if (!SWIG_check_num_args("new_Function",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyScalar" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  {
    try {
      result = (spline::Function *)new spline::Function((AnyScalar const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Function, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Function'."
      "  Prototype:\n"
      "    FUNCTION(AnyScalar,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Function_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_type" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_le__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  casadi::MX *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("Function_le",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_le" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator <=((casadi::MX const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_le'."
      "  Prototype:\n"
      "    LE(self,MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_ge (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  casadi::MX *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("Function_ge",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_ge" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator >=((casadi::MX const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_ge'."
      "  Prototype:\n"
      "    GE(self,MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  casadi::MX *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  mxArray * _out;
  casadi::MX result;
  
  if (!SWIG_check_num_args("Function_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_eq" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator ==((casadi::MX const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "MX" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_eq'."
      "  Prototype:\n"
      "    EQ(self,MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_eval_internal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > const &arg3_defvalue = std::vector< spline::Argument >() ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = (std::vector< spline::Argument,std::allocator< spline::Argument > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_eval_internal",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_eval_internal" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator ()((AnyTensor const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_eval_internal'."
      "  Prototype:\n"
      "    EVAL_INTERNAL(self,AnyTensor,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_list_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > const &arg3_defvalue = std::vector< spline::Argument >() ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = (std::vector< spline::Argument,std::allocator< spline::Argument > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_list_eval",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_list_eval" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->list_eval((AnyTensor const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_list_eval'."
      "  Prototype:\n"
      "    LIST_EVAL(self,AnyTensor,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_grid_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< AnyTensor,std::allocator< AnyTensor > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > const &arg3_defvalue = std::vector< spline::Argument >() ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = (std::vector< spline::Argument,std::allocator< spline::Argument > > *) &arg3_defvalue ;
  bool arg4 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< AnyTensor > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_grid_eval",argc,4,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_grid_eval" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[AnyTensor]" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  }
  if (3<argc) {
    if (!casadi::to_val(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "bool" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->grid_eval((std::vector< AnyTensor,std::allocator< AnyTensor > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_grid_eval'."
      "  Prototype:\n"
      "    GRID_EVAL(self,[AnyTensor],[index],bool)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_partial_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Argument *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  spline::Argument m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_partial_eval",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_partial_eval" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "index" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->partial_eval((AnyTensor const &)*arg2,(spline::Argument const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_partial_eval'."
      "  Prototype:\n"
      "    PARTIAL_EVAL(self,AnyTensor,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_plus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_plus" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator +((spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_plus'."
      "  Prototype:\n"
      "    PLUS(self,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_plus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_plus" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator +((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_plus'."
      "  Prototype:\n"
      "    PLUS(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_times__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_times",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_times" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator *((spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_times'."
      "  Prototype:\n"
      "    TIMES(self,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_times__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_times",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_times" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator *((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_times'."
      "  Prototype:\n"
      "    TIMES(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_minus" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator -((spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_minus'."
      "  Prototype:\n"
      "    MINUS(self,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_minus" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator -((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_minus'."
      "  Prototype:\n"
      "    MINUS(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_uminus" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->operator -();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_uminus'."
      "  Prototype:\n"
      "    UMINUS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_mtimes" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->mtimes((spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_mtimes" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->mtimes((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mtimes'."
      "  Prototype:\n"
      "    MTIMES(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_rmtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_rmtimes" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->rmtimes((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_pow (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_pow",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_pow" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->pow(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_pow'."
      "  Prototype:\n"
      "    POW(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mpow (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mpow",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_mpow" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->mpow(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mpow'."
      "  Prototype:\n"
      "    MPOW(self,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_slice__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnySlice *arg2 = 0 ;
  AnySlice *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  AnySlice m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_slice",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_slice" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->slice((AnySlice const &)*arg2,(AnySlice const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_slice'."
      "  Prototype:\n"
      "    SLICE(self,AnySlice,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_slice__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnySlice *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnySlice m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_slice",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_slice" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnySlice" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->slice((AnySlice const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_slice'."
      "  Prototype:\n"
      "    SLICE(self,AnySlice)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_slice (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        return _wrap_Function_slice__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnySlice **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< AnySlice **>(0));
        if (_v) {
          return _wrap_Function_slice__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_slice'."
    "  Possible prototypes are:\n"
    "    SLICE(self,AnySlice)\n"
    "    SLICE(self,AnySlice,AnySlice)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_transpose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_transpose",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_transpose" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->transpose();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_transpose'."
      "  Prototype:\n"
      "    TRANSPOSE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_trace (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_trace",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_trace" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->trace();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_trace'."
      "  Prototype:\n"
      "    TRACE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_vertcat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Function,std::allocator< spline::Function > > *arg1 = 0 ;
  std::vector< spline::Function > m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_vertcat",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Function]" "'.");
  {
    try {
      result = spline::Function::vertcat((std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_vertcat'."
      "  Prototype:\n"
      "    VERTCAT([Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_horzcat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Function,std::allocator< spline::Function > > *arg1 = 0 ;
  std::vector< spline::Function > m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_horzcat",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Function]" "'.");
  {
    try {
      result = spline::Function::horzcat((std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_horzcat'."
      "  Prototype:\n"
      "    HORZCAT([Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_cat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::NumericIndex arg1 ;
  std::vector< spline::Function,std::allocator< spline::Function > > *arg2 = 0 ;
  std::vector< spline::Function > m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_cat",argc,2,2,0)) {
    SWIG_fail;
  }
  if (!casadi::to_val(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type ' index '.");
  interpret_NumericIndex(arg1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[Function]" "'.");
  {
    try {
      result = spline::Function::cat(arg1,(std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_cat'."
      "  Prototype:\n"
      "    CAT(index,[Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_blkdiag (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Function,std::allocator< spline::Function > > *arg1 = 0 ;
  std::vector< spline::Function > m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_blkdiag",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Function]" "'.");
  {
    try {
      result = spline::Function::blkdiag((std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_blkdiag'."
      "  Prototype:\n"
      "    BLKDIAG([Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_coeff (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("Function_coeff",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_coeff" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->coeff();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_coeff'."
      "  Prototype:\n"
      "    COEFF(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_coeff_tensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_coeff_tensor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_coeff_tensor" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->coeff_tensor();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_coeff_tensor'."
      "  Prototype:\n"
      "    COEFF_TENSOR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_data" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->data();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_data'."
      "  Prototype:\n"
      "    DATA(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_basis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("Function_basis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_basis" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->basis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_basis'."
      "  Prototype:\n"
      "    BASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_basis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Argument *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m2 ;
  mxArray * _out;
  spline::Basis result;
  
  if (!SWIG_check_num_args("Function_basis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_basis" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "index" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->basis((spline::Argument const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Basis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_basis'."
      "  Prototype:\n"
      "    BASIS(self,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Function_basis__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Argument **>(0));
      if (_v) {
        return _wrap_Function_basis__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_basis'."
    "  Possible prototypes are:\n"
    "    BASIS(self)\n"
    "    BASIS(self,index)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_tensor_basis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::TensorBasis result;
  
  if (!SWIG_check_num_args("Function_tensor_basis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_tensor_basis" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->tensor_basis();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorBasis" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_tensor_basis'."
      "  Prototype:\n"
      "    TENSOR_BASIS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_domain (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::TensorDomain result;
  
  if (!SWIG_check_num_args("Function_domain",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_domain" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->domain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "TensorDomain" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_domain'."
      "  Prototype:\n"
      "    DOMAIN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_is_scalar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Function_is_scalar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_is_scalar" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (bool)((spline::Function const *)arg1)->is_scalar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "bool" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_is_scalar'."
      "  Prototype:\n"
      "    IS_SCALAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_shape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< int,std::allocator< int > > result;
  
  if (!SWIG_check_num_args("Function_shape",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_shape" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->shape();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[" "int" "]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_shape'."
      "  Prototype:\n"
      "    SHAPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_reshape (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_reshape",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_reshape" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->reshape((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_reshape'."
      "  Prototype:\n"
      "    RESHAPE(self,[int])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_transform_to__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Basis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_transform_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_transform_to" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->transform_to((spline::Basis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_transform_to'."
      "  Prototype:\n"
      "    TRANSFORM_TO(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_transform_to__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_transform_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_transform_to" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->transform_to((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_transform_to'."
      "  Prototype:\n"
      "    TRANSFORM_TO(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_transform_to (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Basis **>(0));
      if (_v) {
        return _wrap_Function_transform_to__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorBasis **>(0));
      if (_v) {
        return _wrap_Function_transform_to__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_transform_to'."
    "  Possible prototypes are:\n"
    "    TRANSFORM_TO(self,Basis)\n"
    "    TRANSFORM_TO(self,TensorBasis)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_project_to__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::Basis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Basis m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_project_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_project_to" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Basis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->project_to((spline::Basis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_project_to'."
      "  Prototype:\n"
      "    PROJECT_TO(self,Basis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_project_to__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_project_to",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_project_to" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->project_to((spline::TensorBasis const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_project_to'."
      "  Prototype:\n"
      "    PROJECT_TO(self,TensorBasis)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_project_to (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Basis **>(0));
      if (_v) {
        return _wrap_Function_project_to__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorBasis **>(0));
      if (_v) {
        return _wrap_Function_project_to__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_project_to'."
    "  Possible prototypes are:\n"
    "    PROJECT_TO(self,Basis)\n"
    "    PROJECT_TO(self,TensorBasis)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_n_inputs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Function_n_inputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_n_inputs" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (int)((spline::Function const *)arg1)->n_inputs();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "int" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_n_inputs'."
      "  Prototype:\n"
      "    N_INPUTS(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_insert_knots__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyVector *arg2 = 0 ;
  spline::Argument const &arg3_defvalue = spline::Argument() ;
  spline::Argument *arg3 = (spline::Argument *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyVector m2 ;
  spline::Argument m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_insert_knots",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_insert_knots" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyVector" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "index" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->insert_knots((AnyVector const &)*arg2,(spline::Argument const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_insert_knots'."
      "  Prototype:\n"
      "    INSERT_KNOTS(self,AnyVector,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_insert_knots__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< AnyVector,std::allocator< AnyVector > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< AnyVector > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_insert_knots",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_insert_knots" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[AnyVector]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->insert_knots((std::vector< AnyVector,std::allocator< AnyVector > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_insert_knots'."
      "  Prototype:\n"
      "    INSERT_KNOTS(self,[AnyVector],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_insert_knots (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyVector **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_Function_insert_knots__SWIG_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< spline::Argument **>(0));
        if (_v) {
          return _wrap_Function_insert_knots__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<AnyVector> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_Function_insert_knots__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_insert_knots'."
    "  Possible prototypes are:\n"
    "    INSERT_KNOTS(self,AnyVector,index)\n"
    "    INSERT_KNOTS(self,[AnyVector],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_midpoint_refinement__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  int arg2 = (int) 1 ;
  spline::Argument const &arg3_defvalue = spline::Argument() ;
  spline::Argument *arg3 = (spline::Argument *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_midpoint_refinement",argc,3,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_midpoint_refinement" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  if (1<argc) {
    if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  }
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "index" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->midpoint_refinement(arg2,(spline::Argument const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_midpoint_refinement'."
      "  Prototype:\n"
      "    MIDPOINT_REFINEMENT(self,int,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_midpoint_refinement__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_midpoint_refinement",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_midpoint_refinement" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->midpoint_refinement((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_midpoint_refinement'."
      "  Prototype:\n"
      "    MIDPOINT_REFINEMENT(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_midpoint_refinement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Function_midpoint_refinement__SWIG_0(resc,resv,argc,argv);
      }
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_Function_midpoint_refinement__SWIG_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< spline::Argument **>(0));
        if (_v) {
          return _wrap_Function_midpoint_refinement__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_Function_midpoint_refinement__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_midpoint_refinement'."
    "  Possible prototypes are:\n"
    "    MIDPOINT_REFINEMENT(self,int,index)\n"
    "    MIDPOINT_REFINEMENT(self,[int],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_degree_elevation__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  int arg2 = (int) 1 ;
  spline::Argument const &arg3_defvalue = spline::Argument() ;
  spline::Argument *arg3 = (spline::Argument *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_degree_elevation",argc,3,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_degree_elevation" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  if (1<argc) {
    if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  }
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "index" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->degree_elevation(arg2,(spline::Argument const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_degree_elevation'."
      "  Prototype:\n"
      "    DEGREE_ELEVATION(self,int,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_degree_elevation__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_degree_elevation",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_degree_elevation" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->degree_elevation((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_degree_elevation'."
      "  Prototype:\n"
      "    DEGREE_ELEVATION(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_degree_elevation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Function_degree_elevation__SWIG_0(resc,resv,argc,argv);
      }
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_Function_degree_elevation__SWIG_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< spline::Argument **>(0));
        if (_v) {
          return _wrap_Function_degree_elevation__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_Function_degree_elevation__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_degree_elevation'."
    "  Possible prototypes are:\n"
    "    DEGREE_ELEVATION(self,int,index)\n"
    "    DEGREE_ELEVATION(self,[int],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_kick_boundary__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_kick_boundary",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_kick_boundary" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->kick_boundary((spline::TensorDomain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,TensorDomain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_kick_boundary__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  spline::NumericIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  spline::NumericIndex m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_kick_boundary",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_kick_boundary" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' index '.");
  interpret_NumericIndex(*arg3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->kick_boundary((spline::TensorDomain const &)*arg2,(spline::NumericIndex const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,TensorDomain,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_kick_boundary__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  std::vector< std::string > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_kick_boundary",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_kick_boundary" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "char" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->kick_boundary((spline::TensorDomain const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,TensorDomain,[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_kick_boundary__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  spline::NumericIndexVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  spline::NumericIndexVector m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_kick_boundary",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_kick_boundary" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' [index] '.");
  interpret_NumericIndex(m3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->kick_boundary((spline::TensorDomain const &)*arg2,(spline::NumericIndexVector const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_kick_boundary'."
      "  Prototype:\n"
      "    KICK_BOUNDARY(self,TensorDomain,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_kick_boundary (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        return _wrap_Function_kick_boundary__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< int **>(0));
        if (_v) {
          return _wrap_Function_kick_boundary__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<std::string> **>(0));
        if (_v) {
          return _wrap_Function_kick_boundary__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_Function_kick_boundary__SWIG_3(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_kick_boundary'."
    "  Possible prototypes are:\n"
    "    KICK_BOUNDARY(self,TensorDomain)\n"
    "    KICK_BOUNDARY(self,TensorDomain,index)\n"
    "    KICK_BOUNDARY(self,TensorDomain,[char])\n"
    "    KICK_BOUNDARY(self,TensorDomain,[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_derivative__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  int arg2 = (int) 1 ;
  spline::Argument const &arg3_defvalue = spline::Argument() ;
  spline::Argument *arg3 = (spline::Argument *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_derivative",argc,3,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_derivative" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  if (1<argc) {
    if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  }
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "index" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->derivative(arg2,(spline::Argument const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_derivative'."
      "  Prototype:\n"
      "    DERIVATIVE(self,int,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_derivative__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_derivative",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_derivative" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->derivative((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_derivative'."
      "  Prototype:\n"
      "    DERIVATIVE(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_derivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Function_derivative__SWIG_0(resc,resv,argc,argv);
      }
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_Function_derivative__SWIG_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< spline::Argument **>(0));
        if (_v) {
          return _wrap_Function_derivative__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_Function_derivative__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_derivative'."
    "  Possible prototypes are:\n"
    "    DERIVATIVE(self,int,index)\n"
    "    DERIVATIVE(self,[int],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_antiderivative__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  int arg2 = (int) 1 ;
  spline::Argument const &arg3_defvalue = spline::Argument() ;
  spline::Argument *arg3 = (spline::Argument *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Argument m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_antiderivative",argc,3,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_antiderivative" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  if (1<argc) {
    if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  }
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "index" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->antiderivative(arg2,(spline::Argument const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_antiderivative'."
      "  Prototype:\n"
      "    ANTIDERIVATIVE(self,int,index)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_antiderivative__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< spline::Argument,std::allocator< spline::Argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > m2 ;
  std::vector< spline::Argument > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_antiderivative",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_antiderivative" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "[" "int" "]" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[index]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->antiderivative((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< spline::Argument,std::allocator< spline::Argument > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_antiderivative'."
      "  Prototype:\n"
      "    ANTIDERIVATIVE(self,[int],[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_antiderivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Function_antiderivative__SWIG_0(resc,resv,argc,argv);
      }
      _v = casadi::to_ptr(argv[1], static_cast< int **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_Function_antiderivative__SWIG_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< spline::Argument **>(0));
        if (_v) {
          return _wrap_Function_antiderivative__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector< spline::Argument > **>(0));
        if (_v) {
          return _wrap_Function_antiderivative__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_antiderivative'."
    "  Possible prototypes are:\n"
    "    ANTIDERIVATIVE(self,int,index)\n"
    "    ANTIDERIVATIVE(self,[int],[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_jacobian (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< spline::Function,std::allocator< spline::Function > > result;
  
  if (!SWIG_check_num_args("Function_jacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_jacobian" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->jacobian();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "[Function]" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_jacobian'."
      "  Prototype:\n"
      "    JACOBIAN(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_integral__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_integral",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_integral" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->integral();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_integral'."
      "  Prototype:\n"
      "    INTEGRAL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_integral__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_integral",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_integral" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->integral((spline::TensorDomain const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_integral'."
      "  Prototype:\n"
      "    INTEGRAL(self,TensorDomain)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_integral (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Function_integral__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        return _wrap_Function_integral__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_integral'."
    "  Possible prototypes are:\n"
    "    INTEGRAL(self)\n"
    "    INTEGRAL(self,TensorDomain)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_partial_integral__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  std::vector< std::string > m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_partial_integral",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_partial_integral" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "char" "]" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->partial_integral((spline::TensorDomain const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_partial_integral'."
      "  Prototype:\n"
      "    PARTIAL_INTEGRAL(self,TensorDomain,[char])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_partial_integral__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  spline::TensorDomain *arg2 = 0 ;
  spline::NumericIndexVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorDomain m2 ;
  spline::NumericIndexVector m3 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_partial_integral",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_partial_integral" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorDomain" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type ' [index] '.");
  interpret_NumericIndex(m3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->partial_integral((spline::TensorDomain const &)*arg2,(spline::NumericIndexVector const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_partial_integral'."
      "  Prototype:\n"
      "    PARTIAL_INTEGRAL(self,TensorDomain,[index])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_partial_integral (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<std::string> **>(0));
        if (_v) {
          return _wrap_Function_partial_integral__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::TensorDomain **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<int> **>(0));
        if (_v) {
          return _wrap_Function_partial_integral__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_partial_integral'."
    "  Possible prototypes are:\n"
    "    PARTIAL_INTEGRAL(self,TensorDomain,[char])\n"
    "    PARTIAL_INTEGRAL(self,TensorDomain,[index])\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_linear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyVector *arg1 = 0 ;
  AnyVector *arg2 = 0 ;
  AnyVector m1 ;
  AnyVector m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_linear",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyVector" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyVector" "'.");
  {
    try {
      result = spline::Function::linear((AnyVector const &)*arg1,(AnyVector const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_linear'."
      "  Prototype:\n"
      "    LINEAR(AnyVector,AnyVector)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_to_casadi (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  casadi::Function result;
  
  if (!SWIG_check_num_args("Function_to_casadi",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_to_casadi" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->to_casadi();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_to_casadi'."
      "  Prototype:\n"
      "    TO_CASADI(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_fast_eval (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("Function_fast_eval",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_fast_eval" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->fast_eval((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_fast_eval'."
      "  Prototype:\n"
      "    FAST_EVAL(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_fast_jac (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  casadi::DM result;
  
  if (!SWIG_check_num_args("Function_fast_jac",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_fast_jac" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Function const *)arg1)->fast_jac((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "DM" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_fast_jac'."
      "  Prototype:\n"
      "    FAST_JAC(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_plus__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_plus__SWIG_2((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_plus'."
      "  Prototype:\n"
      "    PLUS(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_minus__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_minus__SWIG_2((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_minus'."
      "  Prototype:\n"
      "    MINUS(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_times__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_times__SWIG_2((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_times'."
      "  Prototype:\n"
      "    TIMES(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_mtimes__SWIG_2((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mtimes'."
      "  Prototype:\n"
      "    MTIMES(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_rmtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_rmtimes__SWIG_1((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_power (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  int arg2 ;
  spline::Function m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_power",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  {
    try {
      result = spline_Function_power((spline::Function const &)*arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_power'."
      "  Prototype:\n"
      "    POWER(Function,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mpower (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  int arg2 ;
  spline::Function m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mpower",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  {
    try {
      result = spline_Function_mpower((spline::Function const &)*arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mpower'."
      "  Prototype:\n"
      "    MPOWER(Function,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_plus__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline_Function_plus__SWIG_3((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_plus'."
      "  Prototype:\n"
      "    PLUS(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_minus__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline_Function_minus__SWIG_3((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_minus'."
      "  Prototype:\n"
      "    MINUS(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_times__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline_Function_times__SWIG_3((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_times'."
      "  Prototype:\n"
      "    TIMES(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline_Function_mtimes__SWIG_3((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mtimes'."
      "  Prototype:\n"
      "    MTIMES(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_rmtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline_Function_rmtimes__SWIG_2((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_le__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  MX *arg2 = 0 ;
  spline::Function m1 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  MX result;
  
  if (!SWIG_check_num_args("Function_le",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_casadi__MX,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_le" "', argument " "2"" of type '" "MX const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_le" "', argument " "2"" of type '" "MX const &""'"); 
  }
  arg2 = reinterpret_cast< MX * >(argp2);
  {
    try {
      result = spline_Function_le__SWIG_1((spline::Function const &)*arg1,(MX const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new MX(static_cast< const MX& >(result))), SWIGTYPE_p_casadi__MX, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_le'."
      "  Prototype:\n"
      "    LE(Function,MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_plus__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_plus__SWIG_4((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_plus'."
      "  Prototype:\n"
      "    PLUS(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_plus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_plus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_plus__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_plus__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_plus__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_plus'."
    "  Possible prototypes are:\n"
    "    PLUS(self,AnyTensor)\n"
    "    PLUS(self,Function)\n"
    "    PLUS(AnyTensor,Function)\n"
    "    PLUS(Function,AnyTensor)\n"
    "    PLUS(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_minus__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_minus__SWIG_4((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_minus'."
      "  Prototype:\n"
      "    MINUS(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_minus__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_minus__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_minus__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_minus'."
    "  Possible prototypes are:\n"
    "    MINUS(self,AnyTensor)\n"
    "    MINUS(self,Function)\n"
    "    MINUS(AnyTensor,Function)\n"
    "    MINUS(Function,AnyTensor)\n"
    "    MINUS(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_times__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_times__SWIG_4((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_times'."
      "  Prototype:\n"
      "    TIMES(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_times (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_times__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_times__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_times__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_times__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_times__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_times'."
    "  Possible prototypes are:\n"
    "    TIMES(self,AnyTensor)\n"
    "    TIMES(self,Function)\n"
    "    TIMES(AnyTensor,Function)\n"
    "    TIMES(Function,AnyTensor)\n"
    "    TIMES(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_mtimes__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_mtimes__SWIG_4((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mtimes'."
      "  Prototype:\n"
      "    MTIMES(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_mtimes'."
    "  Possible prototypes are:\n"
    "    MTIMES(self,AnyTensor)\n"
    "    MTIMES(self,Function)\n"
    "    MTIMES(AnyTensor,Function)\n"
    "    MTIMES(Function,AnyTensor)\n"
    "    MTIMES(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_rmtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_rmtimes__SWIG_3((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_rmtimes'."
      "  Prototype:\n"
      "    RMTIMES(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_rmtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_rmtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_Function_rmtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_rmtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_rmtimes'."
    "  Possible prototypes are:\n"
    "    RMTIMES(self,AnyTensor)\n"
    "    RMTIMES(AnyTensor,Function)\n"
    "    RMTIMES(Function,AnyTensor)\n"
    "    RMTIMES(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_le__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  MX *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  MX result;
  
  if (!SWIG_check_num_args("Function_le",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_casadi__MX,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_le" "', argument " "1"" of type '" "MX const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_le" "', argument " "1"" of type '" "MX const &""'"); 
  }
  arg1 = reinterpret_cast< MX * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline_Function_le__SWIG_2((MX const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new MX(static_cast< const MX& >(result))), SWIGTYPE_p_casadi__MX, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_le'."
      "  Prototype:\n"
      "    LE(MX,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Function_le (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        return _wrap_Function_le__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_casadi__MX, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_Function_le__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_casadi__MX, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function_le__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_le'."
    "  Possible prototypes are:\n"
    "    LE(self,MX)\n"
    "    LE(MX,Function)\n"
    "    LE(Function,MX)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_Function_ctranspose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("Function_ctranspose",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_ctranspose" "', argument " "1"" of type '" "spline::Function const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = spline_Function_ctranspose((spline::Function const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Function_ctranspose'."
      "  Prototype:\n"
      "    CTRANSPOSE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Function__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function m1 ;
  mxArray * _out;
  spline::Function *result = 0 ;
  
  if (!SWIG_check_num_args("new_Function",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  {
    try {
      result = (spline::Function *)new spline::Function((spline::Function const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Function, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Function'."
      "  Prototype:\n"
      "    FUNCTION(Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Function (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Function__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      return _wrap_new_Function__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      return _wrap_new_Function__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyScalar **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<int> **>(0));
      if (_v) {
        return _wrap_new_Function__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::TensorBasis **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        return _wrap_new_Function__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Function'."
    "  Possible prototypes are:\n"
    "    FUNCTION()\n"
    "    FUNCTION(AnyTensor)\n"
    "    FUNCTION(Function)\n"
    "    FUNCTION(AnyScalar,[int])\n"
    "    FUNCTION(TensorBasis,Coefficient)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Function (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = (spline::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Function",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Function, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Function" "', argument " "1"" of type '" "spline::Function *""'"); 
  }
  arg1 = reinterpret_cast< spline::Function * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Function'."
      "  Prototype:\n"
      "    FUNCTION(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Polynomial__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Polynomial *result = 0 ;
  
  if (!SWIG_check_num_args("new_Polynomial",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Polynomial *)new spline::Polynomial();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Polynomial, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Polynomial'."
      "  Prototype:\n"
      "    POLYNOMIAL()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Polynomial__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double > m1 ;
  mxArray * _out;
  spline::Polynomial *result = 0 ;
  
  if (!SWIG_check_num_args("new_Polynomial",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[double]" "'.");
  {
    try {
      result = (spline::Polynomial *)new spline::Polynomial((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Polynomial, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Polynomial'."
      "  Prototype:\n"
      "    POLYNOMIAL([double])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Polynomial__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > m1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  spline::Polynomial *result = 0 ;
  
  if (!SWIG_check_num_args("new_Polynomial",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[double]" "'.");
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Polynomial" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Polynomial" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      result = (spline::Polynomial *)new spline::Polynomial((std::vector< double,std::allocator< double > > const &)*arg1,*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Polynomial, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Polynomial'."
      "  Prototype:\n"
      "    POLYNOMIAL([double],std::string &)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Polynomial__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > m1 ;
  std::string m2 ;
  mxArray * _out;
  spline::Polynomial *result = 0 ;
  
  if (!SWIG_check_num_args("new_Polynomial",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[double]" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "char" "'.");
  {
    try {
      result = (spline::Polynomial *)new spline::Polynomial((std::vector< double,std::allocator< double > > const &)*arg1,(std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Polynomial, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Polynomial'."
      "  Prototype:\n"
      "    POLYNOMIAL([double],char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Polynomial_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Polynomial *arg1 = (spline::Polynomial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Polynomial_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Polynomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Polynomial_type" "', argument " "1"" of type '" "spline::Polynomial const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Polynomial * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Polynomial const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Polynomial_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Polynomial_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Polynomial *arg1 = (spline::Polynomial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Polynomial_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Polynomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Polynomial_to_string" "', argument " "1"" of type '" "spline::Polynomial const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Polynomial * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Polynomial const *)arg1)->to_string();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Polynomial_to_string'."
      "  Prototype:\n"
      "    TO_STRING(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Polynomial__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Polynomial *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  spline::Polynomial *result = 0 ;
  
  if (!SWIG_check_num_args("new_Polynomial",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_spline__Polynomial,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Polynomial" "', argument " "1"" of type '" "spline::Polynomial const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Polynomial" "', argument " "1"" of type '" "spline::Polynomial const &""'"); 
  }
  arg1 = reinterpret_cast< spline::Polynomial * >(argp1);
  {
    try {
      result = (spline::Polynomial *)new spline::Polynomial((spline::Polynomial const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Polynomial, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Polynomial'."
      "  Prototype:\n"
      "    POLYNOMIAL(Polynomial)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Polynomial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Polynomial__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_spline__Polynomial, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Polynomial__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<double> **>(0));
    if (_v) {
      return _wrap_new_Polynomial__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<double> **>(0));
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Polynomial__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::vector<double> **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::string **>(0));
      if (_v) {
        return _wrap_new_Polynomial__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Polynomial'."
    "  Possible prototypes are:\n"
    "    POLYNOMIAL()\n"
    "    POLYNOMIAL(Polynomial)\n"
    "    POLYNOMIAL([double])\n"
    "    POLYNOMIAL([double],std::string &)\n"
    "    POLYNOMIAL([double],char)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Polynomial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Polynomial *arg1 = (spline::Polynomial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Polynomial",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Polynomial, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Polynomial" "', argument " "1"" of type '" "spline::Polynomial *""'"); 
  }
  arg1 = reinterpret_cast< spline::Polynomial * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Polynomial'."
      "  Prototype:\n"
      "    POLYNOMIAL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Parameter__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  spline::Parameter *result = 0 ;
  
  if (!SWIG_check_num_args("new_Parameter",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (spline::Parameter *)new spline::Parameter();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Parameter, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Parameter'."
      "  Prototype:\n"
      "    PARAMETER()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Parameter__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string m1 ;
  mxArray * _out;
  spline::Parameter *result = 0 ;
  
  if (!SWIG_check_num_args("new_Parameter",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "char" "'.");
  {
    try {
      result = (spline::Parameter *)new spline::Parameter((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Parameter, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Parameter'."
      "  Prototype:\n"
      "    PARAMETER(char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Parameter_type (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Parameter *arg1 = (spline::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Parameter_type",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_type" "', argument " "1"" of type '" "spline::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Parameter * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Parameter const *)arg1)->type();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Parameter_type'."
      "  Prototype:\n"
      "    TYPE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Parameter_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Parameter *arg1 = (spline::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Parameter_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_to_string" "', argument " "1"" of type '" "spline::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Parameter * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Parameter const *)arg1)->to_string();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Parameter_to_string'."
      "  Prototype:\n"
      "    TO_STRING(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_Parameter_name (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Parameter *arg1 = (spline::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Parameter_name",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_name" "', argument " "1"" of type '" "spline::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< spline::Parameter * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((spline::Parameter const *)arg1)->name();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "char" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Parameter_name'."
      "  Prototype:\n"
      "    NAME(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Parameter__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Parameter *arg1 = 0 ;
  spline::Parameter m1 ;
  mxArray * _out;
  spline::Parameter *result = 0 ;
  
  if (!SWIG_check_num_args("new_Parameter",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Parameter" "'.");
  {
    try {
      result = (spline::Parameter *)new spline::Parameter((spline::Parameter const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spline__Parameter, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Parameter'."
      "  Prototype:\n"
      "    PARAMETER(Parameter)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_Parameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Parameter__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< std::string **>(0));
    if (_v) {
      return _wrap_new_Parameter__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Parameter **>(0));
    if (_v) {
      return _wrap_new_Parameter__SWIG_2(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Parameter'."
    "  Possible prototypes are:\n"
    "    PARAMETER()\n"
    "    PARAMETER(char)\n"
    "    PARAMETER(Parameter)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_Parameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Parameter *arg1 = (spline::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Parameter",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_spline__Parameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Parameter" "', argument " "1"" of type '" "spline::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< spline::Parameter * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_Parameter'."
      "  Prototype:\n"
      "    PARAMETER(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_initial__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineI_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_set_initial" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_initial__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineI_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_set_initial" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_initial__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineI_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_set_initial" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_initial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineI_set_initial__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineI_set_initial__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSplineI_set_initial__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_initial'."
    "  Possible prototypes are:\n"
    "    SET_INITIAL(self,MTensor,DTensor)\n"
    "    SET_INITIAL(self,Coefficient,DTensor)\n"
    "    SET_INITIAL(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineI_set_value__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineI_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_set_value" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_value__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineI_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_set_value" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_value__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineI_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_set_value" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineI_set_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineI_set_value__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineI_set_value__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSplineI_set_value__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_set_value'."
    "  Possible prototypes are:\n"
    "    SET_VALUE(self,MTensor,DTensor)\n"
    "    SET_VALUE(self,Coefficient,DTensor)\n"
    "    SET_VALUE(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineI_Function (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  std::vector< int,std::allocator< int > > const &arg3_defvalue = std::vector< int >() ;
  std::vector< int,std::allocator< int > > *arg3 = (std::vector< int,std::allocator< int > > *) &arg3_defvalue ;
  std::string const &arg4_defvalue = "full" ;
  std::string *arg4 = (std::string *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  std::vector< int > m3 ;
  std::string m4 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("OptiSplineI_Function",argc,4,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineI_Function" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  }
  if (3<argc) {
    arg4 = &m4;
    if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "char" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->Function((spline::TensorBasis const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineI_Function'."
      "  Prototype:\n"
      "    FUNCTION(self,TensorBasis,[int],char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineI__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  OptiSplineInterface< OptiSpline > *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineI",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (OptiSplineInterface< OptiSpline > *)new OptiSplineInterface< OptiSpline >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineI'."
      "  Prototype:\n"
      "    OPTISPLINEI()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineI__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSplineInterface< OptiSpline > *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineI",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSplineI" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSplineI" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  {
    try {
      result = (OptiSplineInterface< OptiSpline > *)new OptiSplineInterface< OptiSpline >((OptiSplineInterface< OptiSpline > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineI'."
      "  Prototype:\n"
      "    OPTISPLINEI(OptiSplineI)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_OptiSplineI__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSplineI__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineI'."
    "  Possible prototypes are:\n"
    "    OPTISPLINEI()\n"
    "    OPTISPLINEI(OptiSplineI)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_OptiSplineI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSpline > *arg1 = (OptiSplineInterface< OptiSpline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_OptiSplineI",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSpline_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptiSplineI" "', argument " "1"" of type '" "OptiSplineInterface< OptiSpline > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSpline > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_OptiSplineI'."
      "  Prototype:\n"
      "    OPTISPLINEI(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_initial__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_set_initial" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_initial__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_set_initial" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_initial__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_set_initial" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_initial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvancedI_set_initial__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvancedI_set_initial__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvancedI_set_initial__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_initial'."
    "  Possible prototypes are:\n"
    "    SET_INITIAL(self,MTensor,DTensor)\n"
    "    SET_INITIAL(self,Coefficient,DTensor)\n"
    "    SET_INITIAL(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_value__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_set_value" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_value__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_set_value" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_value__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_set_value" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvancedI_set_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvancedI_set_value__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvancedI_set_value__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvancedI_set_value__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_set_value'."
    "  Possible prototypes are:\n"
    "    SET_VALUE(self,MTensor,DTensor)\n"
    "    SET_VALUE(self,Coefficient,DTensor)\n"
    "    SET_VALUE(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineAdvancedI_Function (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  spline::TensorBasis *arg2 = 0 ;
  std::vector< int,std::allocator< int > > const &arg3_defvalue = std::vector< int >() ;
  std::vector< int,std::allocator< int > > *arg3 = (std::vector< int,std::allocator< int > > *) &arg3_defvalue ;
  std::string const &arg4_defvalue = "full" ;
  std::string *arg4 = (std::string *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::TensorBasis m2 ;
  std::vector< int > m3 ;
  std::string m4 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("OptiSplineAdvancedI_Function",argc,4,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvancedI_Function" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "TensorBasis" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "[" "int" "]" "'.");
  }
  if (3<argc) {
    arg4 = &m4;
    if (!casadi::to_ptr(argv[3], &arg4)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 4 to type '" "char" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->Function((spline::TensorBasis const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvancedI_Function'."
      "  Prototype:\n"
      "    FUNCTION(self,TensorBasis,[int],char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineAdvancedI__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  OptiSplineInterface< OptiSplineAdvanced > *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineAdvancedI",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (OptiSplineInterface< OptiSplineAdvanced > *)new OptiSplineInterface< OptiSplineAdvanced >();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineAdvancedI'."
      "  Prototype:\n"
      "    OPTISPLINEADVANCEDI()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineAdvancedI__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSplineInterface< OptiSplineAdvanced > *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineAdvancedI",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSplineAdvancedI" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSplineAdvancedI" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  {
    try {
      result = (OptiSplineInterface< OptiSplineAdvanced > *)new OptiSplineInterface< OptiSplineAdvanced >((OptiSplineInterface< OptiSplineAdvanced > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineAdvancedI'."
      "  Prototype:\n"
      "    OPTISPLINEADVANCEDI(OptiSplineAdvancedI)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineAdvancedI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_OptiSplineAdvancedI__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSplineAdvancedI__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineAdvancedI'."
    "  Possible prototypes are:\n"
    "    OPTISPLINEADVANCEDI()\n"
    "    OPTISPLINEADVANCEDI(OptiSplineAdvancedI)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_OptiSplineAdvancedI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineInterface< OptiSplineAdvanced > *arg1 = (OptiSplineInterface< OptiSplineAdvanced > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_OptiSplineAdvancedI",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptiSplineAdvancedI" "', argument " "1"" of type '" "OptiSplineInterface< OptiSplineAdvanced > *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineInterface< OptiSplineAdvanced > * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_OptiSplineAdvancedI'."
      "  Prototype:\n"
      "    OPTISPLINEADVANCEDI(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_copy (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSpline result;
  
  if (!SWIG_check_num_args("OptiSpline_copy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_copy" "', argument " "1"" of type '" "OptiSpline const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSpline const *)arg1)->copy();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new OptiSpline(static_cast< const OptiSpline& >(result))), SWIGTYPE_p_OptiSpline, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_copy'."
      "  Prototype:\n"
      "    COPY(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_debug (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< OptiSplineAdvanced > result;
  
  if (!SWIG_check_num_args("OptiSpline_debug",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_debug" "', argument " "1"" of type '" "OptiSpline const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSpline const *)arg1)->debug();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new OptiSplineAdvanced(static_cast< const OptiSplineAdvanced& >(result))), SWIGTYPE_p_OptiSplineAdvanced, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_debug'."
      "  Prototype:\n"
      "    DEBUG(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_advanced (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< OptiSplineAdvanced > result;
  
  if (!SWIG_check_num_args("OptiSpline_advanced",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_advanced" "', argument " "1"" of type '" "OptiSpline const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSpline const *)arg1)->advanced();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new OptiSplineAdvanced(static_cast< const OptiSplineAdvanced& >(result))), SWIGTYPE_p_OptiSplineAdvanced, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_advanced'."
      "  Prototype:\n"
      "    ADVANCED(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_solve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< OptiSplineSol > result;
  
  if (!SWIG_check_num_args("OptiSpline_solve",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_solve" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->solve();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new OptiSplineSol(static_cast< const OptiSplineSol& >(result))), SWIGTYPE_p_OptiSplineSol, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_solve'."
      "  Prototype:\n"
      "    SOLVE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_initial__SWIG_0_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_initial" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_initial__SWIG_0_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_initial" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_initial__SWIG_0_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_initial" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_value__SWIG_0_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_value" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_value__SWIG_0_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_value" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_value__SWIG_0_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_value" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_initial__SWIG_1_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  casadi::MX *arg2 = 0 ;
  casadi::DM *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  casadi::Matrix< double > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_initial" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DM" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((casadi::MX const &)*arg2,(casadi::DM const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,MX,DM)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_initial__SWIG_1_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< casadi::MX > m2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_initial",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_initial" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "{" "MX" "}" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_initial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<casadi::MX> **>(0));
      if (_v) {
        return _wrap_OptiSpline_set_initial__SWIG_1_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< casadi::Matrix<double> **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_initial__SWIG_1_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_initial__SWIG_0_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_initial__SWIG_0_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_initial__SWIG_0_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_initial'."
    "  Possible prototypes are:\n"
    "    SET_INITIAL(self,{MX})\n"
    "    SET_INITIAL(self,MX,DM)\n"
    "    SET_INITIAL(self,MTensor,DTensor)\n"
    "    SET_INITIAL(self,Coefficient,DTensor)\n"
    "    SET_INITIAL(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSpline_set_value__SWIG_1_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  casadi::MX *arg2 = 0 ;
  casadi::DM *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  casadi::Matrix< double > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_value" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DM" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((casadi::MX const &)*arg2,(casadi::DM const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,MX,DM)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_value__SWIG_1_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< casadi::MX > m2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSpline_set_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSpline_set_value" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "{" "MX" "}" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSpline_set_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<casadi::MX> **>(0));
      if (_v) {
        return _wrap_OptiSpline_set_value__SWIG_1_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< casadi::Matrix<double> **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_value__SWIG_1_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_value__SWIG_0_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_value__SWIG_0_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSpline_set_value__SWIG_0_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSpline_set_value'."
    "  Possible prototypes are:\n"
    "    SET_VALUE(self,{MX})\n"
    "    SET_VALUE(self,MX,DM)\n"
    "    SET_VALUE(self,MTensor,DTensor)\n"
    "    SET_VALUE(self,Coefficient,DTensor)\n"
    "    SET_VALUE(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_new_OptiSpline__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSpline *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSpline",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSplineAdvanced,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSpline" "', argument " "1"" of type '" "OptiSplineAdvanced const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSpline" "', argument " "1"" of type '" "OptiSplineAdvanced const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  {
    try {
      result = (OptiSpline *)new OptiSpline((OptiSplineAdvanced const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSpline, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSpline'."
      "  Prototype:\n"
      "    OPTISPLINE(OptiSplineAdvanced)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSpline__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  OptiSpline *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSpline",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (OptiSpline *)new OptiSpline();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSpline, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSpline'."
      "  Prototype:\n"
      "    OPTISPLINE()\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSpline__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSpline *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSpline",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSpline,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSpline" "', argument " "1"" of type '" "OptiSpline const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSpline" "', argument " "1"" of type '" "OptiSpline const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  {
    try {
      result = (OptiSpline *)new OptiSpline((OptiSpline const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSpline, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSpline'."
      "  Prototype:\n"
      "    OPTISPLINE(OptiSpline)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSpline (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_OptiSpline__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSpline__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSpline__SWIG_2(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSpline'."
    "  Possible prototypes are:\n"
    "    OPTISPLINE()\n"
    "    OPTISPLINE(OptiSplineAdvanced)\n"
    "    OPTISPLINE(OptiSpline)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_OptiSpline (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = (OptiSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_OptiSpline",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSpline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptiSpline" "', argument " "1"" of type '" "OptiSpline *""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_OptiSpline'."
      "  Prototype:\n"
      "    OPTISPLINE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_solve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< OptiSplineSol > result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_solve",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_solve" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = (arg1)->solve();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new OptiSplineSol(static_cast< const OptiSplineSol& >(result))), SWIGTYPE_p_OptiSplineSol, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_solve'."
      "  Prototype:\n"
      "    SOLVE(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  AnyTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_value" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->value((AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
      "  Prototype:\n"
      "    VALUE(self,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_value" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->value((spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
      "  Prototype:\n"
      "    VALUE(self,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_value" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->value((spline::Coefficient const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
      "  Prototype:\n"
      "    VALUE(self,Coefficient)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value__SWIG_3_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::MX *arg2 = 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > const &arg3_defvalue = std::vector< casadi::MX >() ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg3 = (std::vector< casadi::MX,std::allocator< casadi::MX > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  std::vector< casadi::MX > m3 ;
  mxArray * _out;
  casadi::native_DM result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_value",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_value" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "{" "MX" "}" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->value((casadi::MX const &)*arg2,(std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = full_or_sparse(result, true))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type 'double'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
      "  Prototype:\n"
      "    VALUE(self,MX,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value__SWIG_3_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::DM *arg2 = 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > const &arg3_defvalue = std::vector< casadi::MX >() ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg3 = (std::vector< casadi::MX,std::allocator< casadi::MX > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::Matrix< double > m2 ;
  std::vector< casadi::MX > m3 ;
  mxArray * _out;
  casadi::native_DM result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_value",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_value" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DM" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "{" "MX" "}" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->value((casadi::DM const &)*arg2,(std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = full_or_sparse(result, true))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type 'double'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
      "  Prototype:\n"
      "    VALUE(self,DM,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value__SWIG_3_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::SX *arg2 = 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > const &arg3_defvalue = std::vector< casadi::MX >() ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg3 = (std::vector< casadi::MX,std::allocator< casadi::MX > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::Matrix< casadi::SXElem > m2 ;
  std::vector< casadi::MX > m3 ;
  mxArray * _out;
  casadi::native_DM result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_value",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_value" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "SX" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "{" "MX" "}" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->value((casadi::SX const &)*arg2,(std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = full_or_sparse(result, true))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type 'double'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
      "  Prototype:\n"
      "    VALUE(self,SX,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::Matrix<double> **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_OptiSplineAdvanced_value__SWIG_3_1(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<casadi::MX> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_value__SWIG_3_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::Matrix<casadi::SXElem> **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_OptiSplineAdvanced_value__SWIG_3_2(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<casadi::MX> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_value__SWIG_3_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_value__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_OptiSplineAdvanced_value__SWIG_3_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<casadi::MX> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_value__SWIG_3_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_value__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_value__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_value'."
    "  Possible prototypes are:\n"
    "    VALUE(self,DM,{MX})\n"
    "    VALUE(self,SX,{MX})\n"
    "    VALUE(self,AnyTensor)\n"
    "    VALUE(self,MX,{MX})\n"
    "    VALUE(self,Coefficient)\n"
    "    VALUE(self,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineAdvanced_symvar__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  MT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  mxArray * _out;
  std::vector< casadi::MX,std::allocator< casadi::MX > > result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_symvar",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_symvar" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->symvar((MT const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "{" "MX" "}" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_symvar'."
      "  Prototype:\n"
      "    SYMVAR(self,MTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_symvar__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  MT *arg2 = 0 ;
  casadi::VariableType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  std::vector< casadi::MX,std::allocator< casadi::MX > > result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_symvar",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_symvar" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptiSplineAdvanced_symvar" "', argument " "3"" of type '" "casadi::VariableType""'");
  } 
  arg3 = static_cast< casadi::VariableType >(val3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->symvar((MT const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "{" "MX" "}" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_symvar'."
      "  Prototype:\n"
      "    SYMVAR(self,MTensor,casadi::VariableType)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_symvar__SWIG_2_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< casadi::MX,std::allocator< casadi::MX > > result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_symvar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_symvar" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->symvar();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "{" "MX" "}" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_symvar'."
      "  Prototype:\n"
      "    SYMVAR(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_symvar__SWIG_2_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::MX *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  mxArray * _out;
  std::vector< casadi::MX,std::allocator< casadi::MX > > result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_symvar",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_symvar" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->symvar((casadi::MX const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "{" "MX" "}" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_symvar'."
      "  Prototype:\n"
      "    SYMVAR(self,MX)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_symvar__SWIG_2_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::MX *arg2 = 0 ;
  casadi::VariableType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  std::vector< casadi::MX,std::allocator< casadi::MX > > result;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_symvar",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_symvar" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptiSplineAdvanced_symvar" "', argument " "3"" of type '" "casadi::VariableType""'");
  } 
  arg3 = static_cast< casadi::VariableType >(val3);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineAdvanced const *)arg1)->symvar((casadi::MX const &)*arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "{" "MX" "}" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_symvar'."
      "  Prototype:\n"
      "    SYMVAR(self,MX,casadi::VariableType)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_symvar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_OptiSplineAdvanced_symvar__SWIG_2_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_symvar__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_symvar__SWIG_2_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OptiSplineAdvanced_symvar__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OptiSplineAdvanced_symvar__SWIG_2_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_symvar'."
    "  Possible prototypes are:\n"
    "    SYMVAR(self)\n"
    "    SYMVAR(self,MTensor)\n"
    "    SYMVAR(self,MX)\n"
    "    SYMVAR(self,MTensor,casadi::VariableType)\n"
    "    SYMVAR(self,MX,casadi::VariableType)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineAdvanced_matlab_dump (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::Function *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::Function m2 ;
  std::string m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_matlab_dump",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_matlab_dump" "', argument " "1"" of type '" "OptiSplineAdvanced const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "char" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      ((OptiSplineAdvanced const *)arg1)->matlab_dump((casadi::Function const &)*arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_matlab_dump'."
      "  Prototype:\n"
      "    MATLAB_DUMP(self,Function,char)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_initial__SWIG_0_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_initial" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_initial__SWIG_0_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_initial" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_initial__SWIG_0_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_initial" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_value__SWIG_0_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_value" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Coefficient const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Coefficient,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_value__SWIG_0_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  spline::Function m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_value" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((spline::Function const &)*arg2,(spline::Function const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_value__SWIG_0_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  Tensor< casadi::MX > *arg2 = 0 ;
  Tensor< casadi::DM > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Tensor< casadi::MX > m2 ;
  Tensor< casadi::DM > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_value" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MTensor" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DTensor" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((Tensor< casadi::MX > const &)*arg2,(Tensor< casadi::DM > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,MTensor,DTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_initial__SWIG_1_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::MX *arg2 = 0 ;
  casadi::DM *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  casadi::Matrix< double > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_initial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_initial" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DM" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((casadi::MX const &)*arg2,(casadi::DM const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,MX,DM)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_initial__SWIG_1_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< casadi::MX > m2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_initial",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_initial" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "{" "MX" "}" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_initial((std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_initial'."
      "  Prototype:\n"
      "    SET_INITIAL(self,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_initial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<casadi::MX> **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_set_initial__SWIG_1_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< casadi::Matrix<double> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_initial__SWIG_1_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_initial__SWIG_0_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_initial__SWIG_0_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_initial__SWIG_0_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_initial'."
    "  Possible prototypes are:\n"
    "    SET_INITIAL(self,{MX})\n"
    "    SET_INITIAL(self,MX,DM)\n"
    "    SET_INITIAL(self,MTensor,DTensor)\n"
    "    SET_INITIAL(self,Coefficient,DTensor)\n"
    "    SET_INITIAL(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineAdvanced_set_value__SWIG_1_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  casadi::MX *arg2 = 0 ;
  casadi::DM *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  casadi::Matrix< double > m3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_value",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_value" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  arg3 = &m3;
  if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "DM" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((casadi::MX const &)*arg2,(casadi::DM const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,MX,DM)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_value__SWIG_1_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< casadi::MX > m2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("OptiSplineAdvanced_set_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineAdvanced_set_value" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "{" "MX" "}" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      (arg1)->set_value((std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_value'."
      "  Prototype:\n"
      "    SET_VALUE(self,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineAdvanced_set_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< std::vector<casadi::MX> **>(0));
      if (_v) {
        return _wrap_OptiSplineAdvanced_set_value__SWIG_1_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< casadi::Matrix<double> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_value__SWIG_1_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< Tensor<casadi::MX> **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_value__SWIG_0_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< Tensor<casadi::DM> **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_value__SWIG_0_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        _v = casadi::to_ptr(argv[2], static_cast< spline::Function **>(0));
        if (_v) {
          return _wrap_OptiSplineAdvanced_set_value__SWIG_0_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineAdvanced_set_value'."
    "  Possible prototypes are:\n"
    "    SET_VALUE(self,{MX})\n"
    "    SET_VALUE(self,MX,DM)\n"
    "    SET_VALUE(self,MTensor,DTensor)\n"
    "    SET_VALUE(self,Coefficient,DTensor)\n"
    "    SET_VALUE(self,Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_new_OptiSplineAdvanced__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSplineAdvanced *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineAdvanced",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSpline,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSplineAdvanced" "', argument " "1"" of type '" "OptiSpline const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSplineAdvanced" "', argument " "1"" of type '" "OptiSpline const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  {
    try {
      result = (OptiSplineAdvanced *)new OptiSplineAdvanced((OptiSpline const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineAdvanced, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineAdvanced'."
      "  Prototype:\n"
      "    OPTISPLINEADVANCED(OptiSpline)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineAdvanced__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSplineAdvanced *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineAdvanced",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSplineAdvanced,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSplineAdvanced" "', argument " "1"" of type '" "OptiSplineAdvanced const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSplineAdvanced" "', argument " "1"" of type '" "OptiSplineAdvanced const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  {
    try {
      result = (OptiSplineAdvanced *)new OptiSplineAdvanced((OptiSplineAdvanced const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineAdvanced, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineAdvanced'."
      "  Prototype:\n"
      "    OPTISPLINEADVANCED(OptiSplineAdvanced)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineAdvanced (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSplineAdvanced__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineAdvanced, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSplineAdvanced__SWIG_2(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineAdvanced'."
    "  Possible prototypes are:\n"
    "    OPTISPLINEADVANCED(OptiSpline)\n"
    "    OPTISPLINEADVANCED(OptiSplineAdvanced)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_OptiSplineAdvanced (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineAdvanced *arg1 = (OptiSplineAdvanced *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_OptiSplineAdvanced",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineAdvanced, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptiSplineAdvanced" "', argument " "1"" of type '" "OptiSplineAdvanced *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineAdvanced * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_OptiSplineAdvanced'."
      "  Prototype:\n"
      "    OPTISPLINEADVANCED(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineSol_value__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  spline::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("OptiSplineSol_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineSol_value" "', argument " "1"" of type '" "OptiSplineSol const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineSol const *)arg1)->value((spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_value'."
      "  Prototype:\n"
      "    VALUE(self,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineSol_value__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  spline::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  spline::Coefficient m2 ;
  mxArray * _out;
  spline::Coefficient result;
  
  if (!SWIG_check_num_args("OptiSplineSol_value",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineSol_value" "', argument " "1"" of type '" "OptiSplineSol const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Coefficient" "'.");
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineSol const *)arg1)->value((spline::Coefficient const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Coefficient" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_value'."
      "  Prototype:\n"
      "    VALUE(self,Coefficient)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineSol_value__SWIG_2_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  casadi::MX *arg2 = 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > const &arg3_defvalue = std::vector< casadi::MX >() ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg3 = (std::vector< casadi::MX,std::allocator< casadi::MX > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::MX m2 ;
  std::vector< casadi::MX > m3 ;
  mxArray * _out;
  casadi::native_DM result;
  
  if (!SWIG_check_num_args("OptiSplineSol_value",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineSol_value" "', argument " "1"" of type '" "OptiSplineSol const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "MX" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "{" "MX" "}" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineSol const *)arg1)->value((casadi::MX const &)*arg2,(std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = full_or_sparse(result, true))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type 'double'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_value'."
      "  Prototype:\n"
      "    VALUE(self,MX,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineSol_value__SWIG_2_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  casadi::DM *arg2 = 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > const &arg3_defvalue = std::vector< casadi::MX >() ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg3 = (std::vector< casadi::MX,std::allocator< casadi::MX > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::Matrix< double > m2 ;
  std::vector< casadi::MX > m3 ;
  mxArray * _out;
  casadi::native_DM result;
  
  if (!SWIG_check_num_args("OptiSplineSol_value",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineSol_value" "', argument " "1"" of type '" "OptiSplineSol const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "DM" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "{" "MX" "}" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineSol const *)arg1)->value((casadi::DM const &)*arg2,(std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = full_or_sparse(result, true))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type 'double'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_value'."
      "  Prototype:\n"
      "    VALUE(self,DM,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineSol_value__SWIG_2_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  casadi::SX *arg2 = 0 ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > const &arg3_defvalue = std::vector< casadi::MX >() ;
  std::vector< casadi::MX,std::allocator< casadi::MX > > *arg3 = (std::vector< casadi::MX,std::allocator< casadi::MX > > *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  casadi::Matrix< casadi::SXElem > m2 ;
  std::vector< casadi::MX > m3 ;
  mxArray * _out;
  casadi::native_DM result;
  
  if (!SWIG_check_num_args("OptiSplineSol_value",argc,3,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineSol_value" "', argument " "1"" of type '" "OptiSplineSol const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "SX" "'.");
  if (2<argc) {
    arg3 = &m3;
    if (!casadi::to_ptr(argv[2], &arg3)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 3 to type '" "{" "MX" "}" "'.");
  }
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineSol const *)arg1)->value((casadi::SX const &)*arg2,(std::vector< casadi::MX,std::allocator< casadi::MX > > const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = full_or_sparse(result, true))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type 'double'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_value'."
      "  Prototype:\n"
      "    VALUE(self,SX,{MX})\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_OptiSplineSol_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineSol, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::Matrix<double> **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_OptiSplineSol_value__SWIG_2_1(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<casadi::MX> **>(0));
        if (_v) {
          return _wrap_OptiSplineSol_value__SWIG_2_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineSol, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::Matrix<casadi::SXElem> **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_OptiSplineSol_value__SWIG_2_2(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<casadi::MX> **>(0));
        if (_v) {
          return _wrap_OptiSplineSol_value__SWIG_2_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineSol, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< casadi::MX **>(0));
      if (_v) {
        if (argc <= 2) {
          return _wrap_OptiSplineSol_value__SWIG_2_0(resc,resv,argc,argv);
        }
        _v = casadi::to_ptr(argv[2], static_cast< std::vector<casadi::MX> **>(0));
        if (_v) {
          return _wrap_OptiSplineSol_value__SWIG_2_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineSol, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Coefficient **>(0));
      if (_v) {
        return _wrap_OptiSplineSol_value__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineSol, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_OptiSplineSol_value__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_value'."
    "  Possible prototypes are:\n"
    "    VALUE(self,DM,{MX})\n"
    "    VALUE(self,SX,{MX})\n"
    "    VALUE(self,MX,{MX})\n"
    "    VALUE(self,Coefficient)\n"
    "    VALUE(self,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_OptiSplineSol_opti (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSpline result;
  
  if (!SWIG_check_num_args("OptiSplineSol_opti",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptiSplineSol_opti" "', argument " "1"" of type '" "OptiSplineSol const *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  {
    try {
      result = ((OptiSplineSol const *)arg1)->opti();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj((new OptiSpline(static_cast< const OptiSpline& >(result))), SWIGTYPE_p_OptiSpline, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'OptiSplineSol_opti'."
      "  Prototype:\n"
      "    OPTI(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineSol__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSpline *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSplineSol *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineSol",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSpline,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSplineSol" "', argument " "1"" of type '" "OptiSpline const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSplineSol" "', argument " "1"" of type '" "OptiSpline const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSpline * >(argp1);
  {
    try {
      result = (OptiSplineSol *)new OptiSplineSol((OptiSpline const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineSol, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineSol'."
      "  Prototype:\n"
      "    OPTISPLINESOL(OptiSpline)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineSol__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  OptiSplineSol *result = 0 ;
  
  if (!SWIG_check_num_args("new_OptiSplineSol",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_OptiSplineSol,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptiSplineSol" "', argument " "1"" of type '" "OptiSplineSol const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptiSplineSol" "', argument " "1"" of type '" "OptiSplineSol const &""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  {
    try {
      result = (OptiSplineSol *)new OptiSplineSol((OptiSplineSol const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OptiSplineSol, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineSol'."
      "  Prototype:\n"
      "    OPTISPLINESOL(OptiSplineSol)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_new_OptiSplineSol (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSpline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSplineSol__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OptiSplineSol, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptiSplineSol__SWIG_2(resc,resv,argc,argv);
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_OptiSplineSol'."
    "  Possible prototypes are:\n"
    "    OPTISPLINESOL(OptiSpline)\n"
    "    OPTISPLINESOL(OptiSplineSol)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_delete_OptiSplineSol (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  OptiSplineSol *arg1 = (OptiSplineSol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_OptiSplineSol",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OptiSplineSol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptiSplineSol" "', argument " "1"" of type '" "OptiSplineSol *""'"); 
  }
  arg1 = reinterpret_cast< OptiSplineSol * >(argp1);
  
  if (!arg1) {
    SWIG_Error(SWIG_RuntimeError, "Invalid 'self' object");
    SWIG_fail;
  }
  
  if (is_owned) {
    {
      try {
        delete arg1;
      } catch(const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'delete_OptiSplineSol'."
      "  Prototype:\n"
      "    OPTISPLINESOL(self)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_plus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("spline_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_plus((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_plus'."
      "  Prototype:\n"
      "    SPLINE_PLUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("spline_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_minus((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_minus'."
      "  Prototype:\n"
      "    SPLINE_MINUS(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_times__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("spline_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_times((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_times'."
      "  Prototype:\n"
      "    SPLINE_TIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("spline_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_mtimes((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_mtimes'."
      "  Prototype:\n"
      "    SPLINE_MTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_rmtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  AnyTensor m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  AnyTensor result;
  
  if (!SWIG_check_num_args("spline_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_rmtimes((AnyTensor const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "AnyTensor" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_rmtimes'."
      "  Prototype:\n"
      "    SPLINE_RMTIMES(AnyTensor,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_power (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  int arg2 ;
  spline::Function m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_power",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  if (!casadi::to_val(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "int" "'.");
  {
    try {
      result = spline::spline_power((spline::Function const &)*arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_power'."
      "  Prototype:\n"
      "    SPLINE_POWER(Function,int)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_plus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_plus((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_plus'."
      "  Prototype:\n"
      "    SPLINE_PLUS(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_minus((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_minus'."
      "  Prototype:\n"
      "    SPLINE_MINUS(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_times__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_times((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_times'."
      "  Prototype:\n"
      "    SPLINE_TIMES(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_mtimes((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_mtimes'."
      "  Prototype:\n"
      "    SPLINE_MTIMES(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_rmtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  spline::Function m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_rmtimes((spline::Function const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_rmtimes'."
      "  Prototype:\n"
      "    SPLINE_RMTIMES(Function,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_plus__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_plus((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_plus'."
      "  Prototype:\n"
      "    SPLINE_PLUS(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_minus__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_minus((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_minus'."
      "  Prototype:\n"
      "    SPLINE_MINUS(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_times__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_times((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_times'."
      "  Prototype:\n"
      "    SPLINE_TIMES(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_mtimes((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_mtimes'."
      "  Prototype:\n"
      "    SPLINE_MTIMES(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_rmtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  spline::Function *arg1 = 0 ;
  AnyTensor *arg2 = 0 ;
  spline::Function m1 ;
  AnyTensor m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "Function" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "AnyTensor" "'.");
  {
    try {
      result = spline::spline_rmtimes((spline::Function const &)*arg1,(AnyTensor const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_rmtimes'."
      "  Prototype:\n"
      "    SPLINE_RMTIMES(Function,AnyTensor)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_plus__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_plus((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_plus'."
      "  Prototype:\n"
      "    SPLINE_PLUS(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_plus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_plus__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_plus__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_plus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_plus'."
    "  Possible prototypes are:\n"
    "    SPLINE_PLUS(AnyTensor,AnyTensor)\n"
    "    SPLINE_PLUS(AnyTensor,Function)\n"
    "    SPLINE_PLUS(Function,AnyTensor)\n"
    "    SPLINE_PLUS(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_spline_minus__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_minus((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_minus'."
      "  Prototype:\n"
      "    SPLINE_MINUS(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_minus__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_minus__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_minus'."
    "  Possible prototypes are:\n"
    "    SPLINE_MINUS(AnyTensor,AnyTensor)\n"
    "    SPLINE_MINUS(AnyTensor,Function)\n"
    "    SPLINE_MINUS(Function,AnyTensor)\n"
    "    SPLINE_MINUS(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_spline_times__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_times",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_times((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_times'."
      "  Prototype:\n"
      "    SPLINE_TIMES(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_times (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_times__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_times__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_times__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_times__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_times'."
    "  Possible prototypes are:\n"
    "    SPLINE_TIMES(AnyTensor,AnyTensor)\n"
    "    SPLINE_TIMES(AnyTensor,Function)\n"
    "    SPLINE_TIMES(Function,AnyTensor)\n"
    "    SPLINE_TIMES(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_spline_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_mtimes((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_mtimes'."
      "  Prototype:\n"
      "    SPLINE_MTIMES(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_mtimes'."
    "  Possible prototypes are:\n"
    "    SPLINE_MTIMES(AnyTensor,AnyTensor)\n"
    "    SPLINE_MTIMES(AnyTensor,Function)\n"
    "    SPLINE_MTIMES(Function,AnyTensor)\n"
    "    SPLINE_MTIMES(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_spline_rmtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  AnyTensor *arg1 = 0 ;
  spline::Function *arg2 = 0 ;
  AnyTensor m1 ;
  spline::Function m2 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_rmtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "AnyTensor" "'.");
  arg2 = &m2;
  if (!casadi::to_ptr(argv[1], &arg2)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 2 to type '" "Function" "'.");
  {
    try {
      result = spline::spline_rmtimes((AnyTensor const &)*arg1,(spline::Function const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_rmtimes'."
      "  Prototype:\n"
      "    SPLINE_RMTIMES(AnyTensor,Function)\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_rmtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_rmtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< AnyTensor **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_rmtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< AnyTensor **>(0));
      if (_v) {
        return _wrap_spline_rmtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = casadi::to_ptr(argv[0], static_cast< spline::Function **>(0));
    if (_v) {
      _v = casadi::to_ptr(argv[1], static_cast< spline::Function **>(0));
      if (_v) {
        return _wrap_spline_rmtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_rmtimes'."
    "  Possible prototypes are:\n"
    "    SPLINE_RMTIMES(AnyTensor,AnyTensor)\n"
    "    SPLINE_RMTIMES(AnyTensor,Function)\n"
    "    SPLINE_RMTIMES(Function,AnyTensor)\n"
    "    SPLINE_RMTIMES(Function,Function)\n"
    
    "  You have: %s\n", type_name);
  return 1;
}


int _wrap_spline_vertcat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Function,std::allocator< spline::Function > > *arg1 = 0 ;
  std::vector< spline::Function > m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_vertcat",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Function]" "'.");
  {
    try {
      result = spline::spline_vertcat((std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_vertcat'."
      "  Prototype:\n"
      "    SPLINE_VERTCAT([Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_horzcat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Function,std::allocator< spline::Function > > *arg1 = 0 ;
  std::vector< spline::Function > m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_horzcat",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Function]" "'.");
  {
    try {
      result = spline::spline_horzcat((std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_horzcat'."
      "  Prototype:\n"
      "    SPLINE_HORZCAT([Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}


int _wrap_spline_blkdiag (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< spline::Function,std::allocator< spline::Function > > *arg1 = 0 ;
  std::vector< spline::Function > m1 ;
  mxArray * _out;
  spline::Function result;
  
  if (!SWIG_check_num_args("spline_blkdiag",argc,1,1,0)) {
    SWIG_fail;
  }
  arg1 = &m1;
  if (!casadi::to_ptr(argv[0], &arg1)) SWIG_exception_fail(SWIG_TypeError,"Failed to convert input 1 to type '" "[Function]" "'.");
  {
    try {
      result = spline::spline_blkdiag((std::vector< spline::Function,std::allocator< spline::Function > > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  if(!(_out = casadi::from_ref(result))) SWIG_exception_fail(SWIG_TypeError,"Failed to convert output to type '" "Function" "'.");
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  if (SWIG_lasterror_code == SWIG_TypeError) {
    const char* type_name = SWIG_Matlab_ArgsTypeDesc(argc, argv);
    SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'spline_blkdiag'."
      "  Prototype:\n"
      "    SPLINE_BLKDIAG([Function])\n"
      
      "  You have: %s\n", type_name);
  }
  return 1;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_casadi__SliceTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Slice *) x));
}
static void *_p_casadi__MatrixT_casadi__SXElem_tTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Matrix< casadi::SXElem > *) x));
}
static void *_p_casadi__OptiAdvancedTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *) (casadi::Opti *) ((casadi::OptiAdvanced *) x));
}
static void *_p_OptiSplineAdvancedTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *) (casadi::Opti *)(casadi::OptiAdvanced *) ((OptiSplineAdvanced *) x));
}
static void *_p_casadi__SparsityTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Sparsity *) x));
}
static void *_p_OptiSplineTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *) (casadi::Opti *) ((OptiSpline *) x));
}
static void *_p_casadi__FunctionTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Function *) x));
}
static void *_p_casadi__OptiTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Opti *) x));
}
static void *_p_casadi__CallbackTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *) (casadi::Function *) ((casadi::Callback *) x));
}
static void *_p_casadi__MatrixT_double_tTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Matrix< double > *) x));
}
static void *_p_casadi__OptiSolTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::OptiSol *) x));
}
static void *_p_casadi__DaeBuilderTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::DaeBuilder *) x));
}
static void *_p_casadi__VariableTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Variable *) x));
}
static void *_p_casadi__NlpBuilderTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::NlpBuilder *) x));
}
static void *_p_OptiSplineSolTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *) (casadi::OptiSol *) ((OptiSplineSol *) x));
}
static void *_p_casadi__GenericTypeTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::GenericType *) x));
}
static void *_p_casadi__MXTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::MX *) x));
}
static void *_p_casadi__LinsolTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Linsol *) x));
}
static void *_p_casadi__ImporterTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Importer *) x));
}
static void *_p_casadi__MatrixT_int_tTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::Matrix< int > *) x));
}
static void *_p_casadi__XmlFileTo_p_casadi__PrintableCommon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::PrintableCommon *)  ((casadi::XmlFile *) x));
}
static void *_p_spline__IntervalTo_p_spline__Domain(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Domain *)  ((spline::Interval *) x));
}
static void *_p_OptiSplineSolTo_p_casadi__OptiSol(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::OptiSol *)  ((OptiSplineSol *) x));
}
static void *_p_spline__MonomialBasisTo_p_spline__UnivariateBasis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::UnivariateBasis *)  ((spline::MonomialBasis *) x));
}
static void *_p_spline__BSplineBasisTo_p_spline__UnivariateBasis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::UnivariateBasis *)  ((spline::BSplineBasis *) x));
}
static void *_p_OptiSplineAdvancedTo_p_OptiSplineInterfaceT_OptiSplineAdvanced_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OptiSplineInterface< OptiSplineAdvanced > *)  ((OptiSplineAdvanced *) x));
}
static void *_p_OptiSplineTo_p_OptiSplineInterfaceT_OptiSpline_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OptiSplineInterface< OptiSpline > *)  ((OptiSpline *) x));
}
static void *_p_spline__ArgumentTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::Argument *) x));
}
static void *_p_spline__SharedObjectTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *)  ((spline::SharedObject *) x));
}
static void *_p_spline__ParameterTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *)(spline::Function *)(spline::Polynomial *) ((spline::Parameter *) x));
}
static void *_p_spline__TensorBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::TensorBasis *) x));
}
static void *_p_spline__CoefficientTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::Coefficient *) x));
}
static void *_p_spline__IntervalTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *)(spline::Domain *) ((spline::Interval *) x));
}
static void *_p_spline__BSplineBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *)(spline::Basis *)(spline::UnivariateBasis *) ((spline::BSplineBasis *) x));
}
static void *_p_spline__UnivariateBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *)(spline::Basis *) ((spline::UnivariateBasis *) x));
}
static void *_p_spline__FunctionTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::Function *) x));
}
static void *_p_spline__MonomialBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *)(spline::Basis *)(spline::UnivariateBasis *) ((spline::MonomialBasis *) x));
}
static void *_p_spline__PolynomialTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *)(spline::Function *) ((spline::Polynomial *) x));
}
static void *_p_spline__TensorDomainTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::TensorDomain *) x));
}
static void *_p_spline__DomainTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::Domain *) x));
}
static void *_p_spline__BasisTo_p_spline__PrintableObjectT_spline__SharedObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< spline::SharedObject > *) (spline::SharedObject *) ((spline::Basis *) x));
}
static void *_p_OptiSplineTo_p_casadi__Opti(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::Opti *)  ((OptiSpline *) x));
}
static void *_p_casadi__OptiAdvancedTo_p_casadi__Opti(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::Opti *)  ((casadi::OptiAdvanced *) x));
}
static void *_p_OptiSplineAdvancedTo_p_casadi__Opti(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::Opti *) (casadi::OptiAdvanced *) ((OptiSplineAdvanced *) x));
}
static void *_p_TensorT_casadi__MatrixT_casadi__SXElem_t_tTo_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< Tensor< casadi::SX > > *)  ((Tensor< casadi::Matrix< casadi::SXElem > > *) x));
}
static void *_p_TensorT_casadi__MatrixT_double_t_tTo_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< Tensor< casadi::DM > > *)  ((Tensor< casadi::Matrix< double > > *) x));
}
static void *_p_TensorT_casadi__MX_tTo_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::PrintableObject< Tensor< casadi::MX > > *)  ((Tensor< casadi::MX > *) x));
}
static void *_p_OptiSplineAdvancedTo_p_casadi__OptiAdvanced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::OptiAdvanced *)  ((OptiSplineAdvanced *) x));
}
static void *_p_spline__MonomialBasisTo_p_spline__Basis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Basis *) (spline::UnivariateBasis *) ((spline::MonomialBasis *) x));
}
static void *_p_spline__UnivariateBasisTo_p_spline__Basis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Basis *)  ((spline::UnivariateBasis *) x));
}
static void *_p_spline__BSplineBasisTo_p_spline__Basis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Basis *) (spline::UnivariateBasis *) ((spline::BSplineBasis *) x));
}
static void *_p_spline__ParameterTo_p_spline__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Function *) (spline::Polynomial *) ((spline::Parameter *) x));
}
static void *_p_spline__PolynomialTo_p_spline__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Function *)  ((spline::Polynomial *) x));
}
static void *_p_casadi__CallbackTo_p_casadi__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::Function *)  ((casadi::Callback *) x));
}
static void *_p_spline__TensorBasisTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::TensorBasis *) x));
}
static void *_p_spline__MonomialBasisTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *) (spline::Basis *)(spline::UnivariateBasis *) ((spline::MonomialBasis *) x));
}
static void *_p_spline__FunctionTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::Function *) x));
}
static void *_p_spline__ParameterTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *) (spline::Function *)(spline::Polynomial *) ((spline::Parameter *) x));
}
static void *_p_spline__IntervalTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *) (spline::Domain *) ((spline::Interval *) x));
}
static void *_p_spline__BasisTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::Basis *) x));
}
static void *_p_spline__UnivariateBasisTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *) (spline::Basis *) ((spline::UnivariateBasis *) x));
}
static void *_p_spline__BSplineBasisTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *) (spline::Basis *)(spline::UnivariateBasis *) ((spline::BSplineBasis *) x));
}
static void *_p_spline__DomainTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::Domain *) x));
}
static void *_p_spline__TensorDomainTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::TensorDomain *) x));
}
static void *_p_spline__CoefficientTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::Coefficient *) x));
}
static void *_p_spline__ArgumentTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *)  ((spline::Argument *) x));
}
static void *_p_spline__PolynomialTo_p_spline__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::SharedObject *) (spline::Function *) ((spline::Polynomial *) x));
}
static void *_p_casadi__OptiTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::Opti *) x));
}
static void *_p_casadi__FunctionTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::Function *) x));
}
static void *_p_OptiSplineTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *) (casadi::Opti *) ((OptiSpline *) x));
}
static void *_p_casadi__ImporterTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::Importer *) x));
}
static void *_p_casadi__SparsityTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::Sparsity *) x));
}
static void *_p_casadi__MXTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::MX *) x));
}
static void *_p_casadi__CallbackTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *) (casadi::Function *) ((casadi::Callback *) x));
}
static void *_p_casadi__XmlFileTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::XmlFile *) x));
}
static void *_p_casadi__WeakRefTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::WeakRef *) x));
}
static void *_p_casadi__LinsolTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *)  ((casadi::Linsol *) x));
}
static void *_p_casadi__OptiAdvancedTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *) (casadi::Opti *) ((casadi::OptiAdvanced *) x));
}
static void *_p_OptiSplineAdvancedTo_p_casadi__SharedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((casadi::SharedObject *) (casadi::Opti *)(casadi::OptiAdvanced *) ((OptiSplineAdvanced *) x));
}
static void *_p_spline__ParameterTo_p_spline__Polynomial(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((spline::Polynomial *)  ((spline::Parameter *) x));
}
static swig_type_info _swigt__p_AnySlice = {"_p_AnySlice", "AnySlice *", 0, 0, (void*)"splines.AnySlice", 0};
static swig_type_info _swigt__p_AuxOut = {"_p_AuxOut", "AuxOut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OptiSpline = {"_p_OptiSpline", "OptiSpline *", 0, 0, (void*)"splines.OptiSpline", 0};
static swig_type_info _swigt__p_OptiSplineAdvanced = {"_p_OptiSplineAdvanced", "OptiSplineAdvanced *", 0, 0, (void*)"splines.OptiSplineAdvanced", 0};
static swig_type_info _swigt__p_OptiSplineInterfaceT_OptiSplineAdvanced_t = {"_p_OptiSplineInterfaceT_OptiSplineAdvanced_t", "OptiSplineInterface< OptiSplineAdvanced > *", 0, 0, (void*)"splines.OptiSplineAdvancedI", 0};
static swig_type_info _swigt__p_OptiSplineInterfaceT_OptiSpline_t = {"_p_OptiSplineInterfaceT_OptiSpline_t", "OptiSplineInterface< OptiSpline > *", 0, 0, (void*)"splines.OptiSplineI", 0};
static swig_type_info _swigt__p_OptiSplineSol = {"_p_OptiSplineSol", "OptiSplineSol *", 0, 0, (void*)"splines.OptiSplineSol", 0};
static swig_type_info _swigt__p_Parameter = {"_p_Parameter", "Parameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TensorBasis = {"_p_TensorBasis", "TensorBasis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TensorT_casadi__MX_t = {"_p_TensorT_casadi__MX_t", "MT *|Tensor< casadi::MX > *|spline::MT *", 0, 0, (void*)"splines.MTensor", 0};
static swig_type_info _swigt__p_TensorT_casadi__MatrixT_casadi__SXElem_t_t = {"_p_TensorT_casadi__MatrixT_casadi__SXElem_t_t", "Tensor< casadi::Matrix< casadi::SXElem > > *|ST *|Tensor< casadi::SX > *|spline::ST *", 0, 0, (void*)"splines.STensor", 0};
static swig_type_info _swigt__p_TensorT_casadi__MatrixT_double_t_t = {"_p_TensorT_casadi__MatrixT_double_t_t", "Tensor< casadi::Matrix< double > > *|DT *|spline::DT *|Tensor< casadi::DM > *", 0, 0, (void*)"splines.DTensor", 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__Function = {"_p_casadi__Function", "casadi::Function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__Callback = {"_p_casadi__Callback", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__GenericType = {"_p_casadi__GenericType", "casadi::GenericType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__MX = {"_p_casadi__MX", "casadi::MX *|MX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__MatrixT_casadi__SXElem_t = {"_p_casadi__MatrixT_casadi__SXElem_t", "casadi::Matrix< casadi::SXElem > *|casadi::SX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__MatrixT_double_t = {"_p_casadi__MatrixT_double_t", "casadi::DM *|casadi::Matrix< double > *|casadi::native_DM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__MatrixT_int_t = {"_p_casadi__MatrixT_int_t", "casadi::IM *|casadi::Matrix< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__Opti = {"_p_casadi__Opti", "casadi::Opti *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__OptiAdvanced = {"_p_casadi__OptiAdvanced", "casadi::OptiAdvanced *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__OptiSol = {"_p_casadi__OptiSol", "casadi::OptiSol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__PrintableCommon = {"_p_casadi__PrintableCommon", "casadi::PrintableCommon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__Variable = {"_p_casadi__Variable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__DaeBuilder = {"_p_casadi__DaeBuilder", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__NlpBuilder = {"_p_casadi__NlpBuilder", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__Linsol = {"_p_casadi__Linsol", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__Importer = {"_p_casadi__Importer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__XmlFile = {"_p_casadi__XmlFile", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__SharedObject = {"_p_casadi__SharedObject", "casadi::SharedObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__WeakRef = {"_p_casadi__WeakRef", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_casadi__Slice = {"_p_casadi__Slice", "casadi::Slice *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_casadi__Sparsity = {"_p_casadi__Sparsity", "casadi::Sparsity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|spline::NumericIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_spline__Argument = {"_p_spline__Argument", "spline::Argument *", 0, 0, (void*)"splines.Argument", 0};
static swig_type_info _swigt__p_spline__BSplineBasis = {"_p_spline__BSplineBasis", "spline::BSplineBasis *", 0, 0, (void*)"splines.BSplineBasis", 0};
static swig_type_info _swigt__p_spline__Basis = {"_p_spline__Basis", "spline::Basis *", 0, 0, (void*)"splines.Basis", 0};
static swig_type_info _swigt__p_spline__Coefficient = {"_p_spline__Coefficient", "spline::Coefficient *", 0, 0, (void*)"splines.Coefficient", 0};
static swig_type_info _swigt__p_spline__Domain = {"_p_spline__Domain", "spline::Domain *", 0, 0, (void*)"splines.Domain", 0};
static swig_type_info _swigt__p_spline__Function = {"_p_spline__Function", "spline::Function *", 0, 0, (void*)"splines.Function", 0};
static swig_type_info _swigt__p_spline__Interval = {"_p_spline__Interval", "spline::Interval *", 0, 0, (void*)"splines.Interval", 0};
static swig_type_info _swigt__p_spline__MonomialBasis = {"_p_spline__MonomialBasis", "spline::MonomialBasis *", 0, 0, (void*)"splines.MonomialBasis", 0};
static swig_type_info _swigt__p_spline__Parameter = {"_p_spline__Parameter", "spline::Parameter *", 0, 0, (void*)"splines.Parameter", 0};
static swig_type_info _swigt__p_spline__Polynomial = {"_p_spline__Polynomial", "spline::Polynomial *", 0, 0, (void*)"splines.Polynomial", 0};
static swig_type_info _swigt__p_spline__PrintableObjectT_TensorT_casadi__DM_t_t = {"_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t", "spline::PrintableObject< Tensor< casadi::DM > > *|spline::PrintableObject< Tensor< casadi::Matrix< double > > > *", 0, 0, (void*)"splines.PrintDT", 0};
static swig_type_info _swigt__p_spline__PrintableObjectT_TensorT_casadi__MX_t_t = {"_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t", "spline::PrintableObject< Tensor< casadi::MX > > *", 0, 0, (void*)"splines.PrintMT", 0};
static swig_type_info _swigt__p_spline__PrintableObjectT_TensorT_casadi__SX_t_t = {"_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t", "spline::PrintableObject< Tensor< casadi::Matrix< casadi::SXElem > > > *|spline::PrintableObject< Tensor< casadi::SX > > *", 0, 0, (void*)"splines.PrintST", 0};
static swig_type_info _swigt__p_spline__PrintableObjectT_spline__SharedObject_t = {"_p_spline__PrintableObjectT_spline__SharedObject_t", "spline::PrintableObject< spline::SharedObject > *", 0, 0, (void*)"splines.PrintSharedObject", 0};
static swig_type_info _swigt__p_spline__SharedObject = {"_p_spline__SharedObject", "spline::SharedObject *", 0, 0, (void*)"splines.SharedObject", 0};
static swig_type_info _swigt__p_spline__TensorBasis = {"_p_spline__TensorBasis", "spline::TensorBasis *", 0, 0, (void*)"splines.TensorBasis", 0};
static swig_type_info _swigt__p_spline__TensorDomain = {"_p_spline__TensorDomain", "spline::TensorDomain *", 0, 0, (void*)"splines.TensorDomain", 0};
static swig_type_info _swigt__p_spline__UnivariateBasis = {"_p_spline__UnivariateBasis", "spline::UnivariateBasis *", 0, 0, (void*)"splines.UnivariateBasis", 0};
static swig_type_info _swigt__p_std__initializer_listT_casadi__MX_t = {"_p_std__initializer_listT_casadi__MX_t", "casadi::MXIList *|std::initializer_list< casadi::MX > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t = {"_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t", "std::initializer_list< casadi::Matrix< casadi::SXElem > > *|casadi::SXIList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t = {"_p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t", "std::map< std::string,casadi::GenericType,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::GenericType > > > *|casadi::Dict *|Dict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t = {"_p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t", "std::map< std::string,casadi::MX,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::MX > > > *|MXDict *|casadi::MXDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t = {"_p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t", "std::map< std::string,casadi::Matrix< casadi::SXElem >,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::Matrix< casadi::SXElem > > > > *|casadi::SXDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t = {"_p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t", "std::map< std::string,casadi::Matrix< double >,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::Matrix< double > > > > *|casadi::DMDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t = {"_p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t", "std::map< std::string,casadi::Sparsity,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::Sparsity > > > *|casadi::SpDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t = {"_p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t", "std::vector< Parameter,std::allocator< spline::Parameter > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t = {"_p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t", "std::vector< casadi::MX,std::allocator< casadi::MX > > *|casadi::MXVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t = {"_p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t", "std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > *|casadi::SXVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t = {"_p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t", "std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > *|casadi::DMVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|spline::NumericIndexVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t = {"_p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t", "std::vector< spline::Argument,std::allocator< spline::Argument > > *|std::vector< spline::Argument > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t = {"_p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t", "std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > > *|casadi::MXVectorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t", "std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > > *|casadi::SXVectorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t", "std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > > *|casadi::DMVectorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__MatlabSwigIterator = {"_p_swig__MatlabSwigIterator", "swig::MatlabSwigIterator *", 0, 0, (void*)"splines.MatlabSwigIterator", 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AnySlice,
  &_swigt__p_AuxOut,
  &_swigt__p_OptiSpline,
  &_swigt__p_OptiSplineAdvanced,
  &_swigt__p_OptiSplineInterfaceT_OptiSplineAdvanced_t,
  &_swigt__p_OptiSplineInterfaceT_OptiSpline_t,
  &_swigt__p_OptiSplineSol,
  &_swigt__p_Parameter,
  &_swigt__p_TensorBasis,
  &_swigt__p_TensorT_casadi__MX_t,
  &_swigt__p_TensorT_casadi__MatrixT_casadi__SXElem_t_t,
  &_swigt__p_TensorT_casadi__MatrixT_double_t_t,
  &_swigt__p_allocator_type,
  &_swigt__p_casadi__Callback,
  &_swigt__p_casadi__DaeBuilder,
  &_swigt__p_casadi__Function,
  &_swigt__p_casadi__GenericType,
  &_swigt__p_casadi__Importer,
  &_swigt__p_casadi__Linsol,
  &_swigt__p_casadi__MX,
  &_swigt__p_casadi__MatrixT_casadi__SXElem_t,
  &_swigt__p_casadi__MatrixT_double_t,
  &_swigt__p_casadi__MatrixT_int_t,
  &_swigt__p_casadi__NlpBuilder,
  &_swigt__p_casadi__Opti,
  &_swigt__p_casadi__OptiAdvanced,
  &_swigt__p_casadi__OptiSol,
  &_swigt__p_casadi__PrintableCommon,
  &_swigt__p_casadi__SharedObject,
  &_swigt__p_casadi__Slice,
  &_swigt__p_casadi__Sparsity,
  &_swigt__p_casadi__Variable,
  &_swigt__p_casadi__WeakRef,
  &_swigt__p_casadi__XmlFile,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_reference,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_spline__Argument,
  &_swigt__p_spline__BSplineBasis,
  &_swigt__p_spline__Basis,
  &_swigt__p_spline__Coefficient,
  &_swigt__p_spline__Domain,
  &_swigt__p_spline__Function,
  &_swigt__p_spline__Interval,
  &_swigt__p_spline__MonomialBasis,
  &_swigt__p_spline__Parameter,
  &_swigt__p_spline__Polynomial,
  &_swigt__p_spline__PrintableObjectT_TensorT_casadi__DM_t_t,
  &_swigt__p_spline__PrintableObjectT_TensorT_casadi__MX_t_t,
  &_swigt__p_spline__PrintableObjectT_TensorT_casadi__SX_t_t,
  &_swigt__p_spline__PrintableObjectT_spline__SharedObject_t,
  &_swigt__p_spline__SharedObject,
  &_swigt__p_spline__TensorBasis,
  &_swigt__p_spline__TensorDomain,
  &_swigt__p_spline__UnivariateBasis,
  &_swigt__p_std__initializer_listT_casadi__MX_t,
  &_swigt__p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t,
  &_swigt__p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t,
  &_swigt__p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t,
  &_swigt__p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t,
  &_swigt__p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t,
  &_swigt__p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t,
  &_swigt__p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t,
  &_swigt__p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t,
  &_swigt__p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t,
  &_swigt__p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t,
  &_swigt__p_swig__MatlabSwigIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_AnySlice[] = {  {&_swigt__p_AnySlice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AuxOut[] = {  {&_swigt__p_AuxOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptiSpline[] = {  {&_swigt__p_OptiSpline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptiSplineAdvanced[] = {  {&_swigt__p_OptiSplineAdvanced, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptiSplineInterfaceT_OptiSplineAdvanced_t[] = {  {&_swigt__p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0, 0, 0},  {&_swigt__p_OptiSplineAdvanced, _p_OptiSplineAdvancedTo_p_OptiSplineInterfaceT_OptiSplineAdvanced_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptiSplineInterfaceT_OptiSpline_t[] = {  {&_swigt__p_OptiSplineInterfaceT_OptiSpline_t, 0, 0, 0},  {&_swigt__p_OptiSpline, _p_OptiSplineTo_p_OptiSplineInterfaceT_OptiSpline_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptiSplineSol[] = {  {&_swigt__p_OptiSplineSol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parameter[] = {  {&_swigt__p_Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TensorBasis[] = {  {&_swigt__p_TensorBasis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TensorT_casadi__MX_t[] = {  {&_swigt__p_TensorT_casadi__MX_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TensorT_casadi__MatrixT_casadi__SXElem_t_t[] = {  {&_swigt__p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TensorT_casadi__MatrixT_double_t_t[] = {  {&_swigt__p_TensorT_casadi__MatrixT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Callback[] = {{&_swigt__p_casadi__Callback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Function[] = {  {&_swigt__p_casadi__Function, 0, 0, 0},  {&_swigt__p_casadi__Callback, _p_casadi__CallbackTo_p_casadi__Function, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__GenericType[] = {  {&_swigt__p_casadi__GenericType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__MX[] = {  {&_swigt__p_casadi__MX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__MatrixT_casadi__SXElem_t[] = {  {&_swigt__p_casadi__MatrixT_casadi__SXElem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__MatrixT_double_t[] = {  {&_swigt__p_casadi__MatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__MatrixT_int_t[] = {  {&_swigt__p_casadi__MatrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Opti[] = {  {&_swigt__p_OptiSpline, _p_OptiSplineTo_p_casadi__Opti, 0, 0},  {&_swigt__p_casadi__Opti, 0, 0, 0},  {&_swigt__p_casadi__OptiAdvanced, _p_casadi__OptiAdvancedTo_p_casadi__Opti, 0, 0},  {&_swigt__p_OptiSplineAdvanced, _p_OptiSplineAdvancedTo_p_casadi__Opti, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__OptiAdvanced[] = {  {&_swigt__p_casadi__OptiAdvanced, 0, 0, 0},  {&_swigt__p_OptiSplineAdvanced, _p_OptiSplineAdvancedTo_p_casadi__OptiAdvanced, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__OptiSol[] = {  {&_swigt__p_casadi__OptiSol, 0, 0, 0},  {&_swigt__p_OptiSplineSol, _p_OptiSplineSolTo_p_casadi__OptiSol, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Variable[] = {{&_swigt__p_casadi__Variable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__DaeBuilder[] = {{&_swigt__p_casadi__DaeBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__NlpBuilder[] = {{&_swigt__p_casadi__NlpBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Linsol[] = {{&_swigt__p_casadi__Linsol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Importer[] = {{&_swigt__p_casadi__Importer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__XmlFile[] = {{&_swigt__p_casadi__XmlFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__PrintableCommon[] = {  {&_swigt__p_casadi__MatrixT_casadi__SXElem_t, _p_casadi__MatrixT_casadi__SXElem_tTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Opti, _p_casadi__OptiTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__MX, _p_casadi__MXTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_OptiSplineAdvanced, _p_OptiSplineAdvancedTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__OptiAdvanced, _p_casadi__OptiAdvancedTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Slice, _p_casadi__SliceTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Sparsity, _p_casadi__SparsityTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_OptiSpline, _p_OptiSplineTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__MatrixT_double_t, _p_casadi__MatrixT_double_tTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Function, _p_casadi__FunctionTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__PrintableCommon, 0, 0, 0},  {&_swigt__p_casadi__Callback, _p_casadi__CallbackTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__OptiSol, _p_casadi__OptiSolTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Variable, _p_casadi__VariableTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__DaeBuilder, _p_casadi__DaeBuilderTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__NlpBuilder, _p_casadi__NlpBuilderTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Linsol, _p_casadi__LinsolTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_OptiSplineSol, _p_OptiSplineSolTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__MatrixT_int_t, _p_casadi__MatrixT_int_tTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__GenericType, _p_casadi__GenericTypeTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__Importer, _p_casadi__ImporterTo_p_casadi__PrintableCommon, 0, 0},  {&_swigt__p_casadi__XmlFile, _p_casadi__XmlFileTo_p_casadi__PrintableCommon, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__WeakRef[] = {{&_swigt__p_casadi__WeakRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__SharedObject[] = {  {&_swigt__p_casadi__Linsol, _p_casadi__LinsolTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__Function, _p_casadi__FunctionTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_OptiSpline, _p_OptiSplineTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__SharedObject, 0, 0, 0},  {&_swigt__p_casadi__Importer, _p_casadi__ImporterTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__MX, _p_casadi__MXTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__Opti, _p_casadi__OptiTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__Sparsity, _p_casadi__SparsityTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__Callback, _p_casadi__CallbackTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__XmlFile, _p_casadi__XmlFileTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__OptiAdvanced, _p_casadi__OptiAdvancedTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_OptiSplineAdvanced, _p_OptiSplineAdvancedTo_p_casadi__SharedObject, 0, 0},  {&_swigt__p_casadi__WeakRef, _p_casadi__WeakRefTo_p_casadi__SharedObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Slice[] = {  {&_swigt__p_casadi__Slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_casadi__Sparsity[] = {  {&_swigt__p_casadi__Sparsity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Argument[] = {  {&_swigt__p_spline__Argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__BSplineBasis[] = {  {&_swigt__p_spline__BSplineBasis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Basis[] = {  {&_swigt__p_spline__MonomialBasis, _p_spline__MonomialBasisTo_p_spline__Basis, 0, 0},  {&_swigt__p_spline__UnivariateBasis, _p_spline__UnivariateBasisTo_p_spline__Basis, 0, 0},  {&_swigt__p_spline__BSplineBasis, _p_spline__BSplineBasisTo_p_spline__Basis, 0, 0},  {&_swigt__p_spline__Basis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Coefficient[] = {  {&_swigt__p_spline__Coefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Domain[] = {  {&_swigt__p_spline__Interval, _p_spline__IntervalTo_p_spline__Domain, 0, 0},  {&_swigt__p_spline__Domain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Function[] = {  {&_swigt__p_spline__Function, 0, 0, 0},  {&_swigt__p_spline__Parameter, _p_spline__ParameterTo_p_spline__Function, 0, 0},  {&_swigt__p_spline__Polynomial, _p_spline__PolynomialTo_p_spline__Function, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Interval[] = {  {&_swigt__p_spline__Interval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__MonomialBasis[] = {  {&_swigt__p_spline__MonomialBasis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Parameter[] = {  {&_swigt__p_spline__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__Polynomial[] = {  {&_swigt__p_spline__Parameter, _p_spline__ParameterTo_p_spline__Polynomial, 0, 0},  {&_swigt__p_spline__Polynomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__PrintableObjectT_TensorT_casadi__DM_t_t[] = {  {&_swigt__p_spline__PrintableObjectT_TensorT_casadi__DM_t_t, 0, 0, 0},  {&_swigt__p_TensorT_casadi__MatrixT_double_t_t, _p_TensorT_casadi__MatrixT_double_t_tTo_p_spline__PrintableObjectT_TensorT_casadi__DM_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__PrintableObjectT_TensorT_casadi__MX_t_t[] = {  {&_swigt__p_TensorT_casadi__MX_t, _p_TensorT_casadi__MX_tTo_p_spline__PrintableObjectT_TensorT_casadi__MX_t_t, 0, 0},  {&_swigt__p_spline__PrintableObjectT_TensorT_casadi__MX_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__PrintableObjectT_TensorT_casadi__SX_t_t[] = {  {&_swigt__p_spline__PrintableObjectT_TensorT_casadi__SX_t_t, 0, 0, 0},  {&_swigt__p_TensorT_casadi__MatrixT_casadi__SXElem_t_t, _p_TensorT_casadi__MatrixT_casadi__SXElem_t_tTo_p_spline__PrintableObjectT_TensorT_casadi__SX_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__PrintableObjectT_spline__SharedObject_t[] = {  {&_swigt__p_spline__Argument, _p_spline__ArgumentTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__SharedObject, _p_spline__SharedObjectTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__Parameter, _p_spline__ParameterTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__TensorBasis, _p_spline__TensorBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__Coefficient, _p_spline__CoefficientTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__Interval, _p_spline__IntervalTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__UnivariateBasis, _p_spline__UnivariateBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__BSplineBasis, _p_spline__BSplineBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0, 0},  {&_swigt__p_spline__Domain, _p_spline__DomainTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__Function, _p_spline__FunctionTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__MonomialBasis, _p_spline__MonomialBasisTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__Polynomial, _p_spline__PolynomialTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__TensorDomain, _p_spline__TensorDomainTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},  {&_swigt__p_spline__Basis, _p_spline__BasisTo_p_spline__PrintableObjectT_spline__SharedObject_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__SharedObject[] = {  {&_swigt__p_spline__Argument, _p_spline__ArgumentTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__SharedObject, 0, 0, 0},  {&_swigt__p_spline__Parameter, _p_spline__ParameterTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__TensorBasis, _p_spline__TensorBasisTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__Coefficient, _p_spline__CoefficientTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__Interval, _p_spline__IntervalTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__UnivariateBasis, _p_spline__UnivariateBasisTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__BSplineBasis, _p_spline__BSplineBasisTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__Domain, _p_spline__DomainTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__Function, _p_spline__FunctionTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__MonomialBasis, _p_spline__MonomialBasisTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__Polynomial, _p_spline__PolynomialTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__TensorDomain, _p_spline__TensorDomainTo_p_spline__SharedObject, 0, 0},  {&_swigt__p_spline__Basis, _p_spline__BasisTo_p_spline__SharedObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__TensorBasis[] = {  {&_swigt__p_spline__TensorBasis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__TensorDomain[] = {  {&_swigt__p_spline__TensorDomain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spline__UnivariateBasis[] = {  {&_swigt__p_spline__MonomialBasis, _p_spline__MonomialBasisTo_p_spline__UnivariateBasis, 0, 0},  {&_swigt__p_spline__UnivariateBasis, 0, 0, 0},  {&_swigt__p_spline__BSplineBasis, _p_spline__BSplineBasisTo_p_spline__UnivariateBasis, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_casadi__MX_t[] = {  {&_swigt__p_std__initializer_listT_casadi__MX_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t[] = {  {&_swigt__p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t[] = {  {&_swigt__p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t[] = {  {&_swigt__p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t[] = {  {&_swigt__p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t[] = {  {&_swigt__p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__MatlabSwigIterator[] = {  {&_swigt__p_swig__MatlabSwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AnySlice,
  _swigc__p_AuxOut,
  _swigc__p_OptiSpline,
  _swigc__p_OptiSplineAdvanced,
  _swigc__p_OptiSplineInterfaceT_OptiSplineAdvanced_t,
  _swigc__p_OptiSplineInterfaceT_OptiSpline_t,
  _swigc__p_OptiSplineSol,
  _swigc__p_Parameter,
  _swigc__p_TensorBasis,
  _swigc__p_TensorT_casadi__MX_t,
  _swigc__p_TensorT_casadi__MatrixT_casadi__SXElem_t_t,
  _swigc__p_TensorT_casadi__MatrixT_double_t_t,
  _swigc__p_allocator_type,
  _swigc__p_casadi__Callback,
  _swigc__p_casadi__DaeBuilder,
  _swigc__p_casadi__Function,
  _swigc__p_casadi__GenericType,
  _swigc__p_casadi__Importer,
  _swigc__p_casadi__Linsol,
  _swigc__p_casadi__MX,
  _swigc__p_casadi__MatrixT_casadi__SXElem_t,
  _swigc__p_casadi__MatrixT_double_t,
  _swigc__p_casadi__MatrixT_int_t,
  _swigc__p_casadi__NlpBuilder,
  _swigc__p_casadi__Opti,
  _swigc__p_casadi__OptiAdvanced,
  _swigc__p_casadi__OptiSol,
  _swigc__p_casadi__PrintableCommon,
  _swigc__p_casadi__SharedObject,
  _swigc__p_casadi__Slice,
  _swigc__p_casadi__Sparsity,
  _swigc__p_casadi__Variable,
  _swigc__p_casadi__WeakRef,
  _swigc__p_casadi__XmlFile,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_reference,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_spline__Argument,
  _swigc__p_spline__BSplineBasis,
  _swigc__p_spline__Basis,
  _swigc__p_spline__Coefficient,
  _swigc__p_spline__Domain,
  _swigc__p_spline__Function,
  _swigc__p_spline__Interval,
  _swigc__p_spline__MonomialBasis,
  _swigc__p_spline__Parameter,
  _swigc__p_spline__Polynomial,
  _swigc__p_spline__PrintableObjectT_TensorT_casadi__DM_t_t,
  _swigc__p_spline__PrintableObjectT_TensorT_casadi__MX_t_t,
  _swigc__p_spline__PrintableObjectT_TensorT_casadi__SX_t_t,
  _swigc__p_spline__PrintableObjectT_spline__SharedObject_t,
  _swigc__p_spline__SharedObject,
  _swigc__p_spline__TensorBasis,
  _swigc__p_spline__TensorDomain,
  _swigc__p_spline__UnivariateBasis,
  _swigc__p_std__initializer_listT_casadi__MX_t,
  _swigc__p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t,
  _swigc__p_std__mapT_std__string_casadi__GenericType_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__GenericType_t_t_t,
  _swigc__p_std__mapT_std__string_casadi__MX_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MX_t_t_t,
  _swigc__p_std__mapT_std__string_casadi__MatrixT_casadi__SXElem_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_casadi__SXElem_t_t_t_t,
  _swigc__p_std__mapT_std__string_casadi__MatrixT_double_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__MatrixT_double_t_t_t_t,
  _swigc__p_std__mapT_std__string_casadi__Sparsity_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_casadi__Sparsity_t_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Parameter_std__allocatorT_spline__Parameter_t_t,
  _swigc__p_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t,
  _swigc__p_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t,
  _swigc__p_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_spline__Argument_std__allocatorT_spline__Argument_t_t,
  _swigc__p_std__vectorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_std__allocatorT_std__vectorT_casadi__MX_std__allocatorT_casadi__MX_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_casadi__SXElem_t_std__allocatorT_casadi__MatrixT_casadi__SXElem_t_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_std__allocatorT_std__vectorT_casadi__MatrixT_double_t_std__allocatorT_casadi__MatrixT_double_t_t_t_t_t,
  _swigc__p_swig__MatlabSwigIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


void SWIG_Matlab_LoadModule() {
  /* Only call once */
  static int moduleIsLoaded = 0;
  if (moduleIsLoaded) return;
  moduleIsLoaded = 1;

  /* Prevent unloading this file until MATLAB exits */
  mexLock();

  /* Exit function (called when unloaded) */
  mexAtExit(SWIG_Matlab_ExitFcn);

  /* Load dependent modules and initialize */

mxArray *id = mxCreateDoubleScalar(double(4));
int error;
if (!id) SWIG_Matlab_ErrorId("SWIG:RuntimeError", "Setup failed");
error = SWIG_Matlab_CallInterp(0, 0, 1, &id, "casadiMEX");
if (error) SWIG_Matlab_ErrorId("SWIG:RuntimeError", "Cannot initialize casadiMEX");
mxDestroyArray(id);
SWIG_InitializeModule(0);

}


const char* swigConstantName_(int con_id) {
  switch (con_id) {
  default: return 0;
  }
}

int swigConstantName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv);
  const char* s = swigConstantName_(con_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such constant ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

extern "C"
int swigConstant(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv++);
  switch (con_id) {
  default:
    SWIG_Error(SWIG_RuntimeError, "No such constant.");
    return 1;
  }
  return 0;
}

const char* swigFunctionName_(int fcn_id) {
  switch(fcn_id) {
  case 0: return "swigConstant";
  case 1: return "swigFunctionName";
  case 2: return "swigConstantName";
  case 3: return "swigThis";
  case 4: return "swigTouch";
  case 5: return "delete_MatlabSwigIterator";
  case 6: return "MatlabSwigIterator_value";
  case 7: return "MatlabSwigIterator_incr";
  case 8: return "MatlabSwigIterator_decr";
  case 9: return "MatlabSwigIterator_distance";
  case 10: return "MatlabSwigIterator_equal";
  case 11: return "MatlabSwigIterator_copy";
  case 12: return "MatlabSwigIterator_next";
  case 13: return "MatlabSwigIterator_previous";
  case 14: return "MatlabSwigIterator_advance";
  case 15: return "MatlabSwigIterator_eq";
  case 16: return "MatlabSwigIterator_ne";
  case 17: return "MatlabSwigIterator_TODOincr";
  case 18: return "MatlabSwigIterator_TODOdecr";
  case 19: return "MatlabSwigIterator_plus";
  case 20: return "MatlabSwigIterator_minus";
  case 21: return "new_PrintSharedObject";
  case 22: return "delete_PrintSharedObject";
  case 23: return "new_PrintMT";
  case 24: return "delete_PrintMT";
  case 25: return "new_PrintDT";
  case 26: return "delete_PrintDT";
  case 27: return "new_PrintST";
  case 28: return "delete_PrintST";
  case 29: return "SharedObject_to_string";
  case 30: return "new_SharedObject";
  case 31: return "delete_SharedObject";
  case 32: return "Argument_from_vector";
  case 33: return "Argument_type";
  case 34: return "Argument_is_all";
  case 35: return "Argument_concrete";
  case 36: return "new_Argument";
  case 37: return "delete_Argument";
  case 38: return "_wrap_invert_order";
  case 39: return "AnySlice_start__get";
  case 40: return "AnySlice_stop__get";
  case 41: return "AnySlice_step__get";
  case 42: return "AnySlice_indices__get";
  case 43: return "AnySlice_has_indices__get";
  case 44: return "AnySlice_indices";
  case 45: return "new_AnySlice";
  case 46: return "delete_AnySlice";
  case 47: return "DTensor_concat";
  case 48: return "DTensor_repeat";
  case 49: return "DTensor_pack";
  case 50: return "new_DTensor";
  case 51: return "delete_DTensor";
  case 52: return "DTensor_is_scalar";
  case 53: return "DTensor_as_scalar";
  case 54: return "DTensor_is_vector";
  case 55: return "DTensor_as_vector";
  case 56: return "DTensor_data";
  case 57: return "DTensor_matrix";
  case 58: return "DTensor_squeeze";
  case 59: return "DTensor_shape";
  case 60: return "DTensor_numel";
  case 61: return "DTensor_normalize_dim";
  case 62: return "DTensor_binary_dims";
  case 63: return "DTensor_get_slice";
  case 64: return "DTensor_get";
  case 65: return "DTensor_set";
  case 66: return "DTensor_n_dims";
  case 67: return "DTensor_dims";
  case 68: return "DTensor_sym";
  case 69: return "DTensor_solve";
  case 70: return "DTensor_uminus";
  case 71: return "DTensor_le";
  case 72: return "DTensor_ge";
  case 73: return "DTensor_eq";
  case 74: return "DTensor_paren";
  case 75: return "DTensor_transform";
  case 76: return "DTensor_index";
  case 77: return "DTensor_reorder_dims";
  case 78: return "DTensor_einstein";
  case 79: return "DTensor_outer_product";
  case 80: return "DTensor_trailing_mtimes";
  case 81: return "DTensor_trailing_rmtimes";
  case 82: return "DTensor_inner";
  case 83: return "DTensor_partial_product";
  case 84: return "DTensor_to_string";
  case 85: return "DTensor_plus";
  case 86: return "DTensor_minus";
  case 87: return "DTensor_times";
  case 88: return "DTensor_mtimes";
  case 89: return "DTensor_rmtimes";
  case 90: return "STensor_concat";
  case 91: return "STensor_repeat";
  case 92: return "STensor_pack";
  case 93: return "new_STensor";
  case 94: return "delete_STensor";
  case 95: return "STensor_is_scalar";
  case 96: return "STensor_as_scalar";
  case 97: return "STensor_is_vector";
  case 98: return "STensor_as_vector";
  case 99: return "STensor_data";
  case 100: return "STensor_matrix";
  case 101: return "STensor_squeeze";
  case 102: return "STensor_shape";
  case 103: return "STensor_numel";
  case 104: return "STensor_normalize_dim";
  case 105: return "STensor_binary_dims";
  case 106: return "STensor_get_slice";
  case 107: return "STensor_get";
  case 108: return "STensor_set";
  case 109: return "STensor_n_dims";
  case 110: return "STensor_dims";
  case 111: return "STensor_sym";
  case 112: return "STensor_solve";
  case 113: return "STensor_uminus";
  case 114: return "STensor_le";
  case 115: return "STensor_ge";
  case 116: return "STensor_eq";
  case 117: return "STensor_paren";
  case 118: return "STensor_transform";
  case 119: return "STensor_index";
  case 120: return "STensor_reorder_dims";
  case 121: return "STensor_einstein";
  case 122: return "STensor_outer_product";
  case 123: return "STensor_trailing_mtimes";
  case 124: return "STensor_trailing_rmtimes";
  case 125: return "STensor_inner";
  case 126: return "STensor_partial_product";
  case 127: return "STensor_to_string";
  case 128: return "STensor_plus";
  case 129: return "STensor_minus";
  case 130: return "STensor_times";
  case 131: return "STensor_mtimes";
  case 132: return "STensor_rmtimes";
  case 133: return "MTensor_concat";
  case 134: return "MTensor_repeat";
  case 135: return "MTensor_pack";
  case 136: return "new_MTensor";
  case 137: return "delete_MTensor";
  case 138: return "MTensor_is_scalar";
  case 139: return "MTensor_as_scalar";
  case 140: return "MTensor_is_vector";
  case 141: return "MTensor_as_vector";
  case 142: return "MTensor_data";
  case 143: return "MTensor_matrix";
  case 144: return "MTensor_squeeze";
  case 145: return "MTensor_shape";
  case 146: return "MTensor_numel";
  case 147: return "MTensor_normalize_dim";
  case 148: return "MTensor_binary_dims";
  case 149: return "MTensor_get_slice";
  case 150: return "MTensor_get";
  case 151: return "MTensor_set";
  case 152: return "MTensor_n_dims";
  case 153: return "MTensor_dims";
  case 154: return "MTensor_sym";
  case 155: return "MTensor_solve";
  case 156: return "MTensor_uminus";
  case 157: return "MTensor_le";
  case 158: return "MTensor_ge";
  case 159: return "MTensor_eq";
  case 160: return "MTensor_paren";
  case 161: return "MTensor_transform";
  case 162: return "MTensor_index";
  case 163: return "MTensor_reorder_dims";
  case 164: return "MTensor_einstein";
  case 165: return "MTensor_outer_product";
  case 166: return "MTensor_trailing_mtimes";
  case 167: return "MTensor_trailing_rmtimes";
  case 168: return "MTensor_inner";
  case 169: return "MTensor_partial_product";
  case 170: return "MTensor_to_string";
  case 171: return "MTensor_plus";
  case 172: return "MTensor_minus";
  case 173: return "MTensor_times";
  case 174: return "MTensor_mtimes";
  case 175: return "MTensor_rmtimes";
  case 176: return "Domain_data";
  case 177: return "Domain_type";
  case 178: return "Domain_intersection";
  case 179: return "Domain_eq";
  case 180: return "new_Domain";
  case 181: return "delete_Domain";
  case 182: return "Interval_min";
  case 183: return "Interval_max";
  case 184: return "new_Interval";
  case 185: return "delete_Interval";
  case 186: return "TensorDomain_arguments";
  case 187: return "TensorDomain_argument";
  case 188: return "TensorDomain_indexArgument";
  case 189: return "TensorDomain_hasArguments";
  case 190: return "TensorDomain_type";
  case 191: return "TensorDomain_n_domains";
  case 192: return "TensorDomain_domains";
  case 193: return "TensorDomain_domain";
  case 194: return "TensorDomain_intersection";
  case 195: return "TensorDomain_eq";
  case 196: return "new_TensorDomain";
  case 197: return "delete_TensorDomain";
  case 198: return "Basis_plus";
  case 199: return "Basis_mtimes";
  case 200: return "Basis_eval";
  case 201: return "Basis_list_eval";
  case 202: return "Basis_eq";
  case 203: return "Basis_type";
  case 204: return "Basis_domain";
  case 205: return "Basis_evaluation_grid";
  case 206: return "Basis_insert_knots";
  case 207: return "Basis_midpoint_refinement";
  case 208: return "Basis_degree_elevation";
  case 209: return "Basis_kick_boundary";
  case 210: return "Basis_project_to";
  case 211: return "Basis_transform_to";
  case 212: return "Basis_basis_functions";
  case 213: return "Basis_dimension";
  case 214: return "Basis_n_inputs";
  case 215: return "Basis_derivative";
  case 216: return "Basis_antiderivative";
  case 217: return "Basis_integral";
  case 218: return "Basis_const_coeff_tensor";
  case 219: return "new_Basis";
  case 220: return "delete_Basis";
  case 221: return "UnivariateBasis_degree";
  case 222: return "new_UnivariateBasis";
  case 223: return "delete_UnivariateBasis";
  case 224: return "new_MonomialBasis";
  case 225: return "delete_MonomialBasis";
  case 226: return "BSplineBasis_from_single";
  case 227: return "BSplineBasis_knots";
  case 228: return "BSplineBasis_greville";
  case 229: return "new_BSplineBasis";
  case 230: return "delete_BSplineBasis";
  case 231: return "TensorBasis_type";
  case 232: return "TensorBasis_n_basis";
  case 233: return "TensorBasis_n_inputs";
  case 234: return "TensorBasis_n_inputs_list";
  case 235: return "TensorBasis_dimension";
  case 236: return "TensorBasis_arguments";
  case 237: return "TensorBasis_arguments_temp";
  case 238: return "TensorBasis_argument";
  case 239: return "TensorBasis_index_argument";
  case 240: return "TensorBasis_indexArgument";
  case 241: return "TensorBasis_hasArguments";
  case 242: return "TensorBasis_valid_argument";
  case 243: return "TensorBasis_valid_argument_list";
  case 244: return "TensorBasis_domain";
  case 245: return "TensorBasis_basis";
  case 246: return "TensorBasis_bases";
  case 247: return "TensorBasis_add_basis";
  case 248: return "TensorBasis_substitute_bases";
  case 249: return "TensorBasis_plus";
  case 250: return "TensorBasis_mtimes";
  case 251: return "TensorBasis_eval";
  case 252: return "TensorBasis_grid_eval";
  case 253: return "TensorBasis_evaluation_grid";
  case 254: return "TensorBasis_eq";
  case 255: return "TensorBasis_totalNumberBasisFunctions";
  case 256: return "TensorBasis_const_coeff_tensor";
  case 257: return "TensorBasis_insert_knots";
  case 258: return "TensorBasis_midpoint_refinement";
  case 259: return "TensorBasis_degree_elevation";
  case 260: return "TensorBasis_kick_boundary";
  case 261: return "TensorBasis_derivative";
  case 262: return "TensorBasis_antiderivative";
  case 263: return "TensorBasis_integral";
  case 264: return "TensorBasis_partial_integral";
  case 265: return "TensorBasis_project_to";
  case 266: return "TensorBasis_transform_to";
  case 267: return "TensorBasis_basis_functions";
  case 268: return "TensorBasis_get_permutation";
  case 269: return "new_TensorBasis";
  case 270: return "delete_TensorBasis";
  case 271: return "Coefficient_shape";
  case 272: return "Coefficient_dimension";
  case 273: return "Coefficient_type";
  case 274: return "Coefficient_uminus";
  case 275: return "Coefficient_data";
  case 276: return "Coefficient_transform";
  case 277: return "Coefficient_transpose";
  case 278: return "Coefficient_rm_direction";
  case 279: return "Coefficient_reshape";
  case 280: return "Coefficient_trace";
  case 281: return "Coefficient_to_matrix_valued";
  case 282: return "Coefficient_cat";
  case 283: return "Coefficient_is_true_scalar";
  case 284: return "new_Coefficient";
  case 285: return "delete_Coefficient";
  case 286: return "Function_type";
  case 287: return "Function_ge";
  case 288: return "Function_eq";
  case 289: return "Function_eval_internal";
  case 290: return "Function_list_eval";
  case 291: return "Function_grid_eval";
  case 292: return "Function_partial_eval";
  case 293: return "Function_uminus";
  case 294: return "Function_pow";
  case 295: return "Function_mpow";
  case 296: return "Function_slice";
  case 297: return "Function_transpose";
  case 298: return "Function_trace";
  case 299: return "Function_vertcat";
  case 300: return "Function_horzcat";
  case 301: return "Function_cat";
  case 302: return "Function_blkdiag";
  case 303: return "Function_coeff";
  case 304: return "Function_coeff_tensor";
  case 305: return "Function_data";
  case 306: return "Function_basis";
  case 307: return "Function_tensor_basis";
  case 308: return "Function_domain";
  case 309: return "Function_is_scalar";
  case 310: return "Function_shape";
  case 311: return "Function_reshape";
  case 312: return "Function_transform_to";
  case 313: return "Function_project_to";
  case 314: return "Function_n_inputs";
  case 315: return "Function_insert_knots";
  case 316: return "Function_midpoint_refinement";
  case 317: return "Function_degree_elevation";
  case 318: return "Function_kick_boundary";
  case 319: return "Function_derivative";
  case 320: return "Function_antiderivative";
  case 321: return "Function_jacobian";
  case 322: return "Function_integral";
  case 323: return "Function_partial_integral";
  case 324: return "Function_linear";
  case 325: return "Function_to_casadi";
  case 326: return "Function_fast_eval";
  case 327: return "Function_fast_jac";
  case 328: return "Function_power";
  case 329: return "Function_mpower";
  case 330: return "Function_plus";
  case 331: return "Function_minus";
  case 332: return "Function_times";
  case 333: return "Function_mtimes";
  case 334: return "Function_rmtimes";
  case 335: return "Function_le";
  case 336: return "Function_ctranspose";
  case 337: return "new_Function";
  case 338: return "delete_Function";
  case 339: return "Polynomial_type";
  case 340: return "Polynomial_to_string";
  case 341: return "new_Polynomial";
  case 342: return "delete_Polynomial";
  case 343: return "Parameter_type";
  case 344: return "Parameter_to_string";
  case 345: return "Parameter_name";
  case 346: return "new_Parameter";
  case 347: return "delete_Parameter";
  case 348: return "OptiSplineI_set_initial";
  case 349: return "OptiSplineI_set_value";
  case 350: return "OptiSplineI_Function";
  case 351: return "new_OptiSplineI";
  case 352: return "delete_OptiSplineI";
  case 353: return "OptiSplineAdvancedI_set_initial";
  case 354: return "OptiSplineAdvancedI_set_value";
  case 355: return "OptiSplineAdvancedI_Function";
  case 356: return "new_OptiSplineAdvancedI";
  case 357: return "delete_OptiSplineAdvancedI";
  case 358: return "OptiSpline_copy";
  case 359: return "OptiSpline_debug";
  case 360: return "OptiSpline_advanced";
  case 361: return "OptiSpline_solve";
  case 362: return "OptiSpline_set_initial";
  case 363: return "OptiSpline_set_value";
  case 364: return "new_OptiSpline";
  case 365: return "delete_OptiSpline";
  case 366: return "OptiSplineAdvanced_solve";
  case 367: return "OptiSplineAdvanced_value";
  case 368: return "OptiSplineAdvanced_symvar";
  case 369: return "OptiSplineAdvanced_matlab_dump";
  case 370: return "OptiSplineAdvanced_set_initial";
  case 371: return "OptiSplineAdvanced_set_value";
  case 372: return "new_OptiSplineAdvanced";
  case 373: return "delete_OptiSplineAdvanced";
  case 374: return "OptiSplineSol_value";
  case 375: return "OptiSplineSol_opti";
  case 376: return "new_OptiSplineSol";
  case 377: return "delete_OptiSplineSol";
  case 378: return "_wrap_spline_power";
  case 379: return "_wrap_spline_plus";
  case 380: return "_wrap_spline_minus";
  case 381: return "_wrap_spline_times";
  case 382: return "_wrap_spline_mtimes";
  case 383: return "_wrap_spline_rmtimes";
  case 384: return "_wrap_spline_vertcat";
  case 385: return "_wrap_spline_horzcat";
  case 386: return "_wrap_spline_blkdiag";
  default: return 0;
  }
}

int swigFunctionName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int fcn_id = (int)mxGetScalar(*argv);
  const char* s = swigFunctionName_(fcn_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such function ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

int swigThis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "swigThis should have one input and one output.");
    return 1;
  }
  SwigPtr* swig_ptr = SWIG_Matlab_getSwigPtr(argv[0]);
  if (!swig_ptr) {
    SWIG_Error(SWIG_RuntimeError, "The argument should be a SWIG class.");
    return 1;
  }
  resv[0] = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(resv[0]) = (uint64_T)swig_ptr->ptr;
  return 0;
}

int swigTouch(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=0 || resc!=0) {
    SWIG_Error(SWIG_RuntimeError, "swigTouch should have no inputs or outputs.");
    return 1;
  }
  return 0;
}

extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  /* Initialize module if first call */
  SWIG_Matlab_LoadModule();

  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    SWIG_Matlab_Error("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  int flag=0;
  switch (fcn_id) {
  case 0: flag=swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: flag=swigFunctionName(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: flag=swigConstantName(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: flag=swigThis(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: flag=swigTouch(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: flag=_wrap_delete_MatlabSwigIterator(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: flag=_wrap_MatlabSwigIterator_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: flag=_wrap_MatlabSwigIterator_incr(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: flag=_wrap_MatlabSwigIterator_decr(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: flag=_wrap_MatlabSwigIterator_distance(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: flag=_wrap_MatlabSwigIterator_equal(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: flag=_wrap_MatlabSwigIterator_copy(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: flag=_wrap_MatlabSwigIterator_next(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: flag=_wrap_MatlabSwigIterator_previous(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: flag=_wrap_MatlabSwigIterator_advance(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: flag=_wrap_MatlabSwigIterator_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: flag=_wrap_MatlabSwigIterator_ne(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: flag=_wrap_MatlabSwigIterator_TODOincr(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: flag=_wrap_MatlabSwigIterator_TODOdecr(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: flag=_wrap_MatlabSwigIterator_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: flag=_wrap_MatlabSwigIterator_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: flag=_wrap_new_PrintSharedObject(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: flag=_wrap_delete_PrintSharedObject(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: flag=_wrap_new_PrintMT(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: flag=_wrap_delete_PrintMT(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: flag=_wrap_new_PrintDT(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: flag=_wrap_delete_PrintDT(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: flag=_wrap_new_PrintST(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: flag=_wrap_delete_PrintST(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: flag=_wrap_SharedObject_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: flag=_wrap_new_SharedObject(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: flag=_wrap_delete_SharedObject(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: flag=_wrap_Argument_from_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: flag=_wrap_Argument_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: flag=_wrap_Argument_is_all(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: flag=_wrap_Argument_concrete(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: flag=_wrap_new_Argument(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: flag=_wrap_delete_Argument(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: flag=_wrap_invert_order(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: flag=_wrap_AnySlice_start__get(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: flag=_wrap_AnySlice_stop__get(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: flag=_wrap_AnySlice_step__get(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: flag=_wrap_AnySlice_indices__get(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: flag=_wrap_AnySlice_has_indices__get(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: flag=_wrap_AnySlice_indices(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: flag=_wrap_new_AnySlice(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: flag=_wrap_delete_AnySlice(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: flag=_wrap_DTensor_concat(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: flag=_wrap_DTensor_repeat(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: flag=_wrap_DTensor_pack(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: flag=_wrap_new_DTensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: flag=_wrap_delete_DTensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: flag=_wrap_DTensor_is_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: flag=_wrap_DTensor_as_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: flag=_wrap_DTensor_is_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: flag=_wrap_DTensor_as_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: flag=_wrap_DTensor_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: flag=_wrap_DTensor_matrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: flag=_wrap_DTensor_squeeze(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: flag=_wrap_DTensor_shape(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: flag=_wrap_DTensor_numel(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: flag=_wrap_DTensor_normalize_dim(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: flag=_wrap_DTensor_binary_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: flag=_wrap_DTensor_get_slice(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: flag=_wrap_DTensor_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: flag=_wrap_DTensor_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: flag=_wrap_DTensor_n_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: flag=_wrap_DTensor_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: flag=_wrap_DTensor_sym(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: flag=_wrap_DTensor_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: flag=_wrap_DTensor_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: flag=_wrap_DTensor_le(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: flag=_wrap_DTensor_ge(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: flag=_wrap_DTensor_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: flag=_wrap_DTensor_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: flag=_wrap_DTensor_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: flag=_wrap_DTensor_index(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: flag=_wrap_DTensor_reorder_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: flag=_wrap_DTensor_einstein(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: flag=_wrap_DTensor_outer_product(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: flag=_wrap_DTensor_trailing_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: flag=_wrap_DTensor_trailing_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: flag=_wrap_DTensor_inner(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: flag=_wrap_DTensor_partial_product(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: flag=_wrap_DTensor_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: flag=_wrap_DTensor_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: flag=_wrap_DTensor_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: flag=_wrap_DTensor_times(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: flag=_wrap_DTensor_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: flag=_wrap_DTensor_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: flag=_wrap_STensor_concat(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: flag=_wrap_STensor_repeat(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: flag=_wrap_STensor_pack(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: flag=_wrap_new_STensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: flag=_wrap_delete_STensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: flag=_wrap_STensor_is_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: flag=_wrap_STensor_as_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: flag=_wrap_STensor_is_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: flag=_wrap_STensor_as_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: flag=_wrap_STensor_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: flag=_wrap_STensor_matrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: flag=_wrap_STensor_squeeze(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: flag=_wrap_STensor_shape(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: flag=_wrap_STensor_numel(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: flag=_wrap_STensor_normalize_dim(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: flag=_wrap_STensor_binary_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: flag=_wrap_STensor_get_slice(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: flag=_wrap_STensor_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: flag=_wrap_STensor_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: flag=_wrap_STensor_n_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: flag=_wrap_STensor_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: flag=_wrap_STensor_sym(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: flag=_wrap_STensor_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: flag=_wrap_STensor_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: flag=_wrap_STensor_le(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: flag=_wrap_STensor_ge(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: flag=_wrap_STensor_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: flag=_wrap_STensor_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: flag=_wrap_STensor_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: flag=_wrap_STensor_index(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: flag=_wrap_STensor_reorder_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: flag=_wrap_STensor_einstein(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: flag=_wrap_STensor_outer_product(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: flag=_wrap_STensor_trailing_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: flag=_wrap_STensor_trailing_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: flag=_wrap_STensor_inner(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: flag=_wrap_STensor_partial_product(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: flag=_wrap_STensor_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: flag=_wrap_STensor_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: flag=_wrap_STensor_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: flag=_wrap_STensor_times(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: flag=_wrap_STensor_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: flag=_wrap_STensor_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: flag=_wrap_MTensor_concat(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: flag=_wrap_MTensor_repeat(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: flag=_wrap_MTensor_pack(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: flag=_wrap_new_MTensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: flag=_wrap_delete_MTensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: flag=_wrap_MTensor_is_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: flag=_wrap_MTensor_as_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: flag=_wrap_MTensor_is_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: flag=_wrap_MTensor_as_vector(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: flag=_wrap_MTensor_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: flag=_wrap_MTensor_matrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: flag=_wrap_MTensor_squeeze(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: flag=_wrap_MTensor_shape(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: flag=_wrap_MTensor_numel(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: flag=_wrap_MTensor_normalize_dim(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: flag=_wrap_MTensor_binary_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: flag=_wrap_MTensor_get_slice(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: flag=_wrap_MTensor_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: flag=_wrap_MTensor_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: flag=_wrap_MTensor_n_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: flag=_wrap_MTensor_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: flag=_wrap_MTensor_sym(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: flag=_wrap_MTensor_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: flag=_wrap_MTensor_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: flag=_wrap_MTensor_le(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: flag=_wrap_MTensor_ge(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: flag=_wrap_MTensor_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: flag=_wrap_MTensor_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: flag=_wrap_MTensor_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: flag=_wrap_MTensor_index(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: flag=_wrap_MTensor_reorder_dims(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: flag=_wrap_MTensor_einstein(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: flag=_wrap_MTensor_outer_product(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: flag=_wrap_MTensor_trailing_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: flag=_wrap_MTensor_trailing_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: flag=_wrap_MTensor_inner(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: flag=_wrap_MTensor_partial_product(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: flag=_wrap_MTensor_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: flag=_wrap_MTensor_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: flag=_wrap_MTensor_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: flag=_wrap_MTensor_times(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: flag=_wrap_MTensor_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: flag=_wrap_MTensor_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: flag=_wrap_Domain_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: flag=_wrap_Domain_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: flag=_wrap_Domain_intersection(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: flag=_wrap_Domain_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: flag=_wrap_new_Domain(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: flag=_wrap_delete_Domain(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: flag=_wrap_Interval_min(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: flag=_wrap_Interval_max(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: flag=_wrap_new_Interval(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: flag=_wrap_delete_Interval(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: flag=_wrap_TensorDomain_arguments(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: flag=_wrap_TensorDomain_argument(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: flag=_wrap_TensorDomain_indexArgument(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: flag=_wrap_TensorDomain_hasArguments(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: flag=_wrap_TensorDomain_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: flag=_wrap_TensorDomain_n_domains(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: flag=_wrap_TensorDomain_domains(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: flag=_wrap_TensorDomain_domain(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: flag=_wrap_TensorDomain_intersection(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: flag=_wrap_TensorDomain_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: flag=_wrap_new_TensorDomain(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: flag=_wrap_delete_TensorDomain(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: flag=_wrap_Basis_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: flag=_wrap_Basis_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: flag=_wrap_Basis_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: flag=_wrap_Basis_list_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: flag=_wrap_Basis_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: flag=_wrap_Basis_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: flag=_wrap_Basis_domain(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: flag=_wrap_Basis_evaluation_grid(resc,resv,argc,(mxArray**)(argv)); break;
  case 206: flag=_wrap_Basis_insert_knots(resc,resv,argc,(mxArray**)(argv)); break;
  case 207: flag=_wrap_Basis_midpoint_refinement(resc,resv,argc,(mxArray**)(argv)); break;
  case 208: flag=_wrap_Basis_degree_elevation(resc,resv,argc,(mxArray**)(argv)); break;
  case 209: flag=_wrap_Basis_kick_boundary(resc,resv,argc,(mxArray**)(argv)); break;
  case 210: flag=_wrap_Basis_project_to(resc,resv,argc,(mxArray**)(argv)); break;
  case 211: flag=_wrap_Basis_transform_to(resc,resv,argc,(mxArray**)(argv)); break;
  case 212: flag=_wrap_Basis_basis_functions(resc,resv,argc,(mxArray**)(argv)); break;
  case 213: flag=_wrap_Basis_dimension(resc,resv,argc,(mxArray**)(argv)); break;
  case 214: flag=_wrap_Basis_n_inputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 215: flag=_wrap_Basis_derivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 216: flag=_wrap_Basis_antiderivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 217: flag=_wrap_Basis_integral(resc,resv,argc,(mxArray**)(argv)); break;
  case 218: flag=_wrap_Basis_const_coeff_tensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 219: flag=_wrap_new_Basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 220: flag=_wrap_delete_Basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 221: flag=_wrap_UnivariateBasis_degree(resc,resv,argc,(mxArray**)(argv)); break;
  case 222: flag=_wrap_new_UnivariateBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 223: flag=_wrap_delete_UnivariateBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 224: flag=_wrap_new_MonomialBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 225: flag=_wrap_delete_MonomialBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 226: flag=_wrap_BSplineBasis_from_single(resc,resv,argc,(mxArray**)(argv)); break;
  case 227: flag=_wrap_BSplineBasis_knots(resc,resv,argc,(mxArray**)(argv)); break;
  case 228: flag=_wrap_BSplineBasis_greville(resc,resv,argc,(mxArray**)(argv)); break;
  case 229: flag=_wrap_new_BSplineBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 230: flag=_wrap_delete_BSplineBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 231: flag=_wrap_TensorBasis_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 232: flag=_wrap_TensorBasis_n_basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 233: flag=_wrap_TensorBasis_n_inputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 234: flag=_wrap_TensorBasis_n_inputs_list(resc,resv,argc,(mxArray**)(argv)); break;
  case 235: flag=_wrap_TensorBasis_dimension(resc,resv,argc,(mxArray**)(argv)); break;
  case 236: flag=_wrap_TensorBasis_arguments(resc,resv,argc,(mxArray**)(argv)); break;
  case 237: flag=_wrap_TensorBasis_arguments_temp(resc,resv,argc,(mxArray**)(argv)); break;
  case 238: flag=_wrap_TensorBasis_argument(resc,resv,argc,(mxArray**)(argv)); break;
  case 239: flag=_wrap_TensorBasis_index_argument(resc,resv,argc,(mxArray**)(argv)); break;
  case 240: flag=_wrap_TensorBasis_indexArgument(resc,resv,argc,(mxArray**)(argv)); break;
  case 241: flag=_wrap_TensorBasis_hasArguments(resc,resv,argc,(mxArray**)(argv)); break;
  case 242: flag=_wrap_TensorBasis_valid_argument(resc,resv,argc,(mxArray**)(argv)); break;
  case 243: flag=_wrap_TensorBasis_valid_argument_list(resc,resv,argc,(mxArray**)(argv)); break;
  case 244: flag=_wrap_TensorBasis_domain(resc,resv,argc,(mxArray**)(argv)); break;
  case 245: flag=_wrap_TensorBasis_basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 246: flag=_wrap_TensorBasis_bases(resc,resv,argc,(mxArray**)(argv)); break;
  case 247: flag=_wrap_TensorBasis_add_basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 248: flag=_wrap_TensorBasis_substitute_bases(resc,resv,argc,(mxArray**)(argv)); break;
  case 249: flag=_wrap_TensorBasis_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 250: flag=_wrap_TensorBasis_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 251: flag=_wrap_TensorBasis_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 252: flag=_wrap_TensorBasis_grid_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 253: flag=_wrap_TensorBasis_evaluation_grid(resc,resv,argc,(mxArray**)(argv)); break;
  case 254: flag=_wrap_TensorBasis_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 255: flag=_wrap_TensorBasis_totalNumberBasisFunctions(resc,resv,argc,(mxArray**)(argv)); break;
  case 256: flag=_wrap_TensorBasis_const_coeff_tensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 257: flag=_wrap_TensorBasis_insert_knots(resc,resv,argc,(mxArray**)(argv)); break;
  case 258: flag=_wrap_TensorBasis_midpoint_refinement(resc,resv,argc,(mxArray**)(argv)); break;
  case 259: flag=_wrap_TensorBasis_degree_elevation(resc,resv,argc,(mxArray**)(argv)); break;
  case 260: flag=_wrap_TensorBasis_kick_boundary(resc,resv,argc,(mxArray**)(argv)); break;
  case 261: flag=_wrap_TensorBasis_derivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 262: flag=_wrap_TensorBasis_antiderivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 263: flag=_wrap_TensorBasis_integral(resc,resv,argc,(mxArray**)(argv)); break;
  case 264: flag=_wrap_TensorBasis_partial_integral(resc,resv,argc,(mxArray**)(argv)); break;
  case 265: flag=_wrap_TensorBasis_project_to(resc,resv,argc,(mxArray**)(argv)); break;
  case 266: flag=_wrap_TensorBasis_transform_to(resc,resv,argc,(mxArray**)(argv)); break;
  case 267: flag=_wrap_TensorBasis_basis_functions(resc,resv,argc,(mxArray**)(argv)); break;
  case 268: flag=_wrap_TensorBasis_get_permutation(resc,resv,argc,(mxArray**)(argv)); break;
  case 269: flag=_wrap_new_TensorBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 270: flag=_wrap_delete_TensorBasis(resc,resv,argc,(mxArray**)(argv)); break;
  case 271: flag=_wrap_Coefficient_shape(resc,resv,argc,(mxArray**)(argv)); break;
  case 272: flag=_wrap_Coefficient_dimension(resc,resv,argc,(mxArray**)(argv)); break;
  case 273: flag=_wrap_Coefficient_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 274: flag=_wrap_Coefficient_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 275: flag=_wrap_Coefficient_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 276: flag=_wrap_Coefficient_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 277: flag=_wrap_Coefficient_transpose(resc,resv,argc,(mxArray**)(argv)); break;
  case 278: flag=_wrap_Coefficient_rm_direction(resc,resv,argc,(mxArray**)(argv)); break;
  case 279: flag=_wrap_Coefficient_reshape(resc,resv,argc,(mxArray**)(argv)); break;
  case 280: flag=_wrap_Coefficient_trace(resc,resv,argc,(mxArray**)(argv)); break;
  case 281: flag=_wrap_Coefficient_to_matrix_valued(resc,resv,argc,(mxArray**)(argv)); break;
  case 282: flag=_wrap_Coefficient_cat(resc,resv,argc,(mxArray**)(argv)); break;
  case 283: flag=_wrap_Coefficient_is_true_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 284: flag=_wrap_new_Coefficient(resc,resv,argc,(mxArray**)(argv)); break;
  case 285: flag=_wrap_delete_Coefficient(resc,resv,argc,(mxArray**)(argv)); break;
  case 286: flag=_wrap_Function_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 287: flag=_wrap_Function_ge(resc,resv,argc,(mxArray**)(argv)); break;
  case 288: flag=_wrap_Function_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 289: flag=_wrap_Function_eval_internal(resc,resv,argc,(mxArray**)(argv)); break;
  case 290: flag=_wrap_Function_list_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 291: flag=_wrap_Function_grid_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 292: flag=_wrap_Function_partial_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 293: flag=_wrap_Function_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 294: flag=_wrap_Function_pow(resc,resv,argc,(mxArray**)(argv)); break;
  case 295: flag=_wrap_Function_mpow(resc,resv,argc,(mxArray**)(argv)); break;
  case 296: flag=_wrap_Function_slice(resc,resv,argc,(mxArray**)(argv)); break;
  case 297: flag=_wrap_Function_transpose(resc,resv,argc,(mxArray**)(argv)); break;
  case 298: flag=_wrap_Function_trace(resc,resv,argc,(mxArray**)(argv)); break;
  case 299: flag=_wrap_Function_vertcat(resc,resv,argc,(mxArray**)(argv)); break;
  case 300: flag=_wrap_Function_horzcat(resc,resv,argc,(mxArray**)(argv)); break;
  case 301: flag=_wrap_Function_cat(resc,resv,argc,(mxArray**)(argv)); break;
  case 302: flag=_wrap_Function_blkdiag(resc,resv,argc,(mxArray**)(argv)); break;
  case 303: flag=_wrap_Function_coeff(resc,resv,argc,(mxArray**)(argv)); break;
  case 304: flag=_wrap_Function_coeff_tensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 305: flag=_wrap_Function_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 306: flag=_wrap_Function_basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 307: flag=_wrap_Function_tensor_basis(resc,resv,argc,(mxArray**)(argv)); break;
  case 308: flag=_wrap_Function_domain(resc,resv,argc,(mxArray**)(argv)); break;
  case 309: flag=_wrap_Function_is_scalar(resc,resv,argc,(mxArray**)(argv)); break;
  case 310: flag=_wrap_Function_shape(resc,resv,argc,(mxArray**)(argv)); break;
  case 311: flag=_wrap_Function_reshape(resc,resv,argc,(mxArray**)(argv)); break;
  case 312: flag=_wrap_Function_transform_to(resc,resv,argc,(mxArray**)(argv)); break;
  case 313: flag=_wrap_Function_project_to(resc,resv,argc,(mxArray**)(argv)); break;
  case 314: flag=_wrap_Function_n_inputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 315: flag=_wrap_Function_insert_knots(resc,resv,argc,(mxArray**)(argv)); break;
  case 316: flag=_wrap_Function_midpoint_refinement(resc,resv,argc,(mxArray**)(argv)); break;
  case 317: flag=_wrap_Function_degree_elevation(resc,resv,argc,(mxArray**)(argv)); break;
  case 318: flag=_wrap_Function_kick_boundary(resc,resv,argc,(mxArray**)(argv)); break;
  case 319: flag=_wrap_Function_derivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 320: flag=_wrap_Function_antiderivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 321: flag=_wrap_Function_jacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 322: flag=_wrap_Function_integral(resc,resv,argc,(mxArray**)(argv)); break;
  case 323: flag=_wrap_Function_partial_integral(resc,resv,argc,(mxArray**)(argv)); break;
  case 324: flag=_wrap_Function_linear(resc,resv,argc,(mxArray**)(argv)); break;
  case 325: flag=_wrap_Function_to_casadi(resc,resv,argc,(mxArray**)(argv)); break;
  case 326: flag=_wrap_Function_fast_eval(resc,resv,argc,(mxArray**)(argv)); break;
  case 327: flag=_wrap_Function_fast_jac(resc,resv,argc,(mxArray**)(argv)); break;
  case 328: flag=_wrap_Function_power(resc,resv,argc,(mxArray**)(argv)); break;
  case 329: flag=_wrap_Function_mpower(resc,resv,argc,(mxArray**)(argv)); break;
  case 330: flag=_wrap_Function_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 331: flag=_wrap_Function_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 332: flag=_wrap_Function_times(resc,resv,argc,(mxArray**)(argv)); break;
  case 333: flag=_wrap_Function_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 334: flag=_wrap_Function_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 335: flag=_wrap_Function_le(resc,resv,argc,(mxArray**)(argv)); break;
  case 336: flag=_wrap_Function_ctranspose(resc,resv,argc,(mxArray**)(argv)); break;
  case 337: flag=_wrap_new_Function(resc,resv,argc,(mxArray**)(argv)); break;
  case 338: flag=_wrap_delete_Function(resc,resv,argc,(mxArray**)(argv)); break;
  case 339: flag=_wrap_Polynomial_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 340: flag=_wrap_Polynomial_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 341: flag=_wrap_new_Polynomial(resc,resv,argc,(mxArray**)(argv)); break;
  case 342: flag=_wrap_delete_Polynomial(resc,resv,argc,(mxArray**)(argv)); break;
  case 343: flag=_wrap_Parameter_type(resc,resv,argc,(mxArray**)(argv)); break;
  case 344: flag=_wrap_Parameter_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 345: flag=_wrap_Parameter_name(resc,resv,argc,(mxArray**)(argv)); break;
  case 346: flag=_wrap_new_Parameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 347: flag=_wrap_delete_Parameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 348: flag=_wrap_OptiSplineI_set_initial(resc,resv,argc,(mxArray**)(argv)); break;
  case 349: flag=_wrap_OptiSplineI_set_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 350: flag=_wrap_OptiSplineI_Function(resc,resv,argc,(mxArray**)(argv)); break;
  case 351: flag=_wrap_new_OptiSplineI(resc,resv,argc,(mxArray**)(argv)); break;
  case 352: flag=_wrap_delete_OptiSplineI(resc,resv,argc,(mxArray**)(argv)); break;
  case 353: flag=_wrap_OptiSplineAdvancedI_set_initial(resc,resv,argc,(mxArray**)(argv)); break;
  case 354: flag=_wrap_OptiSplineAdvancedI_set_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 355: flag=_wrap_OptiSplineAdvancedI_Function(resc,resv,argc,(mxArray**)(argv)); break;
  case 356: flag=_wrap_new_OptiSplineAdvancedI(resc,resv,argc,(mxArray**)(argv)); break;
  case 357: flag=_wrap_delete_OptiSplineAdvancedI(resc,resv,argc,(mxArray**)(argv)); break;
  case 358: flag=_wrap_OptiSpline_copy(resc,resv,argc,(mxArray**)(argv)); break;
  case 359: flag=_wrap_OptiSpline_debug(resc,resv,argc,(mxArray**)(argv)); break;
  case 360: flag=_wrap_OptiSpline_advanced(resc,resv,argc,(mxArray**)(argv)); break;
  case 361: flag=_wrap_OptiSpline_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 362: flag=_wrap_OptiSpline_set_initial(resc,resv,argc,(mxArray**)(argv)); break;
  case 363: flag=_wrap_OptiSpline_set_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 364: flag=_wrap_new_OptiSpline(resc,resv,argc,(mxArray**)(argv)); break;
  case 365: flag=_wrap_delete_OptiSpline(resc,resv,argc,(mxArray**)(argv)); break;
  case 366: flag=_wrap_OptiSplineAdvanced_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 367: flag=_wrap_OptiSplineAdvanced_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 368: flag=_wrap_OptiSplineAdvanced_symvar(resc,resv,argc,(mxArray**)(argv)); break;
  case 369: flag=_wrap_OptiSplineAdvanced_matlab_dump(resc,resv,argc,(mxArray**)(argv)); break;
  case 370: flag=_wrap_OptiSplineAdvanced_set_initial(resc,resv,argc,(mxArray**)(argv)); break;
  case 371: flag=_wrap_OptiSplineAdvanced_set_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 372: flag=_wrap_new_OptiSplineAdvanced(resc,resv,argc,(mxArray**)(argv)); break;
  case 373: flag=_wrap_delete_OptiSplineAdvanced(resc,resv,argc,(mxArray**)(argv)); break;
  case 374: flag=_wrap_OptiSplineSol_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 375: flag=_wrap_OptiSplineSol_opti(resc,resv,argc,(mxArray**)(argv)); break;
  case 376: flag=_wrap_new_OptiSplineSol(resc,resv,argc,(mxArray**)(argv)); break;
  case 377: flag=_wrap_delete_OptiSplineSol(resc,resv,argc,(mxArray**)(argv)); break;
  case 378: flag=_wrap_spline_power(resc,resv,argc,(mxArray**)(argv)); break;
  case 379: flag=_wrap_spline_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 380: flag=_wrap_spline_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 381: flag=_wrap_spline_times(resc,resv,argc,(mxArray**)(argv)); break;
  case 382: flag=_wrap_spline_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 383: flag=_wrap_spline_rmtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 384: flag=_wrap_spline_vertcat(resc,resv,argc,(mxArray**)(argv)); break;
  case 385: flag=_wrap_spline_horzcat(resc,resv,argc,(mxArray**)(argv)); break;
  case 386: flag=_wrap_spline_blkdiag(resc,resv,argc,(mxArray**)(argv)); break;
  default: flag=1, SWIG_Error(SWIG_RuntimeError, "No function id %d.", fcn_id);
  }
  if (flag) {
    SWIG_Matlab_ErrorId(SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  }
}
